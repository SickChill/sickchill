# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python Packaging

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - develop

jobs:
  Test:
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
        os: [ubuntu-latest]
        experimental: [false]
        include:
          - os: windows-latest
            experimental: true
            python-version: 3.9
          - os: macos-latest
            experimental: true
            python-version: 3.9
      fail-fast: true
    continue-on-error: ${{ matrix.experimental }}
    runs-on: ${{ matrix.os }}
    steps:
    - name: Cancel Previous Runs
      if: success() && !env.ACT
      uses: styfle/cancel-workflow-action@0.9.0
      with:
        access_token: ${{ github.token }}
    - name: Checkout
      if: success() && !env.ACT
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        persist-credentials: false
    - name: Lint shell scripts
      if: success() && startsWith(runner.os, 'Linux') && !env.ACT
      uses: ludeeus/action-shellcheck@master
      with:
        format: diff
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set up Node
      uses: actions/setup-node@v2
      with:
        node-version: '14.x'
    - name: Restore pip cache
      if: success() && !env.ACT
      uses: actions/cache@v2
      with:
        path: $(python -m pip cache dir)
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    - name: Restore npm cache
      uses: actions/cache@v2
      with:
        path: $(npm config get cache)
        key: ${{ runner.os }}-node-${{ hashFiles('**/package.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Install tools
      run: |
        curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py | python - --preview -f -y
        pip install -U pip
        pip install -U poethepoet
        npm install -g yarn
    - name: Set path (Linux/MacOS)
      if: success() && !startsWith(runner.os, 'Windows')
      run: echo "$HOME/.local/bin" >> $GITHUB_PATH
    - name: Set path (Windows)
      if: success() && startsWith(runner.os, 'Windows')
      run: echo "C:\Users\runneradmin\AppData\Roaming\Python\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    - name: Restore poetry cache
      if: success() && !env.ACT
      uses: actions/cache@v2
      with:
        path: $(poetry config cache-dir)
        key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-poetry-${{ matrix.python-version }}-
    - name: Restore virtualenv
      if: success() && !env.ACT
      uses: actions/cache@v2
      with:
        path: .venv
        key: ${{ runner.os }}-virtualenv-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-virtualenv-${{ matrix.python-version }}-
    - name: Install dependencies
      run: |
        poetry config virtualenvs.in-project true
        poetry install --no-interaction --no-root -vvv
    - name: Lint Python and Javascript
      run: poe lint
    - name: Test Javascript
      run: poe yarn test
    - name: Test Python
      run: |
        poe pytest
        poe codecov -e OS=${{ runner.os }} Interpreter="$(poetry run python -V)" -t ${{ secrets.CODECOV_TOKEN }}
  Deploy:
    needs: [Test]
    runs-on: ubuntu-latest
    steps:
    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.8.0
      with:
        access_token: ${{ github.token }}
    - name: Checkout
      if: success() && !env.ACT
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        persist-credentials: false
    # https://github.com/docker/setup-qemu-action
    - name: Set up QEMU
      if: success()
      uses: docker/setup-qemu-action@v1
      with:
        image: tonistiigi/binfmt:latest
        platforms: all
    # https://github.com/docker/setup-buildx-action
    - name: Set up Docker Buildx
      if: success()
      id: buildx
      uses: docker/setup-buildx-action@v1
    - name: Available platforms
      if: success()
      run: echo ${{ steps.buildx.outputs.platforms }}
    - name: Prepare
      if: success()
      id: prepare
      run: |
        echo ::set-output name=docker_platforms::linux/amd64,linux/arm64
        # Remove refs/heads and refs/tags
        VERSION_TAG=${GITHUB_REF#refs/*/}
        # Remove /merge from the end
        VERSION_TAG=${VERSION_TAG%/merge}
        # Replace slashes
        VERSION_TAG=${VERSION_TAG//\//_}
        # Limit length to 128
        VERSION_TAG=${VERSION_TAG:0:128}
        echo ::set-output name=version::${VERSION_TAG}
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    - name: Docker Log out fix
      if: success() && !env.ACT
      run: |
        docker logout
        docker logout ghcr.io
    - name: Login to DockerHub
      if: success() && github.actor == 'miigotu' && !env.ACT
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Login to GitHub Container Registry
      if: success() && github.actor == 'miigotu' && !env.ACT
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build and Push (master)
      if: success() && contains(steps.prepare.outputs.version, 'master') && github.actor == 'miigotu'
      uses: docker/build-push-action@v2
      with:
        context: .
        platforms: ${{ steps.prepare.outputs.docker_platforms }}
        push: ${{ !env.ACT }}
        tags: |
          ghcr.io/sickchill/sickchill:master
          ghcr.io/ps3dev/ps3dev:latest
          sickchill/sickchill:master
          sickchill/sickchill:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new
    - name: Build and Push (non-master)
      if: success() && !contains(steps.prepare.outputs.version, 'master')
      uses: docker/build-push-action@v2
      with:
        context: .
        platforms: ${{ steps.prepare.outputs.docker_platforms }}
        push: ${{ !env.ACT }}
        tags: |
          ghcr.io/sickchill/sickchill:${{ steps.prepare.outputs.version }}
          sickchill/sickchill:${{ steps.prepare.outputs.version }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new
      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
    - name: Move cache
      if: always()
      run: |
        if [ -e /tmp/.buildx-cache-new ]; then rm -rf /tmp/.buildx-cache && mv /tmp/.buildx-cache-new /tmp/.buildx-cache; fi
