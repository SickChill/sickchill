# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python Packaging

on:
  push:
    branches-ignore:
      - 'l10n_*'
  pull_request:
    branches-ignore:
      - 'l10n_*'

jobs:
  Shellcheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Shellcheck
        uses: ludeeus/action-shellcheck@master
#        with:
#          additional_files: 'init.*'
  Test:
    strategy:
      matrix:
        python-version: [3.8]
        os: [ubuntu-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.8.0
      with:
        access_token: ${{ github.token }}
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        persist-credentials: false
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set up Node
      uses: actions/setup-node@v1
      with:
        node-version: '14.x'
    - name: Prepare
      id: prepare
      run: |
        echo "::set-output name=npm_cache::$(npm config get cache)"
        echo "::set-output name=yarn_cache::$(yarn cache dir)"
        echo "::set-output name=pip_cache::$(python -m pip cache dir)"
        echo "::set-output name=os::$(echo "print('${{ runner.os }}'.lower())" | python)"
    - name: Restore npm cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.prepare.outputs.npm_cache }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Restore yarn cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.prepare.outputs.yarn_cache }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - name: Restore pip cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.prepare.outputs.pip_cache }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        yarn --silent
        pip install wheel
        pip install --upgrade --user pip tox babel crowdin-cli-py
    - name: Restore tox workdir
      uses: actions/cache@v2
      with:
        path: $(tox --showconfig | grep '^toxworkdir = .*$' | tail -c+14)
        key: ${{ runner.os }}-tox-${{ hashFiles('**/tox.ini') }}
        restore-keys: |
          ${{ runner.os }}-tox-
#    - name: Install xo
#      run: |
#        npm config set strict-ssl false
#        npm config set registry "http://registry.npmjs.org/"
#        npm install -g xo
#    - name: Test with XO
#      run: xo
    - name: Test with tox
      id: tox
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      run: |
        tox -v --recreate -e "py38-{flake8,${{ steps.prepare.outputs.os }}}"
  Deploy:
    needs: [Shellcheck, Test]
    runs-on: ubuntu-latest
    steps:
    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.8.0
      with:
        access_token: ${{ github.token }}
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        persist-credentials: false
    # https://github.com/docker/setup-qemu-action
    - name: Set up QEMU
      if: success()
      id: qemu
      uses: docker/setup-qemu-action@v1
      with:
        image: tonistiigi/binfmt:latest
        platforms: all
    # https://github.com/docker/setup-buildx-action
    - name: Set up Docker Buildx
      if: success()
      id: buildx
      uses: docker/setup-buildx-action@v1
    - name: Available platforms
      if: success()
      run: echo ${{ steps.buildx.outputs.platforms }}
    - name: Prepare
      if: success()
      id: prepare
      run: |
        echo ::set-output name=docker_platforms::linux/amd64,linux/arm64
        # Remove refs/heads and refs/tags
        VERSION_TAG=${GITHUB_REF#refs/*/}
        # Remove /merge from the end
        VERSION_TAG=${VERSION_TAG%/merge}
        # Replace slashes
        VERSION_TAG=${VERSION_TAG//\//_}
        # Limit length to 128
        VERSION_TAG=${VERSION_TAG:0:128}
        echo ::set-output name=version::${VERSION_TAG}
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    - name: Docker Log out fix
      run: |
        docker logout
        docker logout ghcr.io
    - name: Login to DockerHub
      if: success() && github.actor == 'miigotu'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Login to GitHub Container Registry
      if: success() && github.actor == 'miigotu'
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build and Push (master)
      if: success() && contains(steps.prepare.outputs.version, 'master') && github.actor == 'miigotu'
      uses: docker/build-push-action@v2
      with:
        context: .
        platforms: ${{ steps.prepare.outputs.docker_platforms }}
        push: true
        tags: |
          ghcr.io/sickchill/sickchill:master
          ghcr.io/ps3dev/ps3dev:latest
          sickchill/sickchill:master
          sickchill/sickchill:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new
    - name: Build and Push (non-master)
      if: success() && !contains(steps.prepare.outputs.version, 'master')
      uses: docker/build-push-action@v2
      with:
        context: .
        platforms: ${{ steps.prepare.outputs.docker_platforms }}
        push: true
        tags: |
          ghcr.io/sickchill/sickchill:${{ steps.prepare.outputs.version }}
          sickchill/sickchill:${{ steps.prepare.outputs.version }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new
      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
    - name: Move cache
      if: always()
      run: |
        if [ -e /tmp/.buildx-cache-new ]; then rm -rf /tmp/.buildx-cache && mv /tmp/.buildx-cache-new /tmp/.buildx-cache; fi
