# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python Packaging

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - develop

jobs:
  Test:
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.7, 3.8, 3.9, "3.10"]
        experimental: [false]
        include:
          - os: windows-latest
            python-version: 3.9
            experimental: true
          - os: macos-latest
            python-version: 3.9
            experimental: true
          - os: ubuntu-latest
            python-version: 3.6
            experimental: true
          - os: ubuntu-latest
            python-version: "3.11-dev"
            experimental: true
          - os: windows-latest
            python-version: "3.11-dev"
            experimental: true
          - os: ubuntu-latest
            python-version: "pypy-3.7"
            experimental: true
          - os: ubuntu-latest
            python-version: "pypy-3.8"
            experimental: true
          - os: ubuntu-latest
            python-version: "pypy-3.9"
            experimental: true
      fail-fast: true
    continue-on-error: ${{ matrix.experimental }}
    runs-on: ${{ matrix.os }}
    steps:
    - name: Cancel Previous Runs
      if: success() && !env.ACT
      uses: styfle/cancel-workflow-action@0.10.0
      with:
        access_token: ${{ github.token }}
    - name: Checkout
      if: success() && !env.ACT
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
        persist-credentials: false
    - name: Lint shell scripts
      if: success() && startsWith(runner.os, 'Linux') && matrix.python-version == 3.10 && !env.ACT
      uses: ludeeus/action-shellcheck@master
      with:
        format: diff
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set up Node
      if: success() && startsWith(runner.os, 'Linux') && matrix.python-version == 3.10
      uses: actions/setup-node@v3
      with:
        node-version: '16.x'
        cache: 'npm'
    - name: Restore pip cache
      if: success() && !env.ACT
      uses: actions/cache@v3
      with:
        path: $(python -m pip cache dir)
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    - name: Restore npm cache
      if: success() && startsWith(runner.os, 'Linux') && matrix.python-version == 3.10
      uses: actions/cache@v3
      with:
        path: $(npm config get cache)
        key: ${{ runner.os }}-node-${{ hashFiles('**/package.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Install yarn
      if: success() && startsWith(runner.os, 'Linux') && matrix.python-version == 3.10
      run: npm install -g yarn
      shell: bash
    - name: Install Poetry
      uses: snok/install-poetry@v1.3.1
      with:
        version: 1.1.14
        virtualenvs-path: .venv
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: false
    - name: Restore poetry cache
      if: success() && !env.ACT
      uses: actions/cache@v3
      with:
        path: $(poetry config cache-dir)
        key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
    - name: Restore virtualenv
      if: success() && !env.ACT
      uses: actions/cache@v3
      with:
        path: .venv
        key: ${{ runner.os }}-virtualenv-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
    - name: Install dependencies
      run: |
        poetry update
        poetry install --no-interaction --no-root
        pip install poethepoet
      shell: bash
    - name: Run yarn
      if: success() && startsWith(runner.os, 'Linux') && matrix.python-version == 3.10
      run: poe yarn
      shell: bash
    - name: Lint Python
      if: success() && startsWith(runner.os, 'Linux') && matrix.python-version == 3.10
      run: poe lint
      shell: bash
    - name: Lint and test Javascript
      if: success() && startsWith(runner.os, 'Linux') && matrix.python-version == 3.10
      run: poe yarn test
      shell: bash
    - name: Test Python
      run: |
        poe pytest
        poe codecov --env OS=${{ runner.os }} Interpreter="$(poetry run python -V)" -t ${{ secrets.CODECOV_TOKEN }}
      shell: bash
      env:
         SC_NO_INSTALL_DEPENDS: 1
  Deploy:
    needs: [Test]
    runs-on: ubuntu-latest
    steps:
    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.10.0
      with:
        access_token: ${{ github.token }}
    - name: Checkout
      if: success() && !env.ACT
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
        persist-credentials: false
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    - name: Login to DockerHub
      if: github.actor == 'miigotu' && !env.ACT
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Login to GitHub Container Registry
      if: github.actor == 'miigotu' && !env.ACT
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Install Poetry
      uses: snok/install-poetry@v1.3.1
      with:
        version: 1.1.14
        virtualenvs-create: false
        installer-parallel: false
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ${{ github.repository }}
          ghcr.io/${{ github.repository }}
        labels: |
          org.opencontainers.image.source=https://github.com/sickchill/sickchill
          org.opencontainers.image.url=https://sickchill.github.io
          org.opencontainers.image.licenses=GPL-3.0+
        tags: |
          type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
          type=schedule
          type=ref,event=branch
          type=ref,event=tag
          type=ref,event=pr
          type=raw,prefix=,suffix=,value=${{ github.head_ref }},event=pr
          type=raw,prefix=,suffix=,value=${{ github.ref_name }},event=push,enable=${{ github.event_name != 'pull_request' }}
          type=edge,branch=develop
          type=semver,pattern={{version}},enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
          type=semver,pattern={{major}}.{{minor}},enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
    - name: Build and Push
      if: github.actor == 'miigotu'
      uses: docker/build-push-action@v3
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' && !env.ACT }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new
      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
    - name: Move cache
      if: always()
      run: |
        if [ -e /tmp/.buildx-cache-new ]; then rm -rf /tmp/.buildx-cache && mv /tmp/.buildx-cache-new /tmp/.buildx-cache; fi
