# coding=utf-8
r"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /
"""

from twilio.base import deserialize
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.page import Page


class SampleList(ListResource):
    """ PLEASE NOTE that this class contains preview products that are subject
    to change. Use them with caution. If you currently do not have developer
    preview access, please contact help@twilio.com. """

    def __init__(self, version, assistant_sid, task_sid):
        """
        Initialize the SampleList

        :param Version version: Version that contains the resource
        :param assistant_sid: The unique ID of the Assistant.
        :param task_sid: The unique ID of the Task associated with this Sample.

        :returns: twilio.rest.preview.understand.assistant.task.sample.SampleList
        :rtype: twilio.rest.preview.understand.assistant.task.sample.SampleList
        """
        super(SampleList, self).__init__(version)

        # Path Solution
        self._solution = {'assistant_sid': assistant_sid, 'task_sid': task_sid, }
        self._uri = '/Assistants/{assistant_sid}/Tasks/{task_sid}/Samples'.format(**self._solution)

    def stream(self, language=values.unset, limit=None, page_size=None):
        """
        Streams SampleInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.

        :param unicode language: An ISO language-country string of the sample.
        :param int limit: Upper limit for the number of records to return. stream()
                          guarantees to never return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, stream() will attempt to read the
                              limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.preview.understand.assistant.task.sample.SampleInstance]
        """
        limits = self._version.read_limits(limit, page_size)

        page = self.page(language=language, page_size=limits['page_size'], )

        return self._version.stream(page, limits['limit'])

    def list(self, language=values.unset, limit=None, page_size=None):
        """
        Lists SampleInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.

        :param unicode language: An ISO language-country string of the sample.
        :param int limit: Upper limit for the number of records to return. list() guarantees
                          never to return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, list() will attempt to read the limit
                              with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.preview.understand.assistant.task.sample.SampleInstance]
        """
        return list(self.stream(language=language, limit=limit, page_size=page_size, ))

    def page(self, language=values.unset, page_token=values.unset,
             page_number=values.unset, page_size=values.unset):
        """
        Retrieve a single page of SampleInstance records from the API.
        Request is executed immediately

        :param unicode language: An ISO language-country string of the sample.
        :param str page_token: PageToken provided by the API
        :param int page_number: Page Number, this value is simply for client state
        :param int page_size: Number of records to return, defaults to 50

        :returns: Page of SampleInstance
        :rtype: twilio.rest.preview.understand.assistant.task.sample.SamplePage
        """
        data = values.of({
            'Language': language,
            'PageToken': page_token,
            'Page': page_number,
            'PageSize': page_size,
        })

        response = self._version.page(method='GET', uri=self._uri, params=data, )

        return SamplePage(self._version, response, self._solution)

    def get_page(self, target_url):
        """
        Retrieve a specific page of SampleInstance records from the API.
        Request is executed immediately

        :param str target_url: API-generated URL for the requested results page

        :returns: Page of SampleInstance
        :rtype: twilio.rest.preview.understand.assistant.task.sample.SamplePage
        """
        response = self._version.domain.twilio.request(
            'GET',
            target_url,
        )

        return SamplePage(self._version, response, self._solution)

    def create(self, language, tagged_text, source_channel=values.unset):
        """
        Create the SampleInstance

        :param unicode language: An ISO language-country string of the sample.
        :param unicode tagged_text: The text example of how end-users may express this task. The sample may contain Field tag blocks.
        :param unicode source_channel: The communication channel the sample was captured. It can be: voice, sms, chat, alexa, google-assistant, or slack. If not included the value will be null

        :returns: The created SampleInstance
        :rtype: twilio.rest.preview.understand.assistant.task.sample.SampleInstance
        """
        data = values.of({'Language': language, 'TaggedText': tagged_text, 'SourceChannel': source_channel, })

        payload = self._version.create(method='POST', uri=self._uri, data=data, )

        return SampleInstance(
            self._version,
            payload,
            assistant_sid=self._solution['assistant_sid'],
            task_sid=self._solution['task_sid'],
        )

    def get(self, sid):
        """
        Constructs a SampleContext

        :param sid: A 34 character string that uniquely identifies this resource.

        :returns: twilio.rest.preview.understand.assistant.task.sample.SampleContext
        :rtype: twilio.rest.preview.understand.assistant.task.sample.SampleContext
        """
        return SampleContext(
            self._version,
            assistant_sid=self._solution['assistant_sid'],
            task_sid=self._solution['task_sid'],
            sid=sid,
        )

    def __call__(self, sid):
        """
        Constructs a SampleContext

        :param sid: A 34 character string that uniquely identifies this resource.

        :returns: twilio.rest.preview.understand.assistant.task.sample.SampleContext
        :rtype: twilio.rest.preview.understand.assistant.task.sample.SampleContext
        """
        return SampleContext(
            self._version,
            assistant_sid=self._solution['assistant_sid'],
            task_sid=self._solution['task_sid'],
            sid=sid,
        )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Preview.Understand.SampleList>'


class SamplePage(Page):
    """ PLEASE NOTE that this class contains preview products that are subject
    to change. Use them with caution. If you currently do not have developer
    preview access, please contact help@twilio.com. """

    def __init__(self, version, response, solution):
        """
        Initialize the SamplePage

        :param Version version: Version that contains the resource
        :param Response response: Response from the API
        :param assistant_sid: The unique ID of the Assistant.
        :param task_sid: The unique ID of the Task associated with this Sample.

        :returns: twilio.rest.preview.understand.assistant.task.sample.SamplePage
        :rtype: twilio.rest.preview.understand.assistant.task.sample.SamplePage
        """
        super(SamplePage, self).__init__(version, response)

        # Path Solution
        self._solution = solution

    def get_instance(self, payload):
        """
        Build an instance of SampleInstance

        :param dict payload: Payload response from the API

        :returns: twilio.rest.preview.understand.assistant.task.sample.SampleInstance
        :rtype: twilio.rest.preview.understand.assistant.task.sample.SampleInstance
        """
        return SampleInstance(
            self._version,
            payload,
            assistant_sid=self._solution['assistant_sid'],
            task_sid=self._solution['task_sid'],
        )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Preview.Understand.SamplePage>'


class SampleContext(InstanceContext):
    """ PLEASE NOTE that this class contains preview products that are subject
    to change. Use them with caution. If you currently do not have developer
    preview access, please contact help@twilio.com. """

    def __init__(self, version, assistant_sid, task_sid, sid):
        """
        Initialize the SampleContext

        :param Version version: Version that contains the resource
        :param assistant_sid: The unique ID of the Assistant.
        :param task_sid: The unique ID of the Task associated with this Sample.
        :param sid: A 34 character string that uniquely identifies this resource.

        :returns: twilio.rest.preview.understand.assistant.task.sample.SampleContext
        :rtype: twilio.rest.preview.understand.assistant.task.sample.SampleContext
        """
        super(SampleContext, self).__init__(version)

        # Path Solution
        self._solution = {'assistant_sid': assistant_sid, 'task_sid': task_sid, 'sid': sid, }
        self._uri = '/Assistants/{assistant_sid}/Tasks/{task_sid}/Samples/{sid}'.format(**self._solution)

    def fetch(self):
        """
        Fetch the SampleInstance

        :returns: The fetched SampleInstance
        :rtype: twilio.rest.preview.understand.assistant.task.sample.SampleInstance
        """
        payload = self._version.fetch(method='GET', uri=self._uri, )

        return SampleInstance(
            self._version,
            payload,
            assistant_sid=self._solution['assistant_sid'],
            task_sid=self._solution['task_sid'],
            sid=self._solution['sid'],
        )

    def update(self, language=values.unset, tagged_text=values.unset,
               source_channel=values.unset):
        """
        Update the SampleInstance

        :param unicode language: An ISO language-country string of the sample.
        :param unicode tagged_text: The text example of how end-users may express this task. The sample may contain Field tag blocks.
        :param unicode source_channel: The communication channel the sample was captured. It can be: voice, sms, chat, alexa, google-assistant, or slack. If not included the value will be null

        :returns: The updated SampleInstance
        :rtype: twilio.rest.preview.understand.assistant.task.sample.SampleInstance
        """
        data = values.of({'Language': language, 'TaggedText': tagged_text, 'SourceChannel': source_channel, })

        payload = self._version.update(method='POST', uri=self._uri, data=data, )

        return SampleInstance(
            self._version,
            payload,
            assistant_sid=self._solution['assistant_sid'],
            task_sid=self._solution['task_sid'],
            sid=self._solution['sid'],
        )

    def delete(self):
        """
        Deletes the SampleInstance

        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return self._version.delete(method='DELETE', uri=self._uri, )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Preview.Understand.SampleContext {}>'.format(context)


class SampleInstance(InstanceResource):
    """ PLEASE NOTE that this class contains preview products that are subject
    to change. Use them with caution. If you currently do not have developer
    preview access, please contact help@twilio.com. """

    def __init__(self, version, payload, assistant_sid, task_sid, sid=None):
        """
        Initialize the SampleInstance

        :returns: twilio.rest.preview.understand.assistant.task.sample.SampleInstance
        :rtype: twilio.rest.preview.understand.assistant.task.sample.SampleInstance
        """
        super(SampleInstance, self).__init__(version)

        # Marshaled Properties
        self._properties = {
            'account_sid': payload.get('account_sid'),
            'date_created': deserialize.iso8601_datetime(payload.get('date_created')),
            'date_updated': deserialize.iso8601_datetime(payload.get('date_updated')),
            'task_sid': payload.get('task_sid'),
            'language': payload.get('language'),
            'assistant_sid': payload.get('assistant_sid'),
            'sid': payload.get('sid'),
            'tagged_text': payload.get('tagged_text'),
            'url': payload.get('url'),
            'source_channel': payload.get('source_channel'),
        }

        # Context
        self._context = None
        self._solution = {
            'assistant_sid': assistant_sid,
            'task_sid': task_sid,
            'sid': sid or self._properties['sid'],
        }

    @property
    def _proxy(self):
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions.  All instance actions are proxied to the context

        :returns: SampleContext for this SampleInstance
        :rtype: twilio.rest.preview.understand.assistant.task.sample.SampleContext
        """
        if self._context is None:
            self._context = SampleContext(
                self._version,
                assistant_sid=self._solution['assistant_sid'],
                task_sid=self._solution['task_sid'],
                sid=self._solution['sid'],
            )
        return self._context

    @property
    def account_sid(self):
        """
        :returns: The unique ID of the Account that created this Sample.
        :rtype: unicode
        """
        return self._properties['account_sid']

    @property
    def date_created(self):
        """
        :returns: The date that this resource was created
        :rtype: datetime
        """
        return self._properties['date_created']

    @property
    def date_updated(self):
        """
        :returns: The date that this resource was last updated
        :rtype: datetime
        """
        return self._properties['date_updated']

    @property
    def task_sid(self):
        """
        :returns: The unique ID of the Task associated with this Sample.
        :rtype: unicode
        """
        return self._properties['task_sid']

    @property
    def language(self):
        """
        :returns: An ISO language-country string of the sample.
        :rtype: unicode
        """
        return self._properties['language']

    @property
    def assistant_sid(self):
        """
        :returns: The unique ID of the Assistant.
        :rtype: unicode
        """
        return self._properties['assistant_sid']

    @property
    def sid(self):
        """
        :returns: A 34 character string that uniquely identifies this resource.
        :rtype: unicode
        """
        return self._properties['sid']

    @property
    def tagged_text(self):
        """
        :returns: The text example of how end-users may express this task. The sample may contain Field tag blocks.
        :rtype: unicode
        """
        return self._properties['tagged_text']

    @property
    def url(self):
        """
        :returns: The url
        :rtype: unicode
        """
        return self._properties['url']

    @property
    def source_channel(self):
        """
        :returns: The communication channel the sample was captured. It can be: voice, sms, chat, alexa, google-assistant, or slack. If not included the value will be null
        :rtype: unicode
        """
        return self._properties['source_channel']

    def fetch(self):
        """
        Fetch the SampleInstance

        :returns: The fetched SampleInstance
        :rtype: twilio.rest.preview.understand.assistant.task.sample.SampleInstance
        """
        return self._proxy.fetch()

    def update(self, language=values.unset, tagged_text=values.unset,
               source_channel=values.unset):
        """
        Update the SampleInstance

        :param unicode language: An ISO language-country string of the sample.
        :param unicode tagged_text: The text example of how end-users may express this task. The sample may contain Field tag blocks.
        :param unicode source_channel: The communication channel the sample was captured. It can be: voice, sms, chat, alexa, google-assistant, or slack. If not included the value will be null

        :returns: The updated SampleInstance
        :rtype: twilio.rest.preview.understand.assistant.task.sample.SampleInstance
        """
        return self._proxy.update(language=language, tagged_text=tagged_text, source_channel=source_channel, )

    def delete(self):
        """
        Deletes the SampleInstance

        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return self._proxy.delete()

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Preview.Understand.SampleInstance {}>'.format(context)
