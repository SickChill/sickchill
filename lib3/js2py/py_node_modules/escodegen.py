from js2py.pyjs import *
# setting scope
var = Scope( JS_BUILTINS )
set_global_object(var)

# Code follows:
var.registers(['getFromGlobals', 'escodegen', '_typeof'])
@Js
def PyJsHoisted_getFromGlobals_(name, this, arguments, var=var):
    var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
    var.registers(['name'])
    if var.get('Object').get('prototype').callprop('hasOwnProperty', Js('_fake_exports')).neg():
        PyJsTempException = JsToPyException(var.get('Error')((Js('Could not find any value named ')+var.get('name'))))
        raise PyJsTempException
    if var.get('Object').get('prototype').get('_fake_exports').callprop('hasOwnProperty', var.get('name')):
        return var.get('Object').get('prototype').get('_fake_exports').get(var.get('name'))
    else:
        PyJsTempException = JsToPyException(var.get('Error')((Js('Could not find any value named ')+var.get('name'))))
        raise PyJsTempException
PyJsHoisted_getFromGlobals_.func_name = 'getFromGlobals'
var.put('getFromGlobals', PyJsHoisted_getFromGlobals_)
Js('use strict')
@Js
def PyJs_anonymous_0_(obj, this, arguments, var=var):
    var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
    var.registers(['obj'])
    return var.get('obj',throw=False).typeof()
PyJs_anonymous_0_._set_name('anonymous')
@Js
def PyJs_anonymous_1_(obj, this, arguments, var=var):
    var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
    var.registers(['obj'])
    return (Js('symbol') if (((var.get('obj') and PyJsStrictEq(var.get('Symbol',throw=False).typeof(),Js('function'))) and PyJsStrictEq(var.get('obj').get('constructor'),var.get('Symbol'))) and PyJsStrictNeq(var.get('obj'),var.get('Symbol').get('prototype'))) else var.get('obj',throw=False).typeof())
PyJs_anonymous_1_._set_name('anonymous')
var.put('_typeof', (PyJs_anonymous_0_ if (PyJsStrictEq(var.get('Symbol',throw=False).typeof(),Js('function')) and PyJsStrictEq(var.get('Symbol').get('iterator').typeof(),Js('symbol'))) else PyJs_anonymous_1_))
def PyJs_LONG_1235_(var=var):
    @Js
    def PyJs_anonymous_2_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'exports', 'module', 'addToGlobals', 'module_temp_love_python'])
        @Js
        def PyJsHoisted_addToGlobals_(name, obj, this, arguments, var=var):
            var = Scope({'name':name, 'obj':obj, 'this':this, 'arguments':arguments}, var)
            var.registers(['name', 'obj'])
            if var.get('Object').get('prototype').callprop('hasOwnProperty', Js('_fake_exports')).neg():
                var.get('Object').get('prototype').put('_fake_exports', Js({}))
            var.get('Object').get('prototype').get('_fake_exports').put(var.get('name'), var.get('obj'))
        PyJsHoisted_addToGlobals_.func_name = 'addToGlobals'
        var.put('addToGlobals', PyJsHoisted_addToGlobals_)
        pass
        pass
        pass
        pass
        var.get('require')(Js('babel-polyfill'))
        var.put('module_temp_love_python', var.get('require')(Js('escodegen')))
        var.get('addToGlobals')(Js('escodegen'), var.get('module_temp_love_python'))
    PyJs_anonymous_2_._set_name('anonymous')
    @Js
    def PyJs_anonymous_3_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_4_(process, __filename, this, arguments, var=var):
            var = Scope({'process':process, '__filename':__filename, 'this':this, 'arguments':arguments}, var)
            var.registers(['process', '__filename'])
            @Js
            def PyJs_anonymous_5_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['amdefine'])
                @Js
                def PyJsHoisted_amdefine_(module, requireFn, this, arguments, var=var):
                    var = Scope({'module':module, 'requireFn':requireFn, 'this':this, 'arguments':arguments}, var)
                    var.registers(['normalize', 'makeNormalize', 'defineCache', 'alreadyCalled', 'define', 'makeRequire', 'path', '_stringRequire', 'module', 'requireFn', 'loaderCache', 'trimDots', 'makeLoad', 'runFactory'])
                    @Js
                    def PyJsHoisted_trimDots_(ary, this, arguments, var=var):
                        var = Scope({'ary':ary, 'this':this, 'arguments':arguments}, var)
                        var.registers(['ary', 'i', 'part'])
                        pass
                        #for JS loop
                        var.put('i', Js(0.0))
                        while var.get('ary').get(var.get('i')):
                            try:
                                var.put('part', var.get('ary').get(var.get('i')))
                                if PyJsStrictEq(var.get('part'),Js('.')):
                                    var.get('ary').callprop('splice', var.get('i'), Js(1.0))
                                    var.put('i', Js(1.0), '-')
                                else:
                                    if PyJsStrictEq(var.get('part'),Js('..')):
                                        if (PyJsStrictEq(var.get('i'),Js(1.0)) and (PyJsStrictEq(var.get('ary').get('2'),Js('..')) or PyJsStrictEq(var.get('ary').get('0'),Js('..')))):
                                            break
                                        else:
                                            if (var.get('i')>Js(0.0)):
                                                var.get('ary').callprop('splice', (var.get('i')-Js(1.0)), Js(2.0))
                                                var.put('i', Js(2.0), '-')
                            finally:
                                    var.put('i', Js(1.0), '+')
                    PyJsHoisted_trimDots_.func_name = 'trimDots'
                    var.put('trimDots', PyJsHoisted_trimDots_)
                    @Js
                    def PyJsHoisted_normalize_(name, baseName, this, arguments, var=var):
                        var = Scope({'name':name, 'baseName':baseName, 'this':this, 'arguments':arguments}, var)
                        var.registers(['name', 'baseParts', 'baseName'])
                        pass
                        if (var.get('name') and PyJsStrictEq(var.get('name').callprop('charAt', Js(0.0)),Js('.'))):
                            if var.get('baseName'):
                                var.put('baseParts', var.get('baseName').callprop('split', Js('/')))
                                var.put('baseParts', var.get('baseParts').callprop('slice', Js(0.0), (var.get('baseParts').get('length')-Js(1.0))))
                                var.put('baseParts', var.get('baseParts').callprop('concat', var.get('name').callprop('split', Js('/'))))
                                var.get('trimDots')(var.get('baseParts'))
                                var.put('name', var.get('baseParts').callprop('join', Js('/')))
                        return var.get('name')
                    PyJsHoisted_normalize_.func_name = 'normalize'
                    var.put('normalize', PyJsHoisted_normalize_)
                    @Js
                    def PyJsHoisted_makeNormalize_(relName, this, arguments, var=var):
                        var = Scope({'relName':relName, 'this':this, 'arguments':arguments}, var)
                        var.registers(['relName'])
                        @Js
                        def PyJs_anonymous_6_(name, this, arguments, var=var):
                            var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
                            var.registers(['name'])
                            return var.get('normalize')(var.get('name'), var.get('relName'))
                        PyJs_anonymous_6_._set_name('anonymous')
                        return PyJs_anonymous_6_
                    PyJsHoisted_makeNormalize_.func_name = 'makeNormalize'
                    var.put('makeNormalize', PyJsHoisted_makeNormalize_)
                    @Js
                    def PyJsHoisted_makeLoad_(id, this, arguments, var=var):
                        var = Scope({'id':id, 'this':this, 'arguments':arguments}, var)
                        var.registers(['load', 'id'])
                        @Js
                        def PyJsHoisted_load_(value, this, arguments, var=var):
                            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                            var.registers(['value'])
                            var.get('loaderCache').put(var.get('id'), var.get('value'))
                        PyJsHoisted_load_.func_name = 'load'
                        var.put('load', PyJsHoisted_load_)
                        pass
                        @Js
                        def PyJs_anonymous_7_(id, text, this, arguments, var=var):
                            var = Scope({'id':id, 'text':text, 'this':this, 'arguments':arguments}, var)
                            var.registers(['text', 'id'])
                            PyJsTempException = JsToPyException(var.get('Error').create(Js('amdefine does not implement load.fromText')))
                            raise PyJsTempException
                        PyJs_anonymous_7_._set_name('anonymous')
                        var.get('load').put('fromText', PyJs_anonymous_7_)
                        return var.get('load')
                    PyJsHoisted_makeLoad_.func_name = 'makeLoad'
                    var.put('makeLoad', PyJsHoisted_makeLoad_)
                    @Js
                    def PyJsHoisted_runFactory_(id, deps, factory, this, arguments, var=var):
                        var = Scope({'id':id, 'deps':deps, 'factory':factory, 'this':this, 'arguments':arguments}, var)
                        var.registers(['factory', 'deps', 'r', 'result', 'id', 'm', 'e'])
                        pass
                        if var.get('id'):
                            var.put('e', var.get('loaderCache').put(var.get('id'), Js({})))
                            var.put('m', Js({'id':var.get('id'),'uri':var.get('__filename'),'exports':var.get('e')}))
                            var.put('r', var.get('makeRequire')(var.get('requireFn'), var.get('e'), var.get('m'), var.get('id')))
                        else:
                            if var.get('alreadyCalled'):
                                PyJsTempException = JsToPyException(var.get('Error').create(Js('amdefine with no module ID cannot be called more than once per file.')))
                                raise PyJsTempException
                            var.put('alreadyCalled', Js(True))
                            var.put('e', var.get('module').get('exports'))
                            var.put('m', var.get('module'))
                            var.put('r', var.get('makeRequire')(var.get('requireFn'), var.get('e'), var.get('m'), var.get('module').get('id')))
                        if var.get('deps'):
                            @Js
                            def PyJs_anonymous_13_(depName, this, arguments, var=var):
                                var = Scope({'depName':depName, 'this':this, 'arguments':arguments}, var)
                                var.registers(['depName'])
                                return var.get('r')(var.get('depName'))
                            PyJs_anonymous_13_._set_name('anonymous')
                            var.put('deps', var.get('deps').callprop('map', PyJs_anonymous_13_))
                        if PyJsStrictEq(var.get('factory',throw=False).typeof(),Js('function')):
                            var.put('result', var.get('factory').callprop('apply', var.get('m').get('exports'), var.get('deps')))
                        else:
                            var.put('result', var.get('factory'))
                        if PyJsStrictNeq(var.get('result'),var.get('undefined')):
                            var.get('m').put('exports', var.get('result'))
                            if var.get('id'):
                                var.get('loaderCache').put(var.get('id'), var.get('m').get('exports'))
                    PyJsHoisted_runFactory_.func_name = 'runFactory'
                    var.put('runFactory', PyJsHoisted_runFactory_)
                    @Js
                    def PyJsHoisted_define_(id, deps, factory, this, arguments, var=var):
                        var = Scope({'id':id, 'deps':deps, 'factory':factory, 'this':this, 'arguments':arguments}, var)
                        var.registers(['factory', 'deps', 'id'])
                        if var.get('Array').callprop('isArray', var.get('id')):
                            var.put('factory', var.get('deps'))
                            var.put('deps', var.get('id'))
                            var.put('id', var.get('undefined'))
                        else:
                            if PyJsStrictNeq(var.get('id',throw=False).typeof(),Js('string')):
                                var.put('factory', var.get('id'))
                                var.put('id', var.put('deps', var.get('undefined')))
                        if (var.get('deps') and var.get('Array').callprop('isArray', var.get('deps')).neg()):
                            var.put('factory', var.get('deps'))
                            var.put('deps', var.get('undefined'))
                        if var.get('deps').neg():
                            var.put('deps', Js([Js('require'), Js('exports'), Js('module')]))
                        if var.get('id'):
                            var.get('defineCache').put(var.get('id'), Js([var.get('id'), var.get('deps'), var.get('factory')]))
                        else:
                            var.get('runFactory')(var.get('id'), var.get('deps'), var.get('factory'))
                    PyJsHoisted_define_.func_name = 'define'
                    var.put('define', PyJsHoisted_define_)
                    Js('use strict')
                    var.put('defineCache', Js({}))
                    var.put('loaderCache', Js({}))
                    var.put('alreadyCalled', Js(False))
                    var.put('path', var.get('require')(Js('path')))
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_makeRequire_8_(systemRequire, exports, module, relId, this, arguments, var=var):
                        var = Scope({'systemRequire':systemRequire, 'exports':exports, 'module':module, 'relId':relId, 'this':this, 'arguments':arguments, 'makeRequire':PyJs_makeRequire_8_}, var)
                        var.registers(['systemRequire', 'exports', 'module', 'amdRequire', 'relId'])
                        @Js
                        def PyJsHoisted_amdRequire_(deps, callback, this, arguments, var=var):
                            var = Scope({'deps':deps, 'callback':callback, 'this':this, 'arguments':arguments}, var)
                            var.registers(['deps', 'callback'])
                            if PyJsStrictEq(var.get('deps',throw=False).typeof(),Js('string')):
                                return var.get('_stringRequire')(var.get('systemRequire'), var.get('exports'), var.get('module'), var.get('deps'), var.get('relId'))
                            else:
                                @Js
                                def PyJs_anonymous_9_(depName, this, arguments, var=var):
                                    var = Scope({'depName':depName, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['depName'])
                                    return var.get('_stringRequire')(var.get('systemRequire'), var.get('exports'), var.get('module'), var.get('depName'), var.get('relId'))
                                PyJs_anonymous_9_._set_name('anonymous')
                                var.put('deps', var.get('deps').callprop('map', PyJs_anonymous_9_))
                                if var.get('callback'):
                                    @Js
                                    def PyJs_anonymous_10_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get('callback').callprop('apply', var.get(u"null"), var.get('deps'))
                                    PyJs_anonymous_10_._set_name('anonymous')
                                    var.get('process').callprop('nextTick', PyJs_anonymous_10_)
                        PyJsHoisted_amdRequire_.func_name = 'amdRequire'
                        var.put('amdRequire', PyJsHoisted_amdRequire_)
                        pass
                        @Js
                        def PyJs_anonymous_11_(filePath, this, arguments, var=var):
                            var = Scope({'filePath':filePath, 'this':this, 'arguments':arguments}, var)
                            var.registers(['filePath'])
                            if PyJsStrictEq(var.get('filePath').callprop('indexOf', Js('.')),Js(0.0)):
                                return var.get('normalize')(var.get('filePath'), var.get('path').callprop('dirname', var.get('module').get('filename')))
                            else:
                                return var.get('filePath')
                        PyJs_anonymous_11_._set_name('anonymous')
                        var.get('amdRequire').put('toUrl', PyJs_anonymous_11_)
                        return var.get('amdRequire')
                    PyJs_makeRequire_8_._set_name('makeRequire')
                    var.put('makeRequire', PyJs_makeRequire_8_)
                    @Js
                    def PyJs_req_12_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'req':PyJs_req_12_}, var)
                        var.registers([])
                        return var.get('module').get('require').callprop('apply', var.get('module'), var.get('arguments'))
                    PyJs_req_12_._set_name('req')
                    var.put('requireFn', (var.get('requireFn') or PyJs_req_12_))
                    pass
                    @Js
                    def PyJs_stringRequire_14_(systemRequire, exports, module, id, relId, this, arguments, var=var):
                        var = Scope({'systemRequire':systemRequire, 'exports':exports, 'module':module, 'id':id, 'relId':relId, 'this':this, 'arguments':arguments, 'stringRequire':PyJs_stringRequire_14_}, var)
                        var.registers(['systemRequire', 'index', 'originalId', 'prefix', 'exports', 'module', 'id', 'relId', 'plugin'])
                        var.put('index', var.get('id').callprop('indexOf', Js('!')))
                        var.put('originalId', var.get('id'))
                        if PyJsStrictEq(var.get('index'),(-Js(1.0))):
                            var.put('id', var.get('normalize')(var.get('id'), var.get('relId')))
                            if PyJsStrictEq(var.get('id'),Js('require')):
                                return var.get('makeRequire')(var.get('systemRequire'), var.get('exports'), var.get('module'), var.get('relId'))
                            else:
                                if PyJsStrictEq(var.get('id'),Js('exports')):
                                    return var.get('exports')
                                else:
                                    if PyJsStrictEq(var.get('id'),Js('module')):
                                        return var.get('module')
                                    else:
                                        if var.get('loaderCache').callprop('hasOwnProperty', var.get('id')):
                                            return var.get('loaderCache').get(var.get('id'))
                                        else:
                                            if var.get('defineCache').get(var.get('id')):
                                                var.get('runFactory').callprop('apply', var.get(u"null"), var.get('defineCache').get(var.get('id')))
                                                return var.get('loaderCache').get(var.get('id'))
                                            else:
                                                if var.get('systemRequire'):
                                                    return var.get('systemRequire')(var.get('originalId'))
                                                else:
                                                    PyJsTempException = JsToPyException(var.get('Error').create((Js('No module with ID: ')+var.get('id'))))
                                                    raise PyJsTempException
                        else:
                            var.put('prefix', var.get('id').callprop('substring', Js(0.0), var.get('index')))
                            var.put('id', var.get('id').callprop('substring', (var.get('index')+Js(1.0)), var.get('id').get('length')))
                            var.put('plugin', var.get('_stringRequire')(var.get('systemRequire'), var.get('exports'), var.get('module'), var.get('prefix'), var.get('relId')))
                            if var.get('plugin').get('normalize'):
                                var.put('id', var.get('plugin').callprop('normalize', var.get('id'), var.get('makeNormalize')(var.get('relId'))))
                            else:
                                var.put('id', var.get('normalize')(var.get('id'), var.get('relId')))
                            if var.get('loaderCache').get(var.get('id')):
                                return var.get('loaderCache').get(var.get('id'))
                            else:
                                var.get('plugin').callprop('load', var.get('id'), var.get('makeRequire')(var.get('systemRequire'), var.get('exports'), var.get('module'), var.get('relId')), var.get('makeLoad')(var.get('id')), Js({}))
                                return var.get('loaderCache').get(var.get('id'))
                    PyJs_stringRequire_14_._set_name('stringRequire')
                    var.put('_stringRequire', PyJs_stringRequire_14_)
                    pass
                    @Js
                    def PyJs_anonymous_15_(id, this, arguments, var=var):
                        var = Scope({'id':id, 'this':this, 'arguments':arguments}, var)
                        var.registers(['id'])
                        if var.get('loaderCache').get(var.get('id')):
                            return var.get('loaderCache').get(var.get('id'))
                        if var.get('defineCache').get(var.get('id')):
                            var.get('runFactory').callprop('apply', var.get(u"null"), var.get('defineCache').get(var.get('id')))
                            return var.get('loaderCache').get(var.get('id'))
                    PyJs_anonymous_15_._set_name('anonymous')
                    var.get('define').put('require', PyJs_anonymous_15_)
                    var.get('define').put('amd', Js({}))
                    return var.get('define')
                PyJsHoisted_amdefine_.func_name = 'amdefine'
                var.put('amdefine', PyJsHoisted_amdefine_)
                Js('use strict')
                pass
                var.get('module').put('exports', var.get('amdefine'))
            PyJs_anonymous_5_._set_name('anonymous')
            PyJs_anonymous_5_.callprop('call', var.get(u"this"))
        PyJs_anonymous_4_._set_name('anonymous')
        PyJs_anonymous_4_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')), Js('/node_modules/amdefine/amdefine.js'))
    PyJs_anonymous_3_._set_name('anonymous')
    @Js
    def PyJs_anonymous_16_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_17_(PyJsArg_676c6f62616c_, this, arguments, var=var):
            var = Scope({'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['global'])
            @Js
            def PyJs_anonymous_18_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['DEFINE_PROPERTY', 'define'])
                @Js
                def PyJsHoisted_define_(O, key, value, this, arguments, var=var):
                    var = Scope({'O':O, 'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
                    var.registers(['O', 'value', 'key'])
                    (var.get('O').get(var.get('key')) or var.get('Object').callprop(var.get('DEFINE_PROPERTY'), var.get('O'), var.get('key'), Js({'writable':Js(True),'configurable':Js(True),'value':var.get('value')})))
                PyJsHoisted_define_.func_name = 'define'
                var.put('define', PyJsHoisted_define_)
                Js('use strict')
                var.get('require')(Js('core-js/shim'))
                var.get('require')(Js('regenerator-runtime/runtime'))
                var.get('require')(Js('core-js/fn/regexp/escape'))
                if var.get('global').get('_babelPolyfill'):
                    PyJsTempException = JsToPyException(var.get('Error').create(Js('only one instance of babel-polyfill is allowed')))
                    raise PyJsTempException
                var.get('global').put('_babelPolyfill', Js(True))
                var.put('DEFINE_PROPERTY', Js('defineProperty'))
                pass
                var.get('define')(var.get('String').get('prototype'), Js('padLeft'), Js('').get('padStart'))
                var.get('define')(var.get('String').get('prototype'), Js('padRight'), Js('').get('padEnd'))
                @Js
                def PyJs_anonymous_19_(key, this, arguments, var=var):
                    var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                    var.registers(['key'])
                    (Js([]).get(var.get('key')) and var.get('define')(var.get('Array'), var.get('key'), var.get('Function').get('call').callprop('bind', Js([]).get(var.get('key')))))
                PyJs_anonymous_19_._set_name('anonymous')
                Js('pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill').callprop('split', Js(',')).callprop('forEach', PyJs_anonymous_19_)
            PyJs_anonymous_18_._set_name('anonymous')
            PyJs_anonymous_18_.callprop('call', var.get(u"this"))
        PyJs_anonymous_17_._set_name('anonymous')
        PyJs_anonymous_17_.callprop('call', var.get(u"this"), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else Js({})))))
    PyJs_anonymous_16_._set_name('anonymous')
    @Js
    def PyJs_anonymous_20_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('require')(Js('../../modules/core.regexp.escape'))
        var.get('module').put('exports', var.get('require')(Js('../../modules/_core')).get('RegExp').get('escape'))
    PyJs_anonymous_20_._set_name('anonymous')
    @Js
    def PyJs_anonymous_21_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_22_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            if (var.get('it',throw=False).typeof()!=Js('function')):
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('it')+Js(' is not a function!'))))
                raise PyJsTempException
            return var.get('it')
        PyJs_anonymous_22_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_22_)
    PyJs_anonymous_21_._set_name('anonymous')
    @Js
    def PyJs_anonymous_23_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['cof', 'module', 'require', 'exports'])
        var.put('cof', var.get('require')(Js('./_cof')))
        @Js
        def PyJs_anonymous_24_(it, msg, this, arguments, var=var):
            var = Scope({'it':it, 'msg':msg, 'this':this, 'arguments':arguments}, var)
            var.registers(['it', 'msg'])
            if ((var.get('it',throw=False).typeof()!=Js('number')) and (var.get('cof')(var.get('it'))!=Js('Number'))):
                PyJsTempException = JsToPyException(var.get('TypeError')(var.get('msg')))
                raise PyJsTempException
            return (+var.get('it'))
        PyJs_anonymous_24_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_24_)
    PyJs_anonymous_23_._set_name('anonymous')
    @Js
    def PyJs_anonymous_25_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'UNSCOPABLES', 'ArrayProto', 'exports', 'module'])
        var.put('UNSCOPABLES', var.get('require')(Js('./_wks'))(Js('unscopables')))
        var.put('ArrayProto', var.get('Array').get('prototype'))
        if (var.get('ArrayProto').get(var.get('UNSCOPABLES'))==var.get('undefined')):
            var.get('require')(Js('./_hide'))(var.get('ArrayProto'), var.get('UNSCOPABLES'), Js({}))
        @Js
        def PyJs_anonymous_26_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
            var.registers(['key'])
            var.get('ArrayProto').get(var.get('UNSCOPABLES')).put(var.get('key'), Js(True))
        PyJs_anonymous_26_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_26_)
    PyJs_anonymous_25_._set_name('anonymous')
    @Js
    def PyJs_anonymous_27_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'at', 'exports'])
        Js('use strict')
        var.put('at', var.get('require')(Js('./_string-at'))(Js(True)))
        @Js
        def PyJs_anonymous_28_(S, index, unicode, this, arguments, var=var):
            var = Scope({'S':S, 'index':index, 'unicode':unicode, 'this':this, 'arguments':arguments}, var)
            var.registers(['index', 'unicode', 'S'])
            return (var.get('index')+(var.get('at')(var.get('S'), var.get('index')).get('length') if var.get('unicode') else Js(1.0)))
        PyJs_anonymous_28_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_28_)
    PyJs_anonymous_27_._set_name('anonymous')
    @Js
    def PyJs_anonymous_29_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_30_(it, Constructor, name, forbiddenField, this, arguments, var=var):
            var = Scope({'it':it, 'Constructor':Constructor, 'name':name, 'forbiddenField':forbiddenField, 'this':this, 'arguments':arguments}, var)
            var.registers(['it', 'Constructor', 'name', 'forbiddenField'])
            if (var.get('it').instanceof(var.get('Constructor')).neg() or (PyJsStrictNeq(var.get('forbiddenField'),var.get('undefined')) and var.get('it').contains(var.get('forbiddenField')))):
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('name')+Js(': incorrect invocation!'))))
                raise PyJsTempException
            return var.get('it')
        PyJs_anonymous_30_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_30_)
    PyJs_anonymous_29_._set_name('anonymous')
    @Js
    def PyJs_anonymous_31_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'isObject', 'module', 'exports'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        @Js
        def PyJs_anonymous_32_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            if var.get('isObject')(var.get('it')).neg():
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('it')+Js(' is not an object!'))))
                raise PyJsTempException
            return var.get('it')
        PyJs_anonymous_32_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_32_)
    PyJs_anonymous_31_._set_name('anonymous')
    @Js
    def PyJs_anonymous_33_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toLength', 'toAbsoluteIndex', 'toObject', 'exports', 'module'])
        Js('use strict')
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toAbsoluteIndex', var.get('require')(Js('./_to-absolute-index')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        @Js
        def PyJs_copyWithin_34_(target, start, this, arguments, var=var):
            var = Scope({'target':target, 'start':start, 'this':this, 'arguments':arguments, 'copyWithin':PyJs_copyWithin_34_}, var)
            var.registers(['target', 'end', 'start', 'O', 'from', 'to', 'inc', 'count', 'len'])
            var.put('O', var.get('toObject')(var.get(u"this")))
            var.put('len', var.get('toLength')(var.get('O').get('length')))
            var.put('to', var.get('toAbsoluteIndex')(var.get('target'), var.get('len')))
            var.put('from', var.get('toAbsoluteIndex')(var.get('start'), var.get('len')))
            var.put('end', (var.get('arguments').get('2') if (var.get('arguments').get('length')>Js(2.0)) else var.get('undefined')))
            var.put('count', var.get('Math').callprop('min', ((var.get('len') if PyJsStrictEq(var.get('end'),var.get('undefined')) else var.get('toAbsoluteIndex')(var.get('end'), var.get('len')))-var.get('from')), (var.get('len')-var.get('to'))))
            var.put('inc', Js(1.0))
            if ((var.get('from')<var.get('to')) and (var.get('to')<(var.get('from')+var.get('count')))):
                var.put('inc', (-Js(1.0)))
                var.put('from', (var.get('count')-Js(1.0)), '+')
                var.put('to', (var.get('count')-Js(1.0)), '+')
            while ((var.put('count',Js(var.get('count').to_number())-Js(1))+Js(1))>Js(0.0)):
                if var.get('O').contains(var.get('from')):
                    var.get('O').put(var.get('to'), var.get('O').get(var.get('from')))
                else:
                    var.get('O').delete(var.get('to'))
                var.put('to', var.get('inc'), '+')
                var.put('from', var.get('inc'), '+')
            return var.get('O')
        PyJs_copyWithin_34_._set_name('copyWithin')
        var.get('module').put('exports', (Js([]).get('copyWithin') or PyJs_copyWithin_34_))
    PyJs_anonymous_33_._set_name('anonymous')
    @Js
    def PyJs_anonymous_35_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toLength', 'toAbsoluteIndex', 'toObject', 'exports', 'module'])
        Js('use strict')
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toAbsoluteIndex', var.get('require')(Js('./_to-absolute-index')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        @Js
        def PyJs_fill_36_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments, 'fill':PyJs_fill_36_}, var)
            var.registers(['length', 'index', 'endPos', 'end', 'O', 'aLen', 'value'])
            var.put('O', var.get('toObject')(var.get(u"this")))
            var.put('length', var.get('toLength')(var.get('O').get('length')))
            var.put('aLen', var.get('arguments').get('length'))
            var.put('index', var.get('toAbsoluteIndex')((var.get('arguments').get('1') if (var.get('aLen')>Js(1.0)) else var.get('undefined')), var.get('length')))
            var.put('end', (var.get('arguments').get('2') if (var.get('aLen')>Js(2.0)) else var.get('undefined')))
            var.put('endPos', (var.get('length') if PyJsStrictEq(var.get('end'),var.get('undefined')) else var.get('toAbsoluteIndex')(var.get('end'), var.get('length'))))
            while (var.get('endPos')>var.get('index')):
                var.get('O').put((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1)), var.get('value'))
            return var.get('O')
        PyJs_fill_36_._set_name('fill')
        var.get('module').put('exports', PyJs_fill_36_)
    PyJs_anonymous_35_._set_name('anonymous')
    @Js
    def PyJs_anonymous_37_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['forOf', 'require', 'module', 'exports'])
        var.put('forOf', var.get('require')(Js('./_for-of')))
        @Js
        def PyJs_anonymous_38_(iter, ITERATOR, this, arguments, var=var):
            var = Scope({'iter':iter, 'ITERATOR':ITERATOR, 'this':this, 'arguments':arguments}, var)
            var.registers(['iter', 'result', 'ITERATOR'])
            var.put('result', Js([]))
            var.get('forOf')(var.get('iter'), Js(False), var.get('result').get('push'), var.get('result'), var.get('ITERATOR'))
            return var.get('result')
        PyJs_anonymous_38_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_38_)
    PyJs_anonymous_37_._set_name('anonymous')
    @Js
    def PyJs_anonymous_39_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toLength', 'toIObject', 'toAbsoluteIndex', 'exports', 'module'])
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('toAbsoluteIndex', var.get('require')(Js('./_to-absolute-index')))
        @Js
        def PyJs_anonymous_40_(IS_INCLUDES, this, arguments, var=var):
            var = Scope({'IS_INCLUDES':IS_INCLUDES, 'this':this, 'arguments':arguments}, var)
            var.registers(['IS_INCLUDES'])
            @Js
            def PyJs_anonymous_41_(PyJsArg_2474686973_, el, fromIndex, this, arguments, var=var):
                var = Scope({'$this':PyJsArg_2474686973_, 'el':el, 'fromIndex':fromIndex, 'this':this, 'arguments':arguments}, var)
                var.registers(['length', 'index', '$this', 'el', 'O', 'fromIndex', 'value'])
                var.put('O', var.get('toIObject')(var.get('$this')))
                var.put('length', var.get('toLength')(var.get('O').get('length')))
                var.put('index', var.get('toAbsoluteIndex')(var.get('fromIndex'), var.get('length')))
                pass
                if (var.get('IS_INCLUDES') and (var.get('el')!=var.get('el'))):
                    while (var.get('length')>var.get('index')):
                        var.put('value', var.get('O').get((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))))
                        if (var.get('value')!=var.get('value')):
                            return Js(True)
                else:
                    #for JS loop
                    
                    while (var.get('length')>var.get('index')):
                        try:
                            if (var.get('IS_INCLUDES') or var.get('O').contains(var.get('index'))):
                                if PyJsStrictEq(var.get('O').get(var.get('index')),var.get('el')):
                                    return ((var.get('IS_INCLUDES') or var.get('index')) or Js(0.0))
                        finally:
                                (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
                return (var.get('IS_INCLUDES').neg() and (-Js(1.0)))
            PyJs_anonymous_41_._set_name('anonymous')
            return PyJs_anonymous_41_
        PyJs_anonymous_40_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_40_)
    PyJs_anonymous_39_._set_name('anonymous')
    @Js
    def PyJs_anonymous_42_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toLength', 'toObject', 'asc', 'exports', 'module', 'IObject', 'ctx'])
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('IObject', var.get('require')(Js('./_iobject')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('asc', var.get('require')(Js('./_array-species-create')))
        @Js
        def PyJs_anonymous_43_(TYPE, PyJsArg_24637265617465_, this, arguments, var=var):
            var = Scope({'TYPE':TYPE, '$create':PyJsArg_24637265617465_, 'this':this, 'arguments':arguments}, var)
            var.registers(['IS_FIND_INDEX', 'IS_FILTER', 'TYPE', 'IS_MAP', 'NO_HOLES', '$create', 'IS_EVERY', 'create', 'IS_SOME'])
            var.put('IS_MAP', (var.get('TYPE')==Js(1.0)))
            var.put('IS_FILTER', (var.get('TYPE')==Js(2.0)))
            var.put('IS_SOME', (var.get('TYPE')==Js(3.0)))
            var.put('IS_EVERY', (var.get('TYPE')==Js(4.0)))
            var.put('IS_FIND_INDEX', (var.get('TYPE')==Js(6.0)))
            var.put('NO_HOLES', ((var.get('TYPE')==Js(5.0)) or var.get('IS_FIND_INDEX')))
            var.put('create', (var.get('$create') or var.get('asc')))
            @Js
            def PyJs_anonymous_44_(PyJsArg_2474686973_, callbackfn, that, this, arguments, var=var):
                var = Scope({'$this':PyJsArg_2474686973_, 'callbackfn':callbackfn, 'that':that, 'this':this, 'arguments':arguments}, var)
                var.registers(['f', 'length', 'index', 'val', '$this', 'that', 'O', 'result', 'callbackfn', 'self', 'res'])
                var.put('O', var.get('toObject')(var.get('$this')))
                var.put('self', var.get('IObject')(var.get('O')))
                var.put('f', var.get('ctx')(var.get('callbackfn'), var.get('that'), Js(3.0)))
                var.put('length', var.get('toLength')(var.get('self').get('length')))
                var.put('index', Js(0.0))
                var.put('result', (var.get('create')(var.get('$this'), var.get('length')) if var.get('IS_MAP') else (var.get('create')(var.get('$this'), Js(0.0)) if var.get('IS_FILTER') else var.get('undefined'))))
                pass
                #for JS loop
                
                while (var.get('length')>var.get('index')):
                    try:
                        if (var.get('NO_HOLES') or var.get('self').contains(var.get('index'))):
                            var.put('val', var.get('self').get(var.get('index')))
                            var.put('res', var.get('f')(var.get('val'), var.get('index'), var.get('O')))
                            if var.get('TYPE'):
                                if var.get('IS_MAP'):
                                    var.get('result').put(var.get('index'), var.get('res'))
                                else:
                                    if var.get('res'):
                                        while 1:
                                            SWITCHED = False
                                            CONDITION = (var.get('TYPE'))
                                            if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                                                SWITCHED = True
                                                return Js(True)
                                            if SWITCHED or PyJsStrictEq(CONDITION, Js(5.0)):
                                                SWITCHED = True
                                                return var.get('val')
                                            if SWITCHED or PyJsStrictEq(CONDITION, Js(6.0)):
                                                SWITCHED = True
                                                return var.get('index')
                                            if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                                                SWITCHED = True
                                                var.get('result').callprop('push', var.get('val'))
                                            SWITCHED = True
                                            break
                                    else:
                                        if var.get('IS_EVERY'):
                                            return Js(False)
                    finally:
                            (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
                return ((-Js(1.0)) if var.get('IS_FIND_INDEX') else (var.get('IS_EVERY') if (var.get('IS_SOME') or var.get('IS_EVERY')) else var.get('result')))
            PyJs_anonymous_44_._set_name('anonymous')
            return PyJs_anonymous_44_
        PyJs_anonymous_43_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_43_)
    PyJs_anonymous_42_._set_name('anonymous')
    @Js
    def PyJs_anonymous_45_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['aFunction', 'require', 'toLength', 'toObject', 'exports', 'module', 'IObject'])
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('IObject', var.get('require')(Js('./_iobject')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        @Js
        def PyJs_anonymous_46_(that, callbackfn, aLen, memo, isRight, this, arguments, var=var):
            var = Scope({'that':that, 'callbackfn':callbackfn, 'aLen':aLen, 'memo':memo, 'isRight':isRight, 'this':this, 'arguments':arguments}, var)
            var.registers(['length', 'index', 'i', 'that', 'memo', 'isRight', 'O', 'callbackfn', 'self', 'aLen'])
            var.get('aFunction')(var.get('callbackfn'))
            var.put('O', var.get('toObject')(var.get('that')))
            var.put('self', var.get('IObject')(var.get('O')))
            var.put('length', var.get('toLength')(var.get('O').get('length')))
            var.put('index', ((var.get('length')-Js(1.0)) if var.get('isRight') else Js(0.0)))
            var.put('i', ((-Js(1.0)) if var.get('isRight') else Js(1.0)))
            if (var.get('aLen')<Js(2.0)):
                #for JS loop
                
                while 1:
                    if var.get('self').contains(var.get('index')):
                        var.put('memo', var.get('self').get(var.get('index')))
                        var.put('index', var.get('i'), '+')
                        break
                    var.put('index', var.get('i'), '+')
                    if ((var.get('index')<Js(0.0)) if var.get('isRight') else (var.get('length')<=var.get('index'))):
                        PyJsTempException = JsToPyException(var.get('TypeError')(Js('Reduce of empty array with no initial value')))
                        raise PyJsTempException
                
            #for JS loop
            
            while ((var.get('index')>=Js(0.0)) if var.get('isRight') else (var.get('length')>var.get('index'))):
                try:
                    if var.get('self').contains(var.get('index')):
                        var.put('memo', var.get('callbackfn')(var.get('memo'), var.get('self').get(var.get('index')), var.get('index'), var.get('O')))
                finally:
                        var.put('index', var.get('i'), '+')
            return var.get('memo')
        PyJs_anonymous_46_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_46_)
    PyJs_anonymous_45_._set_name('anonymous')
    @Js
    def PyJs_anonymous_47_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'SPECIES', 'isArray', 'exports', 'module', 'isObject'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('isArray', var.get('require')(Js('./_is-array')))
        var.put('SPECIES', var.get('require')(Js('./_wks'))(Js('species')))
        @Js
        def PyJs_anonymous_48_(original, this, arguments, var=var):
            var = Scope({'original':original, 'this':this, 'arguments':arguments}, var)
            var.registers(['C', 'original'])
            pass
            if var.get('isArray')(var.get('original')):
                var.put('C', var.get('original').get('constructor'))
                if ((var.get('C',throw=False).typeof()==Js('function')) and (PyJsStrictEq(var.get('C'),var.get('Array')) or var.get('isArray')(var.get('C').get('prototype')))):
                    var.put('C', var.get('undefined'))
                if var.get('isObject')(var.get('C')):
                    var.put('C', var.get('C').get(var.get('SPECIES')))
                    if PyJsStrictEq(var.get('C'),var.get(u"null")):
                        var.put('C', var.get('undefined'))
            return (var.get('Array') if PyJsStrictEq(var.get('C'),var.get('undefined')) else var.get('C'))
        PyJs_anonymous_48_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_48_)
    PyJs_anonymous_47_._set_name('anonymous')
    @Js
    def PyJs_anonymous_49_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'speciesConstructor', 'module', 'exports'])
        var.put('speciesConstructor', var.get('require')(Js('./_array-species-constructor')))
        @Js
        def PyJs_anonymous_50_(original, length, this, arguments, var=var):
            var = Scope({'original':original, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['length', 'original'])
            return var.get('speciesConstructor')(var.get('original')).create(var.get('length'))
        PyJs_anonymous_50_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_50_)
    PyJs_anonymous_49_._set_name('anonymous')
    @Js
    def PyJs_anonymous_51_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['aFunction', 'require', 'arraySlice', 'invoke', 'construct', 'exports', 'module', 'factories', 'isObject'])
        Js('use strict')
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('invoke', var.get('require')(Js('./_invoke')))
        var.put('arraySlice', Js([]).get('slice'))
        var.put('factories', Js({}))
        @Js
        def PyJs_construct_52_(F, len, args, this, arguments, var=var):
            var = Scope({'F':F, 'len':len, 'args':args, 'this':this, 'arguments':arguments, 'construct':PyJs_construct_52_}, var)
            var.registers(['F', 'n', 'args', 'i', 'len'])
            if var.get('factories').contains(var.get('len')).neg():
                #for JS loop
                var.put('n', Js([]))
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('len')):
                    try:
                        var.get('n').put(var.get('i'), ((Js('a[')+var.get('i'))+Js(']')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.get('factories').put(var.get('len'), var.get('Function')(Js('F,a'), ((Js('return new F(')+var.get('n').callprop('join', Js(',')))+Js(')'))))
            return var.get('factories').callprop(var.get('len'), var.get('F'), var.get('args'))
        PyJs_construct_52_._set_name('construct')
        var.put('construct', PyJs_construct_52_)
        @Js
        def PyJs_bind_53_(that, this, arguments, var=var):
            var = Scope({'that':that, 'this':this, 'arguments':arguments, 'bind':PyJs_bind_53_}, var)
            var.registers(['bound', 'fn', 'that', 'partArgs'])
            var.put('fn', var.get('aFunction')(var.get(u"this")))
            var.put('partArgs', var.get('arraySlice').callprop('call', var.get('arguments'), Js(1.0)))
            @Js
            def PyJs_bound_54_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'bound':PyJs_bound_54_}, var)
                var.registers(['args'])
                var.put('args', var.get('partArgs').callprop('concat', var.get('arraySlice').callprop('call', var.get('arguments'))))
                return (var.get('construct')(var.get('fn'), var.get('args').get('length'), var.get('args')) if var.get(u"this").instanceof(var.get('bound')) else var.get('invoke')(var.get('fn'), var.get('args'), var.get('that')))
            PyJs_bound_54_._set_name('bound')
            var.put('bound', PyJs_bound_54_)
            if var.get('isObject')(var.get('fn').get('prototype')):
                var.get('bound').put('prototype', var.get('fn').get('prototype'))
            return var.get('bound')
        PyJs_bind_53_._set_name('bind')
        var.get('module').put('exports', (var.get('Function').get('bind') or PyJs_bind_53_))
    PyJs_anonymous_51_._set_name('anonymous')
    @Js
    def PyJs_anonymous_55_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'ARG', 'TAG', 'exports', 'cof', 'module', 'tryGet'])
        var.put('cof', var.get('require')(Js('./_cof')))
        var.put('TAG', var.get('require')(Js('./_wks'))(Js('toStringTag')))
        @Js
        def PyJs_anonymous_56_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('arguments')
        PyJs_anonymous_56_._set_name('anonymous')
        var.put('ARG', (var.get('cof')(PyJs_anonymous_56_())==Js('Arguments')))
        @Js
        def PyJs_tryGet_57_(it, key, this, arguments, var=var):
            var = Scope({'it':it, 'key':key, 'this':this, 'arguments':arguments, 'tryGet':PyJs_tryGet_57_}, var)
            var.registers(['it', 'key'])
            try:
                return var.get('it').get(var.get('key'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_24646187 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    pass
                finally:
                    if PyJsHolder_65_24646187 is not None:
                        var.own['e'] = PyJsHolder_65_24646187
                    else:
                        del var.own['e']
                    del PyJsHolder_65_24646187
        PyJs_tryGet_57_._set_name('tryGet')
        var.put('tryGet', PyJs_tryGet_57_)
        @Js
        def PyJs_anonymous_58_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it', 'O', 'B', 'T'])
            pass
            def PyJs_LONG_59_(var=var):
                return (Js('Null') if PyJsStrictEq(var.get('it'),var.get(u"null")) else (var.get('T') if (var.put('T', var.get('tryGet')(var.put('O', var.get('Object')(var.get('it'))), var.get('TAG'))).typeof()==Js('string')) else (var.get('cof')(var.get('O')) if var.get('ARG') else (Js('Arguments') if ((var.put('B', var.get('cof')(var.get('O')))==Js('Object')) and (var.get('O').get('callee').typeof()==Js('function'))) else var.get('B')))))
            return (Js('Undefined') if PyJsStrictEq(var.get('it'),var.get('undefined')) else PyJs_LONG_59_())
        PyJs_anonymous_58_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_58_)
    PyJs_anonymous_55_._set_name('anonymous')
    @Js
    def PyJs_anonymous_60_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'exports', 'module', 'toString'])
        var.put('toString', Js({}).get('toString'))
        @Js
        def PyJs_anonymous_61_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return var.get('toString').callprop('call', var.get('it')).callprop('slice', Js(8.0), (-Js(1.0)))
        PyJs_anonymous_61_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_61_)
    PyJs_anonymous_60_._set_name('anonymous')
    @Js
    def PyJs_anonymous_62_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'redefineAll', 'anInstance', 'DESCRIPTORS', 'SIZE', '$iterDefine', 'getEntry', 'module', 'exports', 'setSpecies', 'step', 'validate', 'create', 'forOf', 'ctx', 'fastKey', 'dP'])
        Js('use strict')
        var.put('dP', var.get('require')(Js('./_object-dp')).get('f'))
        var.put('create', var.get('require')(Js('./_object-create')))
        var.put('redefineAll', var.get('require')(Js('./_redefine-all')))
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('anInstance', var.get('require')(Js('./_an-instance')))
        var.put('forOf', var.get('require')(Js('./_for-of')))
        var.put('$iterDefine', var.get('require')(Js('./_iter-define')))
        var.put('step', var.get('require')(Js('./_iter-step')))
        var.put('setSpecies', var.get('require')(Js('./_set-species')))
        var.put('DESCRIPTORS', var.get('require')(Js('./_descriptors')))
        var.put('fastKey', var.get('require')(Js('./_meta')).get('fastKey'))
        var.put('validate', var.get('require')(Js('./_validate-collection')))
        var.put('SIZE', (Js('_s') if var.get('DESCRIPTORS') else Js('size')))
        @Js
        def PyJs_getEntry_63_(that, key, this, arguments, var=var):
            var = Scope({'that':that, 'key':key, 'this':this, 'arguments':arguments, 'getEntry':PyJs_getEntry_63_}, var)
            var.registers(['index', 'entry', 'that', 'key'])
            var.put('index', var.get('fastKey')(var.get('key')))
            pass
            if PyJsStrictNeq(var.get('index'),Js('F')):
                return var.get('that').get('_i').get(var.get('index'))
            #for JS loop
            var.put('entry', var.get('that').get('_f'))
            while var.get('entry'):
                try:
                    if (var.get('entry').get('k')==var.get('key')):
                        return var.get('entry')
                finally:
                        var.put('entry', var.get('entry').get('n'))
        PyJs_getEntry_63_._set_name('getEntry')
        var.put('getEntry', PyJs_getEntry_63_)
        @Js
        def PyJs_getConstructor_64_(wrapper, NAME, IS_MAP, ADDER, this, arguments, var=var):
            var = Scope({'wrapper':wrapper, 'NAME':NAME, 'IS_MAP':IS_MAP, 'ADDER':ADDER, 'this':this, 'arguments':arguments, 'getConstructor':PyJs_getConstructor_64_}, var)
            var.registers(['C', 'ADDER', 'wrapper', 'NAME', 'IS_MAP'])
            @Js
            def PyJs_anonymous_65_(that, iterable, this, arguments, var=var):
                var = Scope({'that':that, 'iterable':iterable, 'this':this, 'arguments':arguments}, var)
                var.registers(['iterable', 'that'])
                var.get('anInstance')(var.get('that'), var.get('C'), var.get('NAME'), Js('_i'))
                var.get('that').put('_t', var.get('NAME'))
                var.get('that').put('_i', var.get('create')(var.get(u"null")))
                var.get('that').put('_f', var.get('undefined'))
                var.get('that').put('_l', var.get('undefined'))
                var.get('that').put(var.get('SIZE'), Js(0.0))
                if (var.get('iterable')!=var.get('undefined')):
                    var.get('forOf')(var.get('iterable'), var.get('IS_MAP'), var.get('that').get(var.get('ADDER')), var.get('that'))
            PyJs_anonymous_65_._set_name('anonymous')
            var.put('C', var.get('wrapper')(PyJs_anonymous_65_))
            @Js
            def PyJs_clear_66_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'clear':PyJs_clear_66_}, var)
                var.registers(['entry', 'that', 'data'])
                #for JS loop
                var.put('that', var.get('validate')(var.get(u"this"), var.get('NAME')))
                var.put('data', var.get('that').get('_i'))
                var.put('entry', var.get('that').get('_f'))
                while var.get('entry'):
                    try:
                        var.get('entry').put('r', Js(True))
                        if var.get('entry').get('p'):
                            var.get('entry').put('p', var.get('entry').get('p').put('n', var.get('undefined')))
                        var.get('data').delete(var.get('entry').get('i'))
                    finally:
                            var.put('entry', var.get('entry').get('n'))
                var.get('that').put('_f', var.get('that').put('_l', var.get('undefined')))
                var.get('that').put(var.get('SIZE'), Js(0.0))
            PyJs_clear_66_._set_name('clear')
            @Js
            def PyJs__delete_67_(key, this, arguments, var=var):
                var = Scope({'key':key, 'this':this, 'arguments':arguments, '_delete':PyJs__delete_67_}, var)
                var.registers(['next', 'that', 'prev', 'entry', 'key'])
                var.put('that', var.get('validate')(var.get(u"this"), var.get('NAME')))
                var.put('entry', var.get('getEntry')(var.get('that'), var.get('key')))
                if var.get('entry'):
                    var.put('next', var.get('entry').get('n'))
                    var.put('prev', var.get('entry').get('p'))
                    var.get('that').get('_i').delete(var.get('entry').get('i'))
                    var.get('entry').put('r', Js(True))
                    if var.get('prev'):
                        var.get('prev').put('n', var.get('next'))
                    if var.get('next'):
                        var.get('next').put('p', var.get('prev'))
                    if (var.get('that').get('_f')==var.get('entry')):
                        var.get('that').put('_f', var.get('next'))
                    if (var.get('that').get('_l')==var.get('entry')):
                        var.get('that').put('_l', var.get('prev'))
                    (var.get('that').put(var.get('SIZE'),Js(var.get('that').get(var.get('SIZE')).to_number())-Js(1))+Js(1))
                return var.get('entry').neg().neg()
            PyJs__delete_67_._set_name('_delete')
            @Js
            def PyJs_forEach_68_(callbackfn, this, arguments, var=var):
                var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'forEach':PyJs_forEach_68_}, var)
                var.registers(['entry', 'callbackfn', 'f'])
                var.get('validate')(var.get(u"this"), var.get('NAME'))
                var.put('f', var.get('ctx')(var.get('callbackfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')), Js(3.0)))
                pass
                while var.put('entry', (var.get('entry').get('n') if var.get('entry') else var.get(u"this").get('_f'))):
                    var.get('f')(var.get('entry').get('v'), var.get('entry').get('k'), var.get(u"this"))
                    while (var.get('entry') and var.get('entry').get('r')):
                        var.put('entry', var.get('entry').get('p'))
            PyJs_forEach_68_._set_name('forEach')
            @Js
            def PyJs_has_69_(key, this, arguments, var=var):
                var = Scope({'key':key, 'this':this, 'arguments':arguments, 'has':PyJs_has_69_}, var)
                var.registers(['key'])
                return var.get('getEntry')(var.get('validate')(var.get(u"this"), var.get('NAME')), var.get('key')).neg().neg()
            PyJs_has_69_._set_name('has')
            var.get('redefineAll')(var.get('C').get('prototype'), Js({'clear':PyJs_clear_66_,'delete':PyJs__delete_67_,'forEach':PyJs_forEach_68_,'has':PyJs_has_69_}))
            if var.get('DESCRIPTORS'):
                @Js
                def PyJs_get_70_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_70_}, var)
                    var.registers([])
                    return var.get('validate')(var.get(u"this"), var.get('NAME')).get(var.get('SIZE'))
                PyJs_get_70_._set_name('get')
                var.get('dP')(var.get('C').get('prototype'), Js('size'), Js({'get':PyJs_get_70_}))
            return var.get('C')
        PyJs_getConstructor_64_._set_name('getConstructor')
        @Js
        def PyJs_InlineNonPyName_71_(that, key, value, this, arguments, var=var):
            var = Scope({'that':that, 'key':key, 'value':value, 'this':this, 'arguments':arguments, 'def':PyJs_InlineNonPyName_71_}, var)
            var.registers(['index', 'that', 'prev', 'entry', 'value', 'key'])
            var.put('entry', var.get('getEntry')(var.get('that'), var.get('key')))
            pass
            if var.get('entry'):
                var.get('entry').put('v', var.get('value'))
            else:
                var.get('that').put('_l', var.put('entry', Js({'i':var.put('index', var.get('fastKey')(var.get('key'), Js(True))),'k':var.get('key'),'v':var.get('value'),'p':var.put('prev', var.get('that').get('_l')),'n':var.get('undefined'),'r':Js(False)})))
                if var.get('that').get('_f').neg():
                    var.get('that').put('_f', var.get('entry'))
                if var.get('prev'):
                    var.get('prev').put('n', var.get('entry'))
                (var.get('that').put(var.get('SIZE'),Js(var.get('that').get(var.get('SIZE')).to_number())+Js(1))-Js(1))
                if PyJsStrictNeq(var.get('index'),Js('F')):
                    var.get('that').get('_i').put(var.get('index'), var.get('entry'))
            return var.get('that')
        PyJs_InlineNonPyName_71_._set_name('def')
        @Js
        def PyJs_setStrong_72_(C, NAME, IS_MAP, this, arguments, var=var):
            var = Scope({'C':C, 'NAME':NAME, 'IS_MAP':IS_MAP, 'this':this, 'arguments':arguments, 'setStrong':PyJs_setStrong_72_}, var)
            var.registers(['NAME', 'C', 'IS_MAP'])
            @Js
            def PyJs_anonymous_73_(iterated, kind, this, arguments, var=var):
                var = Scope({'iterated':iterated, 'kind':kind, 'this':this, 'arguments':arguments}, var)
                var.registers(['iterated', 'kind'])
                var.get(u"this").put('_t', var.get('validate')(var.get('iterated'), var.get('NAME')))
                var.get(u"this").put('_k', var.get('kind'))
                var.get(u"this").put('_l', var.get('undefined'))
            PyJs_anonymous_73_._set_name('anonymous')
            @Js
            def PyJs_anonymous_74_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['entry', 'that', 'kind'])
                var.put('that', var.get(u"this"))
                var.put('kind', var.get('that').get('_k'))
                var.put('entry', var.get('that').get('_l'))
                while (var.get('entry') and var.get('entry').get('r')):
                    var.put('entry', var.get('entry').get('p'))
                if (var.get('that').get('_t').neg() or var.get('that').put('_l', var.put('entry', (var.get('entry').get('n') if var.get('entry') else var.get('that').get('_t').get('_f')))).neg()):
                    var.get('that').put('_t', var.get('undefined'))
                    return var.get('step')(Js(1.0))
                if (var.get('kind')==Js('keys')):
                    return var.get('step')(Js(0.0), var.get('entry').get('k'))
                if (var.get('kind')==Js('values')):
                    return var.get('step')(Js(0.0), var.get('entry').get('v'))
                return var.get('step')(Js(0.0), Js([var.get('entry').get('k'), var.get('entry').get('v')]))
            PyJs_anonymous_74_._set_name('anonymous')
            var.get('$iterDefine')(var.get('C'), var.get('NAME'), PyJs_anonymous_73_, PyJs_anonymous_74_, (Js('entries') if var.get('IS_MAP') else Js('values')), var.get('IS_MAP').neg(), Js(True))
            var.get('setSpecies')(var.get('NAME'))
        PyJs_setStrong_72_._set_name('setStrong')
        var.get('module').put('exports', Js({'getConstructor':PyJs_getConstructor_64_,'def':PyJs_InlineNonPyName_71_,'getEntry':var.get('getEntry'),'setStrong':PyJs_setStrong_72_}))
    PyJs_anonymous_62_._set_name('anonymous')
    @Js
    def PyJs_anonymous_75_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'classof', 'exports', 'module', 'from'])
        var.put('classof', var.get('require')(Js('./_classof')))
        var.put('from', var.get('require')(Js('./_array-from-iterable')))
        @Js
        def PyJs_anonymous_76_(NAME, this, arguments, var=var):
            var = Scope({'NAME':NAME, 'this':this, 'arguments':arguments}, var)
            var.registers(['NAME'])
            @Js
            def PyJs_toJSON_77_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'toJSON':PyJs_toJSON_77_}, var)
                var.registers([])
                if (var.get('classof')(var.get(u"this"))!=var.get('NAME')):
                    PyJsTempException = JsToPyException(var.get('TypeError')((var.get('NAME')+Js("#toJSON isn't generic"))))
                    raise PyJsTempException
                return var.get('from')(var.get(u"this"))
            PyJs_toJSON_77_._set_name('toJSON')
            return PyJs_toJSON_77_
        PyJs_anonymous_76_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_76_)
    PyJs_anonymous_75_._set_name('anonymous')
    @Js
    def PyJs_anonymous_78_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['getWeak', 'arrayFindIndex', 'require', 'UncaughtFrozenStore', 'redefineAll', 'anInstance', 'arrayFind', 'uncaughtFrozenStore', 'exports', 'createArrayMethod', 'module', 'id', 'validate', '$has', 'forOf', 'isObject', 'findUncaughtFrozen', 'anObject'])
        Js('use strict')
        var.put('redefineAll', var.get('require')(Js('./_redefine-all')))
        var.put('getWeak', var.get('require')(Js('./_meta')).get('getWeak'))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('anInstance', var.get('require')(Js('./_an-instance')))
        var.put('forOf', var.get('require')(Js('./_for-of')))
        var.put('createArrayMethod', var.get('require')(Js('./_array-methods')))
        var.put('$has', var.get('require')(Js('./_has')))
        var.put('validate', var.get('require')(Js('./_validate-collection')))
        var.put('arrayFind', var.get('createArrayMethod')(Js(5.0)))
        var.put('arrayFindIndex', var.get('createArrayMethod')(Js(6.0)))
        var.put('id', Js(0.0))
        @Js
        def PyJs_uncaughtFrozenStore_79_(that, this, arguments, var=var):
            var = Scope({'that':that, 'this':this, 'arguments':arguments, 'uncaughtFrozenStore':PyJs_uncaughtFrozenStore_79_}, var)
            var.registers(['that'])
            return (var.get('that').get('_l') or var.get('that').put('_l', var.get('UncaughtFrozenStore').create()))
        PyJs_uncaughtFrozenStore_79_._set_name('uncaughtFrozenStore')
        var.put('uncaughtFrozenStore', PyJs_uncaughtFrozenStore_79_)
        @Js
        def PyJs_UncaughtFrozenStore_80_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'UncaughtFrozenStore':PyJs_UncaughtFrozenStore_80_}, var)
            var.registers([])
            var.get(u"this").put('a', Js([]))
        PyJs_UncaughtFrozenStore_80_._set_name('UncaughtFrozenStore')
        var.put('UncaughtFrozenStore', PyJs_UncaughtFrozenStore_80_)
        @Js
        def PyJs_findUncaughtFrozen_81_(store, key, this, arguments, var=var):
            var = Scope({'store':store, 'key':key, 'this':this, 'arguments':arguments, 'findUncaughtFrozen':PyJs_findUncaughtFrozen_81_}, var)
            var.registers(['store', 'key'])
            @Js
            def PyJs_anonymous_82_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
                var.registers(['it'])
                return PyJsStrictEq(var.get('it').get('0'),var.get('key'))
            PyJs_anonymous_82_._set_name('anonymous')
            return var.get('arrayFind')(var.get('store').get('a'), PyJs_anonymous_82_)
        PyJs_findUncaughtFrozen_81_._set_name('findUncaughtFrozen')
        var.put('findUncaughtFrozen', PyJs_findUncaughtFrozen_81_)
        @Js
        def PyJs_get_83_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments, 'get':PyJs_get_83_}, var)
            var.registers(['entry', 'key'])
            var.put('entry', var.get('findUncaughtFrozen')(var.get(u"this"), var.get('key')))
            if var.get('entry'):
                return var.get('entry').get('1')
        PyJs_get_83_._set_name('get')
        @Js
        def PyJs_has_84_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments, 'has':PyJs_has_84_}, var)
            var.registers(['key'])
            return var.get('findUncaughtFrozen')(var.get(u"this"), var.get('key')).neg().neg()
        PyJs_has_84_._set_name('has')
        @Js
        def PyJs_set_85_(key, value, this, arguments, var=var):
            var = Scope({'key':key, 'value':value, 'this':this, 'arguments':arguments, 'set':PyJs_set_85_}, var)
            var.registers(['entry', 'value', 'key'])
            var.put('entry', var.get('findUncaughtFrozen')(var.get(u"this"), var.get('key')))
            if var.get('entry'):
                var.get('entry').put('1', var.get('value'))
            else:
                var.get(u"this").get('a').callprop('push', Js([var.get('key'), var.get('value')]))
        PyJs_set_85_._set_name('set')
        @Js
        def PyJs__delete_86_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments, '_delete':PyJs__delete_86_}, var)
            var.registers(['index', 'key'])
            @Js
            def PyJs_anonymous_87_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
                var.registers(['it'])
                return PyJsStrictEq(var.get('it').get('0'),var.get('key'))
            PyJs_anonymous_87_._set_name('anonymous')
            var.put('index', var.get('arrayFindIndex')(var.get(u"this").get('a'), PyJs_anonymous_87_))
            if (~var.get('index')):
                var.get(u"this").get('a').callprop('splice', var.get('index'), Js(1.0))
            return (~var.get('index')).neg().neg()
        PyJs__delete_86_._set_name('_delete')
        var.get('UncaughtFrozenStore').put('prototype', Js({'get':PyJs_get_83_,'has':PyJs_has_84_,'set':PyJs_set_85_,'delete':PyJs__delete_86_}))
        @Js
        def PyJs_getConstructor_88_(wrapper, NAME, IS_MAP, ADDER, this, arguments, var=var):
            var = Scope({'wrapper':wrapper, 'NAME':NAME, 'IS_MAP':IS_MAP, 'ADDER':ADDER, 'this':this, 'arguments':arguments, 'getConstructor':PyJs_getConstructor_88_}, var)
            var.registers(['C', 'ADDER', 'wrapper', 'NAME', 'IS_MAP'])
            @Js
            def PyJs_anonymous_89_(that, iterable, this, arguments, var=var):
                var = Scope({'that':that, 'iterable':iterable, 'this':this, 'arguments':arguments}, var)
                var.registers(['iterable', 'that'])
                var.get('anInstance')(var.get('that'), var.get('C'), var.get('NAME'), Js('_i'))
                var.get('that').put('_t', var.get('NAME'))
                var.get('that').put('_i', (var.put('id',Js(var.get('id').to_number())+Js(1))-Js(1)))
                var.get('that').put('_l', var.get('undefined'))
                if (var.get('iterable')!=var.get('undefined')):
                    var.get('forOf')(var.get('iterable'), var.get('IS_MAP'), var.get('that').get(var.get('ADDER')), var.get('that'))
            PyJs_anonymous_89_._set_name('anonymous')
            var.put('C', var.get('wrapper')(PyJs_anonymous_89_))
            @Js
            def PyJs__delete_90_(key, this, arguments, var=var):
                var = Scope({'key':key, 'this':this, 'arguments':arguments, '_delete':PyJs__delete_90_}, var)
                var.registers(['data', 'key'])
                if var.get('isObject')(var.get('key')).neg():
                    return Js(False)
                var.put('data', var.get('getWeak')(var.get('key')))
                if PyJsStrictEq(var.get('data'),Js(True)):
                    return var.get('uncaughtFrozenStore')(var.get('validate')(var.get(u"this"), var.get('NAME'))).callprop('delete', var.get('key'))
                return ((var.get('data') and var.get('$has')(var.get('data'), var.get(u"this").get('_i'))) and var.get('data').delete(var.get(u"this").get('_i')))
            PyJs__delete_90_._set_name('_delete')
            @Js
            def PyJs_has_91_(key, this, arguments, var=var):
                var = Scope({'key':key, 'this':this, 'arguments':arguments, 'has':PyJs_has_91_}, var)
                var.registers(['data', 'key'])
                if var.get('isObject')(var.get('key')).neg():
                    return Js(False)
                var.put('data', var.get('getWeak')(var.get('key')))
                if PyJsStrictEq(var.get('data'),Js(True)):
                    return var.get('uncaughtFrozenStore')(var.get('validate')(var.get(u"this"), var.get('NAME'))).callprop('has', var.get('key'))
                return (var.get('data') and var.get('$has')(var.get('data'), var.get(u"this").get('_i')))
            PyJs_has_91_._set_name('has')
            var.get('redefineAll')(var.get('C').get('prototype'), Js({'delete':PyJs__delete_90_,'has':PyJs_has_91_}))
            return var.get('C')
        PyJs_getConstructor_88_._set_name('getConstructor')
        @Js
        def PyJs_InlineNonPyName_92_(that, key, value, this, arguments, var=var):
            var = Scope({'that':that, 'key':key, 'value':value, 'this':this, 'arguments':arguments, 'def':PyJs_InlineNonPyName_92_}, var)
            var.registers(['value', 'data', 'key', 'that'])
            var.put('data', var.get('getWeak')(var.get('anObject')(var.get('key')), Js(True)))
            if PyJsStrictEq(var.get('data'),Js(True)):
                var.get('uncaughtFrozenStore')(var.get('that')).callprop('set', var.get('key'), var.get('value'))
            else:
                var.get('data').put(var.get('that').get('_i'), var.get('value'))
            return var.get('that')
        PyJs_InlineNonPyName_92_._set_name('def')
        var.get('module').put('exports', Js({'getConstructor':PyJs_getConstructor_88_,'def':PyJs_InlineNonPyName_92_,'ufstore':var.get('uncaughtFrozenStore')}))
    PyJs_anonymous_78_._set_name('anonymous')
    @Js
    def PyJs_anonymous_93_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'setToStringTag', 'redefineAll', 'anInstance', 'inheritIfRequired', 'redefine', 'meta', '$export', 'exports', 'module', 'forOf', 'fails', 'global', 'isObject', '$iterDetect'])
        Js('use strict')
        var.put('global', var.get('require')(Js('./_global')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('redefine', var.get('require')(Js('./_redefine')))
        var.put('redefineAll', var.get('require')(Js('./_redefine-all')))
        var.put('meta', var.get('require')(Js('./_meta')))
        var.put('forOf', var.get('require')(Js('./_for-of')))
        var.put('anInstance', var.get('require')(Js('./_an-instance')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('$iterDetect', var.get('require')(Js('./_iter-detect')))
        var.put('setToStringTag', var.get('require')(Js('./_set-to-string-tag')))
        var.put('inheritIfRequired', var.get('require')(Js('./_inherit-if-required')))
        @Js
        def PyJs_anonymous_94_(NAME, wrapper, methods, common, IS_MAP, IS_WEAK, this, arguments, var=var):
            var = Scope({'NAME':NAME, 'wrapper':wrapper, 'methods':methods, 'common':common, 'IS_MAP':IS_MAP, 'IS_WEAK':IS_WEAK, 'this':this, 'arguments':arguments}, var)
            var.registers(['ACCEPT_ITERABLES', 'C', 'THROWS_ON_PRIMITIVES', 'fixMethod', 'proto', 'methods', 'IS_WEAK', 'O', 'Base', 'ADDER', 'BUGGY_ZERO', 'wrapper', 'NAME', 'HASNT_CHAINING', 'IS_MAP', 'instance', 'common'])
            var.put('Base', var.get('global').get(var.get('NAME')))
            var.put('C', var.get('Base'))
            var.put('ADDER', (Js('set') if var.get('IS_MAP') else Js('add')))
            var.put('proto', (var.get('C') and var.get('C').get('prototype')))
            var.put('O', Js({}))
            @Js
            def PyJs_fixMethod_95_(KEY, this, arguments, var=var):
                var = Scope({'KEY':KEY, 'this':this, 'arguments':arguments, 'fixMethod':PyJs_fixMethod_95_}, var)
                var.registers(['fn', 'KEY'])
                var.put('fn', var.get('proto').get(var.get('KEY')))
                @Js
                def PyJs_anonymous_96_(a, this, arguments, var=var):
                    var = Scope({'a':a, 'this':this, 'arguments':arguments}, var)
                    var.registers(['a'])
                    return (Js(False) if (var.get('IS_WEAK') and var.get('isObject')(var.get('a')).neg()) else var.get('fn').callprop('call', var.get(u"this"), (Js(0.0) if PyJsStrictEq(var.get('a'),Js(0.0)) else var.get('a'))))
                PyJs_anonymous_96_._set_name('anonymous')
                @Js
                def PyJs_has_97_(a, this, arguments, var=var):
                    var = Scope({'a':a, 'this':this, 'arguments':arguments, 'has':PyJs_has_97_}, var)
                    var.registers(['a'])
                    return (Js(False) if (var.get('IS_WEAK') and var.get('isObject')(var.get('a')).neg()) else var.get('fn').callprop('call', var.get(u"this"), (Js(0.0) if PyJsStrictEq(var.get('a'),Js(0.0)) else var.get('a'))))
                PyJs_has_97_._set_name('has')
                @Js
                def PyJs_get_98_(a, this, arguments, var=var):
                    var = Scope({'a':a, 'this':this, 'arguments':arguments, 'get':PyJs_get_98_}, var)
                    var.registers(['a'])
                    return (var.get('undefined') if (var.get('IS_WEAK') and var.get('isObject')(var.get('a')).neg()) else var.get('fn').callprop('call', var.get(u"this"), (Js(0.0) if PyJsStrictEq(var.get('a'),Js(0.0)) else var.get('a'))))
                PyJs_get_98_._set_name('get')
                @Js
                def PyJs_add_99_(a, this, arguments, var=var):
                    var = Scope({'a':a, 'this':this, 'arguments':arguments, 'add':PyJs_add_99_}, var)
                    var.registers(['a'])
                    var.get('fn').callprop('call', var.get(u"this"), (Js(0.0) if PyJsStrictEq(var.get('a'),Js(0.0)) else var.get('a')))
                    return var.get(u"this")
                PyJs_add_99_._set_name('add')
                @Js
                def PyJs_set_100_(a, b, this, arguments, var=var):
                    var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments, 'set':PyJs_set_100_}, var)
                    var.registers(['a', 'b'])
                    var.get('fn').callprop('call', var.get(u"this"), (Js(0.0) if PyJsStrictEq(var.get('a'),Js(0.0)) else var.get('a')), var.get('b'))
                    return var.get(u"this")
                PyJs_set_100_._set_name('set')
                var.get('redefine')(var.get('proto'), var.get('KEY'), (PyJs_anonymous_96_ if (var.get('KEY')==Js('delete')) else (PyJs_has_97_ if (var.get('KEY')==Js('has')) else (PyJs_get_98_ if (var.get('KEY')==Js('get')) else (PyJs_add_99_ if (var.get('KEY')==Js('add')) else PyJs_set_100_)))))
            PyJs_fixMethod_95_._set_name('fixMethod')
            var.put('fixMethod', PyJs_fixMethod_95_)
            @Js
            def PyJs_anonymous_101_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('C').create().callprop('entries').callprop('next')
            PyJs_anonymous_101_._set_name('anonymous')
            if ((var.get('C',throw=False).typeof()!=Js('function')) or (var.get('IS_WEAK') or (var.get('proto').get('forEach') and var.get('fails')(PyJs_anonymous_101_).neg())).neg()):
                var.put('C', var.get('common').callprop('getConstructor', var.get('wrapper'), var.get('NAME'), var.get('IS_MAP'), var.get('ADDER')))
                var.get('redefineAll')(var.get('C').get('prototype'), var.get('methods'))
                var.get('meta').put('NEED', Js(True))
            else:
                var.put('instance', var.get('C').create())
                var.put('HASNT_CHAINING', (var.get('instance').callprop(var.get('ADDER'), (Js({}) if var.get('IS_WEAK') else (-Js(0.0))), Js(1.0))!=var.get('instance')))
                @Js
                def PyJs_anonymous_102_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get('instance').callprop('has', Js(1.0))
                PyJs_anonymous_102_._set_name('anonymous')
                var.put('THROWS_ON_PRIMITIVES', var.get('fails')(PyJs_anonymous_102_))
                @Js
                def PyJs_anonymous_103_(iter, this, arguments, var=var):
                    var = Scope({'iter':iter, 'this':this, 'arguments':arguments}, var)
                    var.registers(['iter'])
                    var.get('C').create(var.get('iter'))
                PyJs_anonymous_103_._set_name('anonymous')
                var.put('ACCEPT_ITERABLES', var.get('$iterDetect')(PyJs_anonymous_103_))
                @Js
                def PyJs_anonymous_104_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['index', '$instance'])
                    var.put('$instance', var.get('C').create())
                    var.put('index', Js(5.0))
                    while (var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1)):
                        var.get('$instance').callprop(var.get('ADDER'), var.get('index'), var.get('index'))
                    return var.get('$instance').callprop('has', (-Js(0.0))).neg()
                PyJs_anonymous_104_._set_name('anonymous')
                var.put('BUGGY_ZERO', (var.get('IS_WEAK').neg() and var.get('fails')(PyJs_anonymous_104_)))
                if var.get('ACCEPT_ITERABLES').neg():
                    @Js
                    def PyJs_anonymous_105_(target, iterable, this, arguments, var=var):
                        var = Scope({'target':target, 'iterable':iterable, 'this':this, 'arguments':arguments}, var)
                        var.registers(['target', 'iterable', 'that'])
                        var.get('anInstance')(var.get('target'), var.get('C'), var.get('NAME'))
                        var.put('that', var.get('inheritIfRequired')(var.get('Base').create(), var.get('target'), var.get('C')))
                        if (var.get('iterable')!=var.get('undefined')):
                            var.get('forOf')(var.get('iterable'), var.get('IS_MAP'), var.get('that').get(var.get('ADDER')), var.get('that'))
                        return var.get('that')
                    PyJs_anonymous_105_._set_name('anonymous')
                    var.put('C', var.get('wrapper')(PyJs_anonymous_105_))
                    var.get('C').put('prototype', var.get('proto'))
                    var.get('proto').put('constructor', var.get('C'))
                if (var.get('THROWS_ON_PRIMITIVES') or var.get('BUGGY_ZERO')):
                    var.get('fixMethod')(Js('delete'))
                    var.get('fixMethod')(Js('has'))
                    (var.get('IS_MAP') and var.get('fixMethod')(Js('get')))
                if (var.get('BUGGY_ZERO') or var.get('HASNT_CHAINING')):
                    var.get('fixMethod')(var.get('ADDER'))
                if (var.get('IS_WEAK') and var.get('proto').get('clear')):
                    var.get('proto').delete('clear')
            var.get('setToStringTag')(var.get('C'), var.get('NAME'))
            var.get('O').put(var.get('NAME'), var.get('C'))
            var.get('$export')(((var.get('$export').get('G')+var.get('$export').get('W'))+(var.get('$export').get('F')*(var.get('C')!=var.get('Base')))), var.get('O'))
            if var.get('IS_WEAK').neg():
                var.get('common').callprop('setStrong', var.get('C'), var.get('NAME'), var.get('IS_MAP'))
            return var.get('C')
        PyJs_anonymous_94_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_94_)
    PyJs_anonymous_93_._set_name('anonymous')
    @Js
    def PyJs_anonymous_106_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['core', 'module', 'require', 'exports'])
        var.put('core', var.get('module').put('exports', Js({'version':Js('2.6.12')})))
        if (var.get('__e',throw=False).typeof()==Js('number')):
            var.put('__e', var.get('core'))
    PyJs_anonymous_106_._set_name('anonymous')
    @Js
    def PyJs_anonymous_107_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$defineProperty', 'exports', 'module', 'createDesc'])
        Js('use strict')
        var.put('$defineProperty', var.get('require')(Js('./_object-dp')))
        var.put('createDesc', var.get('require')(Js('./_property-desc')))
        @Js
        def PyJs_anonymous_108_(object, index, value, this, arguments, var=var):
            var = Scope({'object':object, 'index':index, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['index', 'value', 'object'])
            if var.get('object').contains(var.get('index')):
                var.get('$defineProperty').callprop('f', var.get('object'), var.get('index'), var.get('createDesc')(Js(0.0), var.get('value')))
            else:
                var.get('object').put(var.get('index'), var.get('value'))
        PyJs_anonymous_108_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_108_)
    PyJs_anonymous_107_._set_name('anonymous')
    @Js
    def PyJs_anonymous_109_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['aFunction', 'require', 'module', 'exports'])
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        @Js
        def PyJs_anonymous_110_(fn, that, length, this, arguments, var=var):
            var = Scope({'fn':fn, 'that':that, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['length', 'fn', 'that'])
            var.get('aFunction')(var.get('fn'))
            if PyJsStrictEq(var.get('that'),var.get('undefined')):
                return var.get('fn')
            while 1:
                SWITCHED = False
                CONDITION = (var.get('length'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                    SWITCHED = True
                    @Js
                    def PyJs_anonymous_111_(a, this, arguments, var=var):
                        var = Scope({'a':a, 'this':this, 'arguments':arguments}, var)
                        var.registers(['a'])
                        return var.get('fn').callprop('call', var.get('that'), var.get('a'))
                    PyJs_anonymous_111_._set_name('anonymous')
                    return PyJs_anonymous_111_
                if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                    SWITCHED = True
                    @Js
                    def PyJs_anonymous_112_(a, b, this, arguments, var=var):
                        var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments}, var)
                        var.registers(['a', 'b'])
                        return var.get('fn').callprop('call', var.get('that'), var.get('a'), var.get('b'))
                    PyJs_anonymous_112_._set_name('anonymous')
                    return PyJs_anonymous_112_
                if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                    SWITCHED = True
                    @Js
                    def PyJs_anonymous_113_(a, b, c, this, arguments, var=var):
                        var = Scope({'a':a, 'b':b, 'c':c, 'this':this, 'arguments':arguments}, var)
                        var.registers(['c', 'a', 'b'])
                        return var.get('fn').callprop('call', var.get('that'), var.get('a'), var.get('b'), var.get('c'))
                    PyJs_anonymous_113_._set_name('anonymous')
                    return PyJs_anonymous_113_
                SWITCHED = True
                break
            @Js
            def PyJs_anonymous_114_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return var.get('fn').callprop('apply', var.get('that'), var.get('arguments'))
            PyJs_anonymous_114_._set_name('anonymous')
            return PyJs_anonymous_114_
        PyJs_anonymous_110_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_110_)
    PyJs_anonymous_109_._set_name('anonymous')
    @Js
    def PyJs_anonymous_115_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$toISOString', 'exports', 'lz', 'module', 'getTime', 'fails'])
        Js('use strict')
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('getTime', var.get('Date').get('prototype').get('getTime'))
        var.put('$toISOString', var.get('Date').get('prototype').get('toISOString'))
        @Js
        def PyJs_lz_116_(num, this, arguments, var=var):
            var = Scope({'num':num, 'this':this, 'arguments':arguments, 'lz':PyJs_lz_116_}, var)
            var.registers(['num'])
            return (var.get('num') if (var.get('num')>Js(9.0)) else (Js('0')+var.get('num')))
        PyJs_lz_116_._set_name('lz')
        var.put('lz', PyJs_lz_116_)
        @Js
        def PyJs_toISOString_117_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'toISOString':PyJs_toISOString_117_}, var)
            var.registers(['s', 'm', 'd', 'y'])
            if var.get('isFinite')(var.get('getTime').callprop('call', var.get(u"this"))).neg():
                PyJsTempException = JsToPyException(var.get('RangeError')(Js('Invalid time value')))
                raise PyJsTempException
            var.put('d', var.get(u"this"))
            var.put('y', var.get('d').callprop('getUTCFullYear'))
            var.put('m', var.get('d').callprop('getUTCMilliseconds'))
            var.put('s', (Js('-') if (var.get('y')<Js(0.0)) else (Js('+') if (var.get('y')>Js(9999.0)) else Js(''))))
            def PyJs_LONG_118_(var=var):
                return (((((((((var.get('s')+(Js('00000')+var.get('Math').callprop('abs', var.get('y'))).callprop('slice', ((-Js(6.0)) if var.get('s') else (-Js(4.0)))))+Js('-'))+var.get('lz')((var.get('d').callprop('getUTCMonth')+Js(1.0))))+Js('-'))+var.get('lz')(var.get('d').callprop('getUTCDate')))+Js('T'))+var.get('lz')(var.get('d').callprop('getUTCHours')))+Js(':'))+var.get('lz')(var.get('d').callprop('getUTCMinutes')))
            return (((((PyJs_LONG_118_()+Js(':'))+var.get('lz')(var.get('d').callprop('getUTCSeconds')))+Js('.'))+(var.get('m') if (var.get('m')>Js(99.0)) else (Js('0')+var.get('lz')(var.get('m')))))+Js('Z'))
        PyJs_toISOString_117_._set_name('toISOString')
        @Js
        def PyJs_anonymous_119_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return (var.get('$toISOString').callprop('call', var.get('Date').create(((-Js(50000000000000.0))-Js(1.0))))!=Js('0385-07-25T07:06:39.999Z'))
        PyJs_anonymous_119_._set_name('anonymous')
        @Js
        def PyJs_anonymous_120_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('$toISOString').callprop('call', var.get('Date').create(var.get('NaN')))
        PyJs_anonymous_120_._set_name('anonymous')
        var.get('module').put('exports', (PyJs_toISOString_117_ if (var.get('fails')(PyJs_anonymous_119_) or var.get('fails')(PyJs_anonymous_120_).neg()) else var.get('$toISOString')))
    PyJs_anonymous_115_._set_name('anonymous')
    @Js
    def PyJs_anonymous_121_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toPrimitive', 'NUMBER', 'exports', 'module', 'anObject'])
        Js('use strict')
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
        var.put('NUMBER', Js('number'))
        @Js
        def PyJs_anonymous_122_(hint, this, arguments, var=var):
            var = Scope({'hint':hint, 'this':this, 'arguments':arguments}, var)
            var.registers(['hint'])
            if ((PyJsStrictNeq(var.get('hint'),Js('string')) and PyJsStrictNeq(var.get('hint'),var.get('NUMBER'))) and PyJsStrictNeq(var.get('hint'),Js('default'))):
                PyJsTempException = JsToPyException(var.get('TypeError')(Js('Incorrect hint')))
                raise PyJsTempException
            return var.get('toPrimitive')(var.get('anObject')(var.get(u"this")), (var.get('hint')!=var.get('NUMBER')))
        PyJs_anonymous_122_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_122_)
    PyJs_anonymous_121_._set_name('anonymous')
    @Js
    def PyJs_anonymous_123_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_124_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            if (var.get('it')==var.get('undefined')):
                PyJsTempException = JsToPyException(var.get('TypeError')((Js("Can't call method on  ")+var.get('it'))))
                raise PyJsTempException
            return var.get('it')
        PyJs_anonymous_124_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_124_)
    PyJs_anonymous_123_._set_name('anonymous')
    @Js
    def PyJs_anonymous_125_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_126_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_get_127_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_127_}, var)
                var.registers([])
                return Js(7.0)
            PyJs_get_127_._set_name('get')
            return (var.get('Object').callprop('defineProperty', Js({}), Js('a'), Js({'get':PyJs_get_127_})).get('a')!=Js(7.0))
        PyJs_anonymous_126_._set_name('anonymous')
        var.get('module').put('exports', var.get('require')(Js('./_fails'))(PyJs_anonymous_126_).neg())
    PyJs_anonymous_125_._set_name('anonymous')
    @Js
    def PyJs_anonymous_128_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['document', 'require', 'is', 'exports', 'module', 'isObject'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('document', var.get('require')(Js('./_global')).get('document'))
        var.put('is', (var.get('isObject')(var.get('document')) and var.get('isObject')(var.get('document').get('createElement'))))
        @Js
        def PyJs_anonymous_129_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return (var.get('document').callprop('createElement', var.get('it')) if var.get('is') else Js({}))
        PyJs_anonymous_129_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_129_)
    PyJs_anonymous_128_._set_name('anonymous')
    @Js
    def PyJs_anonymous_130_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('module').put('exports', Js('constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf').callprop('split', Js(',')))
    PyJs_anonymous_130_._set_name('anonymous')
    @Js
    def PyJs_anonymous_131_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'getKeys', 'pIE', 'gOPS', 'exports', 'module'])
        var.put('getKeys', var.get('require')(Js('./_object-keys')))
        var.put('gOPS', var.get('require')(Js('./_object-gops')))
        var.put('pIE', var.get('require')(Js('./_object-pie')))
        @Js
        def PyJs_anonymous_132_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it', 'symbols', 'i', 'result', 'getSymbols', 'isEnum', 'key'])
            var.put('result', var.get('getKeys')(var.get('it')))
            var.put('getSymbols', var.get('gOPS').get('f'))
            if var.get('getSymbols'):
                var.put('symbols', var.get('getSymbols')(var.get('it')))
                var.put('isEnum', var.get('pIE').get('f'))
                var.put('i', Js(0.0))
                pass
                while (var.get('symbols').get('length')>var.get('i')):
                    if var.get('isEnum').callprop('call', var.get('it'), var.put('key', var.get('symbols').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))):
                        var.get('result').callprop('push', var.get('key'))
            return var.get('result')
        PyJs_anonymous_132_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_132_)
    PyJs_anonymous_131_._set_name('anonymous')
    @Js
    def PyJs_anonymous_133_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['core', 'PROTOTYPE', 'hide', 'require', 'redefine', '$export', 'exports', 'module', 'ctx', 'global'])
        var.put('global', var.get('require')(Js('./_global')))
        var.put('core', var.get('require')(Js('./_core')))
        var.put('hide', var.get('require')(Js('./_hide')))
        var.put('redefine', var.get('require')(Js('./_redefine')))
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('PROTOTYPE', Js('prototype'))
        @Js
        def PyJs_InlineNonPyName_134_(type, name, source, this, arguments, var=var):
            var = Scope({'type':type, 'name':name, 'source':source, 'this':this, 'arguments':arguments, '$export':PyJs_InlineNonPyName_134_}, var)
            var.registers(['expProto', 'target', 'IS_BIND', 'IS_STATIC', 'type', 'source', 'exports', 'IS_PROTO', 'out', 'name', 'key', 'IS_FORCED', 'own', 'exp', 'IS_GLOBAL'])
            var.put('IS_FORCED', (var.get('type')&var.get('$export').get('F')))
            var.put('IS_GLOBAL', (var.get('type')&var.get('$export').get('G')))
            var.put('IS_STATIC', (var.get('type')&var.get('$export').get('S')))
            var.put('IS_PROTO', (var.get('type')&var.get('$export').get('P')))
            var.put('IS_BIND', (var.get('type')&var.get('$export').get('B')))
            var.put('target', (var.get('global') if var.get('IS_GLOBAL') else ((var.get('global').get(var.get('name')) or var.get('global').put(var.get('name'), Js({}))) if var.get('IS_STATIC') else (var.get('global').get(var.get('name')) or Js({})).get(var.get('PROTOTYPE')))))
            var.put('exports', (var.get('core') if var.get('IS_GLOBAL') else (var.get('core').get(var.get('name')) or var.get('core').put(var.get('name'), Js({})))))
            var.put('expProto', (var.get('exports').get(var.get('PROTOTYPE')) or var.get('exports').put(var.get('PROTOTYPE'), Js({}))))
            pass
            if var.get('IS_GLOBAL'):
                var.put('source', var.get('name'))
            for PyJsTemp in var.get('source'):
                var.put('key', PyJsTemp)
                var.put('own', ((var.get('IS_FORCED').neg() and var.get('target')) and PyJsStrictNeq(var.get('target').get(var.get('key')),var.get('undefined'))))
                var.put('out', (var.get('target') if var.get('own') else var.get('source')).get(var.get('key')))
                var.put('exp', (var.get('ctx')(var.get('out'), var.get('global')) if (var.get('IS_BIND') and var.get('own')) else (var.get('ctx')(var.get('Function').get('call'), var.get('out')) if (var.get('IS_PROTO') and (var.get('out',throw=False).typeof()==Js('function'))) else var.get('out'))))
                if var.get('target'):
                    var.get('redefine')(var.get('target'), var.get('key'), var.get('out'), (var.get('type')&var.get('$export').get('U')))
                if (var.get('exports').get(var.get('key'))!=var.get('out')):
                    var.get('hide')(var.get('exports'), var.get('key'), var.get('exp'))
                if (var.get('IS_PROTO') and (var.get('expProto').get(var.get('key'))!=var.get('out'))):
                    var.get('expProto').put(var.get('key'), var.get('out'))
        PyJs_InlineNonPyName_134_._set_name('$export')
        var.put('$export', PyJs_InlineNonPyName_134_)
        var.get('global').put('core', var.get('core'))
        var.get('$export').put('F', Js(1.0))
        var.get('$export').put('G', Js(2.0))
        var.get('$export').put('S', Js(4.0))
        var.get('$export').put('P', Js(8.0))
        var.get('$export').put('B', Js(16.0))
        var.get('$export').put('W', Js(32.0))
        var.get('$export').put('U', Js(64.0))
        var.get('$export').put('R', Js(128.0))
        var.get('module').put('exports', var.get('$export'))
    PyJs_anonymous_133_._set_name('anonymous')
    @Js
    def PyJs_anonymous_135_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'MATCH', 'module', 'exports'])
        var.put('MATCH', var.get('require')(Js('./_wks'))(Js('match')))
        @Js
        def PyJs_anonymous_136_(KEY, this, arguments, var=var):
            var = Scope({'KEY':KEY, 'this':this, 'arguments':arguments}, var)
            var.registers(['re', 'KEY'])
            var.put('re', JsRegExp('/./'))
            try:
                Js('/./').callprop(var.get('KEY'), var.get('re'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_17166511 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    try:
                        var.get('re').put(var.get('MATCH'), Js(False))
                        return Js('/./').callprop(var.get('KEY'), var.get('re')).neg()
                    except PyJsException as PyJsTempException:
                        PyJsHolder_66_65605100 = var.own.get('f')
                        var.force_own_put('f', PyExceptionToJs(PyJsTempException))
                        try:
                            pass
                        finally:
                            if PyJsHolder_66_65605100 is not None:
                                var.own['f'] = PyJsHolder_66_65605100
                            else:
                                del var.own['f']
                            del PyJsHolder_66_65605100
                finally:
                    if PyJsHolder_65_17166511 is not None:
                        var.own['e'] = PyJsHolder_65_17166511
                    else:
                        del var.own['e']
                    del PyJsHolder_65_17166511
            return Js(True)
        PyJs_anonymous_136_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_136_)
    PyJs_anonymous_135_._set_name('anonymous')
    @Js
    def PyJs_anonymous_137_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_138_(exec, this, arguments, var=var):
            var = Scope({'exec':exec, 'this':this, 'arguments':arguments}, var)
            var.registers(['exec'])
            try:
                return var.get('exec')().neg().neg()
            except PyJsException as PyJsTempException:
                PyJsHolder_65_54265328 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    return Js(True)
                finally:
                    if PyJsHolder_65_54265328 is not None:
                        var.own['e'] = PyJsHolder_65_54265328
                    else:
                        del var.own['e']
                    del PyJsHolder_65_54265328
        PyJs_anonymous_138_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_138_)
    PyJs_anonymous_137_._set_name('anonymous')
    @Js
    def PyJs_anonymous_139_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'defined', 'hide', 'wks', 'SPECIES', 'redefine', 'REPLACE_SUPPORTS_NAMED_GROUPS', 'exports', 'module', 'SPLIT_WORKS_WITH_OVERWRITTEN_EXEC', 'fails', 'regexpExec'])
        Js('use strict')
        var.get('require')(Js('./es6.regexp.exec'))
        var.put('redefine', var.get('require')(Js('./_redefine')))
        var.put('hide', var.get('require')(Js('./_hide')))
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('defined', var.get('require')(Js('./_defined')))
        var.put('wks', var.get('require')(Js('./_wks')))
        var.put('regexpExec', var.get('require')(Js('./_regexp-exec')))
        var.put('SPECIES', var.get('wks')(Js('species')))
        @Js
        def PyJs_anonymous_140_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['re'])
            var.put('re', JsRegExp('/./'))
            @Js
            def PyJs_anonymous_141_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['result'])
                var.put('result', Js([]))
                var.get('result').put('groups', Js({'a':Js('7')}))
                return var.get('result')
            PyJs_anonymous_141_._set_name('anonymous')
            var.get('re').put('exec', PyJs_anonymous_141_)
            return PyJsStrictNeq(Js('').callprop('replace', var.get('re'), Js('$<a>')),Js('7'))
        PyJs_anonymous_140_._set_name('anonymous')
        var.put('REPLACE_SUPPORTS_NAMED_GROUPS', var.get('fails')(PyJs_anonymous_140_).neg())
        @Js
        def PyJs_anonymous_142_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['re', 'result', 'originalExec'])
            var.put('re', JsRegExp('/(?:)/'))
            var.put('originalExec', var.get('re').get('exec'))
            @Js
            def PyJs_anonymous_143_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return var.get('originalExec').callprop('apply', var.get(u"this"), var.get('arguments'))
            PyJs_anonymous_143_._set_name('anonymous')
            var.get('re').put('exec', PyJs_anonymous_143_)
            var.put('result', Js('ab').callprop('split', var.get('re')))
            return ((PyJsStrictEq(var.get('result').get('length'),Js(2.0)) and PyJsStrictEq(var.get('result').get('0'),Js('a'))) and PyJsStrictEq(var.get('result').get('1'),Js('b')))
        PyJs_anonymous_142_._set_name('anonymous')
        var.put('SPLIT_WORKS_WITH_OVERWRITTEN_EXEC', PyJs_anonymous_142_())
        @Js
        def PyJs_anonymous_144_(KEY, length, exec, this, arguments, var=var):
            var = Scope({'KEY':KEY, 'length':length, 'exec':exec, 'this':this, 'arguments':arguments}, var)
            var.registers(['SYMBOL', 'KEY', 'fns', 'nativeRegExpMethod', 'strfn', 'length', 'rxfn', 'exec', 'DELEGATES_TO_SYMBOL', 'DELEGATES_TO_EXEC'])
            var.put('SYMBOL', var.get('wks')(var.get('KEY')))
            @Js
            def PyJs_anonymous_145_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['O'])
                var.put('O', Js({}))
                @Js
                def PyJs_anonymous_146_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return Js(7.0)
                PyJs_anonymous_146_._set_name('anonymous')
                var.get('O').put(var.get('SYMBOL'), PyJs_anonymous_146_)
                return (Js('').callprop(var.get('KEY'), var.get('O'))!=Js(7.0))
            PyJs_anonymous_145_._set_name('anonymous')
            var.put('DELEGATES_TO_SYMBOL', var.get('fails')(PyJs_anonymous_145_).neg())
            @Js
            def PyJs_anonymous_147_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['execCalled', 're'])
                var.put('execCalled', Js(False))
                var.put('re', JsRegExp('/a/'))
                @Js
                def PyJs_anonymous_148_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.put('execCalled', Js(True))
                    return var.get(u"null")
                PyJs_anonymous_148_._set_name('anonymous')
                var.get('re').put('exec', PyJs_anonymous_148_)
                if PyJsStrictEq(var.get('KEY'),Js('split')):
                    var.get('re').put('constructor', Js({}))
                    @Js
                    def PyJs_anonymous_149_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get('re')
                    PyJs_anonymous_149_._set_name('anonymous')
                    var.get('re').get('constructor').put(var.get('SPECIES'), PyJs_anonymous_149_)
                var.get('re').callprop(var.get('SYMBOL'), Js(''))
                return var.get('execCalled').neg()
            PyJs_anonymous_147_._set_name('anonymous')
            var.put('DELEGATES_TO_EXEC', (var.get('fails')(PyJs_anonymous_147_).neg() if var.get('DELEGATES_TO_SYMBOL') else var.get('undefined')))
            if (((var.get('DELEGATES_TO_SYMBOL').neg() or var.get('DELEGATES_TO_EXEC').neg()) or (PyJsStrictEq(var.get('KEY'),Js('replace')) and var.get('REPLACE_SUPPORTS_NAMED_GROUPS').neg())) or (PyJsStrictEq(var.get('KEY'),Js('split')) and var.get('SPLIT_WORKS_WITH_OVERWRITTEN_EXEC').neg())):
                var.put('nativeRegExpMethod', JsRegExp('/./').get(var.get('SYMBOL')))
                @Js
                def PyJs_maybeCallNative_150_(nativeMethod, regexp, str, arg2, forceStringMethod, this, arguments, var=var):
                    var = Scope({'nativeMethod':nativeMethod, 'regexp':regexp, 'str':str, 'arg2':arg2, 'forceStringMethod':forceStringMethod, 'this':this, 'arguments':arguments, 'maybeCallNative':PyJs_maybeCallNative_150_}, var)
                    var.registers(['regexp', 'nativeMethod', 'str', 'forceStringMethod', 'arg2'])
                    if PyJsStrictEq(var.get('regexp').get('exec'),var.get('regexpExec')):
                        if (var.get('DELEGATES_TO_SYMBOL') and var.get('forceStringMethod').neg()):
                            return Js({'done':Js(True),'value':var.get('nativeRegExpMethod').callprop('call', var.get('regexp'), var.get('str'), var.get('arg2'))})
                        return Js({'done':Js(True),'value':var.get('nativeMethod').callprop('call', var.get('str'), var.get('regexp'), var.get('arg2'))})
                    return Js({'done':Js(False)})
                PyJs_maybeCallNative_150_._set_name('maybeCallNative')
                var.put('fns', var.get('exec')(var.get('defined'), var.get('SYMBOL'), Js('').get(var.get('KEY')), PyJs_maybeCallNative_150_))
                var.put('strfn', var.get('fns').get('0'))
                var.put('rxfn', var.get('fns').get('1'))
                var.get('redefine')(var.get('String').get('prototype'), var.get('KEY'), var.get('strfn'))
                @Js
                def PyJs_anonymous_151_(string, arg, this, arguments, var=var):
                    var = Scope({'string':string, 'arg':arg, 'this':this, 'arguments':arguments}, var)
                    var.registers(['string', 'arg'])
                    return var.get('rxfn').callprop('call', var.get('string'), var.get(u"this"), var.get('arg'))
                PyJs_anonymous_151_._set_name('anonymous')
                @Js
                def PyJs_anonymous_152_(string, this, arguments, var=var):
                    var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                    var.registers(['string'])
                    return var.get('rxfn').callprop('call', var.get('string'), var.get(u"this"))
                PyJs_anonymous_152_._set_name('anonymous')
                var.get('hide')(var.get('RegExp').get('prototype'), var.get('SYMBOL'), (PyJs_anonymous_151_ if (var.get('length')==Js(2.0)) else PyJs_anonymous_152_))
        PyJs_anonymous_144_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_144_)
    PyJs_anonymous_139_._set_name('anonymous')
    @Js
    def PyJs_anonymous_153_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'anObject', 'exports'])
        Js('use strict')
        var.put('anObject', var.get('require')(Js('./_an-object')))
        @Js
        def PyJs_anonymous_154_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['result', 'that'])
            var.put('that', var.get('anObject')(var.get(u"this")))
            var.put('result', Js(''))
            if var.get('that').get('global'):
                var.put('result', Js('g'), '+')
            if var.get('that').get('ignoreCase'):
                var.put('result', Js('i'), '+')
            if var.get('that').get('multiline'):
                var.put('result', Js('m'), '+')
            if var.get('that').get('unicode'):
                var.put('result', Js('u'), '+')
            if var.get('that').get('sticky'):
                var.put('result', Js('y'), '+')
            return var.get('result')
        PyJs_anonymous_154_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_154_)
    PyJs_anonymous_153_._set_name('anonymous')
    @Js
    def PyJs_anonymous_155_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toLength', 'flattenIntoArray', 'IS_CONCAT_SPREADABLE', 'isArray', 'module', 'exports', 'ctx', 'isObject'])
        @Js
        def PyJsHoisted_flattenIntoArray_(target, original, source, sourceLen, start, depth, mapper, thisArg, this, arguments, var=var):
            var = Scope({'target':target, 'original':original, 'source':source, 'sourceLen':sourceLen, 'start':start, 'depth':depth, 'mapper':mapper, 'thisArg':thisArg, 'this':this, 'arguments':arguments}, var)
            var.registers(['mapFn', 'target', 'depth', 'sourceIndex', 'original', 'source', 'sourceLen', 'start', 'targetIndex', 'spreadable', 'mapper', 'thisArg', 'element'])
            var.put('targetIndex', var.get('start'))
            var.put('sourceIndex', Js(0.0))
            var.put('mapFn', (var.get('ctx')(var.get('mapper'), var.get('thisArg'), Js(3.0)) if var.get('mapper') else Js(False)))
            pass
            while (var.get('sourceIndex')<var.get('sourceLen')):
                if var.get('source').contains(var.get('sourceIndex')):
                    var.put('element', (var.get('mapFn')(var.get('source').get(var.get('sourceIndex')), var.get('sourceIndex'), var.get('original')) if var.get('mapFn') else var.get('source').get(var.get('sourceIndex'))))
                    var.put('spreadable', Js(False))
                    if var.get('isObject')(var.get('element')):
                        var.put('spreadable', var.get('element').get(var.get('IS_CONCAT_SPREADABLE')))
                        var.put('spreadable', (var.get('spreadable').neg().neg() if PyJsStrictNeq(var.get('spreadable'),var.get('undefined')) else var.get('isArray')(var.get('element'))))
                    if (var.get('spreadable') and (var.get('depth')>Js(0.0))):
                        var.put('targetIndex', (var.get('flattenIntoArray')(var.get('target'), var.get('original'), var.get('element'), var.get('toLength')(var.get('element').get('length')), var.get('targetIndex'), (var.get('depth')-Js(1.0)))-Js(1.0)))
                    else:
                        if (var.get('targetIndex')>=Js(9007199254740991)):
                            PyJsTempException = JsToPyException(var.get('TypeError')())
                            raise PyJsTempException
                        var.get('target').put(var.get('targetIndex'), var.get('element'))
                    (var.put('targetIndex',Js(var.get('targetIndex').to_number())+Js(1))-Js(1))
                (var.put('sourceIndex',Js(var.get('sourceIndex').to_number())+Js(1))-Js(1))
            return var.get('targetIndex')
        PyJsHoisted_flattenIntoArray_.func_name = 'flattenIntoArray'
        var.put('flattenIntoArray', PyJsHoisted_flattenIntoArray_)
        Js('use strict')
        var.put('isArray', var.get('require')(Js('./_is-array')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('IS_CONCAT_SPREADABLE', var.get('require')(Js('./_wks'))(Js('isConcatSpreadable')))
        pass
        var.get('module').put('exports', var.get('flattenIntoArray'))
    PyJs_anonymous_155_._set_name('anonymous')
    @Js
    def PyJs_anonymous_156_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'getIterFn', 'BREAK', 'toLength', 'isArrayIter', 'call', 'exports', 'module', 'ctx', 'RETURN', 'anObject'])
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('call', var.get('require')(Js('./_iter-call')))
        var.put('isArrayIter', var.get('require')(Js('./_is-array-iter')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('getIterFn', var.get('require')(Js('./core.get-iterator-method')))
        var.put('BREAK', Js({}))
        var.put('RETURN', Js({}))
        @Js
        def PyJs_anonymous_157_(iterable, entries, fn, that, ITERATOR, this, arguments, var=var):
            var = Scope({'iterable':iterable, 'entries':entries, 'fn':fn, 'that':that, 'ITERATOR':ITERATOR, 'this':this, 'arguments':arguments}, var)
            var.registers(['f', 'iterator', 'index', 'length', 'ITERATOR', 'fn', 'that', 'result', 'step', 'iterFn', 'iterable', 'entries'])
            @Js
            def PyJs_anonymous_158_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return var.get('iterable')
            PyJs_anonymous_158_._set_name('anonymous')
            var.put('iterFn', (PyJs_anonymous_158_ if var.get('ITERATOR') else var.get('getIterFn')(var.get('iterable'))))
            var.put('f', var.get('ctx')(var.get('fn'), var.get('that'), (Js(2.0) if var.get('entries') else Js(1.0))))
            var.put('index', Js(0.0))
            pass
            if (var.get('iterFn',throw=False).typeof()!=Js('function')):
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('iterable')+Js(' is not iterable!'))))
                raise PyJsTempException
            if var.get('isArrayIter')(var.get('iterFn')):
                #for JS loop
                var.put('length', var.get('toLength')(var.get('iterable').get('length')))
                while (var.get('length')>var.get('index')):
                    try:
                        var.put('result', (var.get('f')(var.get('anObject')(var.put('step', var.get('iterable').get(var.get('index')))).get('0'), var.get('step').get('1')) if var.get('entries') else var.get('f')(var.get('iterable').get(var.get('index')))))
                        if (PyJsStrictEq(var.get('result'),var.get('BREAK')) or PyJsStrictEq(var.get('result'),var.get('RETURN'))):
                            return var.get('result')
                    finally:
                            (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
            else:
                #for JS loop
                var.put('iterator', var.get('iterFn').callprop('call', var.get('iterable')))
                while var.put('step', var.get('iterator').callprop('next')).get('done').neg():
                    var.put('result', var.get('call')(var.get('iterator'), var.get('f'), var.get('step').get('value'), var.get('entries')))
                    if (PyJsStrictEq(var.get('result'),var.get('BREAK')) or PyJsStrictEq(var.get('result'),var.get('RETURN'))):
                        return var.get('result')
                
        PyJs_anonymous_157_._set_name('anonymous')
        var.put('exports', var.get('module').put('exports', PyJs_anonymous_157_))
        var.get('exports').put('BREAK', var.get('BREAK'))
        var.get('exports').put('RETURN', var.get('RETURN'))
    PyJs_anonymous_156_._set_name('anonymous')
    @Js
    def PyJs_anonymous_159_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('module').put('exports', var.get('require')(Js('./_shared'))(Js('native-function-to-string'), var.get('Function').get('toString')))
    PyJs_anonymous_159_._set_name('anonymous')
    @Js
    def PyJs_anonymous_160_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'global', 'module', 'exports'])
        var.put('global', var.get('module').put('exports', (var.get('window') if ((var.get('window',throw=False).typeof()!=Js('undefined')) and (var.get('window').get('Math')==var.get('Math'))) else (var.get('self') if ((var.get('self',throw=False).typeof()!=Js('undefined')) and (var.get('self').get('Math')==var.get('Math'))) else var.get('Function')(Js('return this'))()))))
        if (var.get('__g',throw=False).typeof()==Js('number')):
            var.put('__g', var.get('global'))
    PyJs_anonymous_160_._set_name('anonymous')
    @Js
    def PyJs_anonymous_161_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['hasOwnProperty', 'require', 'module', 'exports'])
        var.put('hasOwnProperty', Js({}).get('hasOwnProperty'))
        @Js
        def PyJs_anonymous_162_(it, key, this, arguments, var=var):
            var = Scope({'it':it, 'key':key, 'this':this, 'arguments':arguments}, var)
            var.registers(['it', 'key'])
            return var.get('hasOwnProperty').callprop('call', var.get('it'), var.get('key'))
        PyJs_anonymous_162_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_162_)
    PyJs_anonymous_161_._set_name('anonymous')
    @Js
    def PyJs_anonymous_163_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'exports', 'module', 'createDesc', 'dP'])
        var.put('dP', var.get('require')(Js('./_object-dp')))
        var.put('createDesc', var.get('require')(Js('./_property-desc')))
        @Js
        def PyJs_anonymous_164_(object, key, value, this, arguments, var=var):
            var = Scope({'object':object, 'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value', 'object', 'key'])
            return var.get('dP').callprop('f', var.get('object'), var.get('key'), var.get('createDesc')(Js(1.0), var.get('value')))
        PyJs_anonymous_164_._set_name('anonymous')
        @Js
        def PyJs_anonymous_165_(object, key, value, this, arguments, var=var):
            var = Scope({'object':object, 'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value', 'object', 'key'])
            var.get('object').put(var.get('key'), var.get('value'))
            return var.get('object')
        PyJs_anonymous_165_._set_name('anonymous')
        var.get('module').put('exports', (PyJs_anonymous_164_ if var.get('require')(Js('./_descriptors')) else PyJs_anonymous_165_))
    PyJs_anonymous_163_._set_name('anonymous')
    @Js
    def PyJs_anonymous_166_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['document', 'module', 'require', 'exports'])
        var.put('document', var.get('require')(Js('./_global')).get('document'))
        var.get('module').put('exports', (var.get('document') and var.get('document').get('documentElement')))
    PyJs_anonymous_166_._set_name('anonymous')
    @Js
    def PyJs_anonymous_167_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_168_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_get_169_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_169_}, var)
                var.registers([])
                return Js(7.0)
            PyJs_get_169_._set_name('get')
            return (var.get('Object').callprop('defineProperty', var.get('require')(Js('./_dom-create'))(Js('div')), Js('a'), Js({'get':PyJs_get_169_})).get('a')!=Js(7.0))
        PyJs_anonymous_168_._set_name('anonymous')
        var.get('module').put('exports', (var.get('require')(Js('./_descriptors')).neg() and var.get('require')(Js('./_fails'))(PyJs_anonymous_168_).neg()))
    PyJs_anonymous_167_._set_name('anonymous')
    @Js
    def PyJs_anonymous_170_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'exports', 'setPrototypeOf', 'module', 'isObject'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('setPrototypeOf', var.get('require')(Js('./_set-proto')).get('set'))
        @Js
        def PyJs_anonymous_171_(that, target, C, this, arguments, var=var):
            var = Scope({'that':that, 'target':target, 'C':C, 'this':this, 'arguments':arguments}, var)
            var.registers(['target', 'C', 'that', 'S', 'P'])
            var.put('S', var.get('target').get('constructor'))
            pass
            if ((((PyJsStrictNeq(var.get('S'),var.get('C')) and (var.get('S',throw=False).typeof()==Js('function'))) and PyJsStrictNeq(var.put('P', var.get('S').get('prototype')),var.get('C').get('prototype'))) and var.get('isObject')(var.get('P'))) and var.get('setPrototypeOf')):
                var.get('setPrototypeOf')(var.get('that'), var.get('P'))
            return var.get('that')
        PyJs_anonymous_171_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_171_)
    PyJs_anonymous_170_._set_name('anonymous')
    @Js
    def PyJs_anonymous_172_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_173_(fn, args, that, this, arguments, var=var):
            var = Scope({'fn':fn, 'args':args, 'that':that, 'this':this, 'arguments':arguments}, var)
            var.registers(['fn', 'that', 'args', 'un'])
            var.put('un', PyJsStrictEq(var.get('that'),var.get('undefined')))
            while 1:
                SWITCHED = False
                CONDITION = (var.get('args').get('length'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(0.0)):
                    SWITCHED = True
                    return (var.get('fn')() if var.get('un') else var.get('fn').callprop('call', var.get('that')))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                    SWITCHED = True
                    return (var.get('fn')(var.get('args').get('0')) if var.get('un') else var.get('fn').callprop('call', var.get('that'), var.get('args').get('0')))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                    SWITCHED = True
                    return (var.get('fn')(var.get('args').get('0'), var.get('args').get('1')) if var.get('un') else var.get('fn').callprop('call', var.get('that'), var.get('args').get('0'), var.get('args').get('1')))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                    SWITCHED = True
                    return (var.get('fn')(var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2')) if var.get('un') else var.get('fn').callprop('call', var.get('that'), var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2')))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(4.0)):
                    SWITCHED = True
                    return (var.get('fn')(var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2'), var.get('args').get('3')) if var.get('un') else var.get('fn').callprop('call', var.get('that'), var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2'), var.get('args').get('3')))
                SWITCHED = True
                break
            return var.get('fn').callprop('apply', var.get('that'), var.get('args'))
        PyJs_anonymous_173_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_173_)
    PyJs_anonymous_172_._set_name('anonymous')
    @Js
    def PyJs_anonymous_174_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['cof', 'module', 'require', 'exports'])
        var.put('cof', var.get('require')(Js('./_cof')))
        @Js
        def PyJs_anonymous_175_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return (var.get('it').callprop('split', Js('')) if (var.get('cof')(var.get('it'))==Js('String')) else var.get('Object')(var.get('it')))
        PyJs_anonymous_175_._set_name('anonymous')
        var.get('module').put('exports', (var.get('Object') if var.get('Object')(Js('z')).callprop('propertyIsEnumerable', Js(0.0)) else PyJs_anonymous_175_))
    PyJs_anonymous_174_._set_name('anonymous')
    @Js
    def PyJs_anonymous_176_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'ArrayProto', 'ITERATOR', 'exports', 'module', 'Iterators'])
        var.put('Iterators', var.get('require')(Js('./_iterators')))
        var.put('ITERATOR', var.get('require')(Js('./_wks'))(Js('iterator')))
        var.put('ArrayProto', var.get('Array').get('prototype'))
        @Js
        def PyJs_anonymous_177_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return (PyJsStrictNeq(var.get('it'),var.get('undefined')) and (PyJsStrictEq(var.get('Iterators').get('Array'),var.get('it')) or PyJsStrictEq(var.get('ArrayProto').get(var.get('ITERATOR')),var.get('it'))))
        PyJs_anonymous_177_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_177_)
    PyJs_anonymous_176_._set_name('anonymous')
    @Js
    def PyJs_anonymous_178_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['cof', 'module', 'require', 'exports'])
        var.put('cof', var.get('require')(Js('./_cof')))
        @Js
        def PyJs_isArray_179_(arg, this, arguments, var=var):
            var = Scope({'arg':arg, 'this':this, 'arguments':arguments, 'isArray':PyJs_isArray_179_}, var)
            var.registers(['arg'])
            return (var.get('cof')(var.get('arg'))==Js('Array'))
        PyJs_isArray_179_._set_name('isArray')
        var.get('module').put('exports', (var.get('Array').get('isArray') or PyJs_isArray_179_))
    PyJs_anonymous_178_._set_name('anonymous')
    @Js
    def PyJs_anonymous_180_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'floor', 'exports', 'module', 'isObject'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('floor', var.get('Math').get('floor'))
        @Js
        def PyJs_isInteger_181_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'isInteger':PyJs_isInteger_181_}, var)
            var.registers(['it'])
            return ((var.get('isObject')(var.get('it')).neg() and var.get('isFinite')(var.get('it'))) and PyJsStrictEq(var.get('floor')(var.get('it')),var.get('it')))
        PyJs_isInteger_181_._set_name('isInteger')
        var.get('module').put('exports', PyJs_isInteger_181_)
    PyJs_anonymous_180_._set_name('anonymous')
    @Js
    def PyJs_anonymous_182_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_183_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return (PyJsStrictNeq(var.get('it'),var.get(u"null")) if PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('it',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('it'))),Js('object')) else PyJsStrictEq(var.get('it',throw=False).typeof(),Js('function')))
        PyJs_anonymous_183_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_183_)
    PyJs_anonymous_182_._set_name('anonymous')
    @Js
    def PyJs_anonymous_184_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'MATCH', 'exports', 'cof', 'module', 'isObject'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('cof', var.get('require')(Js('./_cof')))
        var.put('MATCH', var.get('require')(Js('./_wks'))(Js('match')))
        @Js
        def PyJs_anonymous_185_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it', 'isRegExp'])
            pass
            return (var.get('isObject')(var.get('it')) and (var.get('isRegExp').neg().neg() if PyJsStrictNeq(var.put('isRegExp', var.get('it').get(var.get('MATCH'))),var.get('undefined')) else (var.get('cof')(var.get('it'))==Js('RegExp'))))
        PyJs_anonymous_185_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_185_)
    PyJs_anonymous_184_._set_name('anonymous')
    @Js
    def PyJs_anonymous_186_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'anObject', 'exports'])
        var.put('anObject', var.get('require')(Js('./_an-object')))
        @Js
        def PyJs_anonymous_187_(iterator, fn, value, entries, this, arguments, var=var):
            var = Scope({'iterator':iterator, 'fn':fn, 'value':value, 'entries':entries, 'this':this, 'arguments':arguments}, var)
            var.registers(['iterator', 'fn', 'value', 'ret', 'entries'])
            try:
                return (var.get('fn')(var.get('anObject')(var.get('value')).get('0'), var.get('value').get('1')) if var.get('entries') else var.get('fn')(var.get('value')))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_78278987 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('ret', var.get('iterator').get('return'))
                    if PyJsStrictNeq(var.get('ret'),var.get('undefined')):
                        var.get('anObject')(var.get('ret').callprop('call', var.get('iterator')))
                    PyJsTempException = JsToPyException(var.get('e'))
                    raise PyJsTempException
                finally:
                    if PyJsHolder_65_78278987 is not None:
                        var.own['e'] = PyJsHolder_65_78278987
                    else:
                        del var.own['e']
                    del PyJsHolder_65_78278987
        PyJs_anonymous_187_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_187_)
    PyJs_anonymous_186_._set_name('anonymous')
    @Js
    def PyJs_anonymous_188_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'setToStringTag', 'IteratorPrototype', 'exports', 'module', 'create', 'descriptor'])
        Js('use strict')
        var.put('create', var.get('require')(Js('./_object-create')))
        var.put('descriptor', var.get('require')(Js('./_property-desc')))
        var.put('setToStringTag', var.get('require')(Js('./_set-to-string-tag')))
        var.put('IteratorPrototype', Js({}))
        @Js
        def PyJs_anonymous_189_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get(u"this")
        PyJs_anonymous_189_._set_name('anonymous')
        var.get('require')(Js('./_hide'))(var.get('IteratorPrototype'), var.get('require')(Js('./_wks'))(Js('iterator')), PyJs_anonymous_189_)
        @Js
        def PyJs_anonymous_190_(Constructor, NAME, next, this, arguments, var=var):
            var = Scope({'Constructor':Constructor, 'NAME':NAME, 'next':next, 'this':this, 'arguments':arguments}, var)
            var.registers(['NAME', 'Constructor', 'next'])
            var.get('Constructor').put('prototype', var.get('create')(var.get('IteratorPrototype'), Js({'next':var.get('descriptor')(Js(1.0), var.get('next'))})))
            var.get('setToStringTag')(var.get('Constructor'), (var.get('NAME')+Js(' Iterator')))
        PyJs_anonymous_190_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_190_)
    PyJs_anonymous_188_._set_name('anonymous')
    @Js
    def PyJs_anonymous_191_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'setToStringTag', 'hide', 'ITERATOR', '$iterCreate', 'redefine', 'LIBRARY', '$export', 'exports', 'module', 'FF_ITERATOR', 'returnThis', 'getPrototypeOf', 'KEYS', 'Iterators', 'BUGGY', 'VALUES'])
        Js('use strict')
        var.put('LIBRARY', var.get('require')(Js('./_library')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('redefine', var.get('require')(Js('./_redefine')))
        var.put('hide', var.get('require')(Js('./_hide')))
        var.put('Iterators', var.get('require')(Js('./_iterators')))
        var.put('$iterCreate', var.get('require')(Js('./_iter-create')))
        var.put('setToStringTag', var.get('require')(Js('./_set-to-string-tag')))
        var.put('getPrototypeOf', var.get('require')(Js('./_object-gpo')))
        var.put('ITERATOR', var.get('require')(Js('./_wks'))(Js('iterator')))
        var.put('BUGGY', (Js([]).get('keys') and Js([]).callprop('keys').contains(Js('next'))).neg())
        var.put('FF_ITERATOR', Js('@@iterator'))
        var.put('KEYS', Js('keys'))
        var.put('VALUES', Js('values'))
        @Js
        def PyJs_returnThis_192_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'returnThis':PyJs_returnThis_192_}, var)
            var.registers([])
            return var.get(u"this")
        PyJs_returnThis_192_._set_name('returnThis')
        var.put('returnThis', PyJs_returnThis_192_)
        @Js
        def PyJs_anonymous_193_(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED, this, arguments, var=var):
            var = Scope({'Base':Base, 'NAME':NAME, 'Constructor':Constructor, 'next':next, 'DEFAULT':DEFAULT, 'IS_SET':IS_SET, 'FORCED':FORCED, 'this':this, 'arguments':arguments}, var)
            var.registers(['proto', 'methods', 'TAG', 'Base', 'DEFAULT', 'IS_SET', 'key', '$anyNative', 'getMethod', 'FORCED', '$default', 'IteratorPrototype', 'next', 'Constructor', 'NAME', '$native', '$entries', 'DEF_VALUES', 'VALUES_BUG'])
            var.get('$iterCreate')(var.get('Constructor'), var.get('NAME'), var.get('next'))
            @Js
            def PyJs_getMethod_194_(kind, this, arguments, var=var):
                var = Scope({'kind':kind, 'this':this, 'arguments':arguments, 'getMethod':PyJs_getMethod_194_}, var)
                var.registers(['kind'])
                if (var.get('BUGGY').neg() and var.get('proto').contains(var.get('kind'))):
                    return var.get('proto').get(var.get('kind'))
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get('kind'))
                    if SWITCHED or PyJsStrictEq(CONDITION, var.get('KEYS')):
                        SWITCHED = True
                        @Js
                        def PyJs_keys_195_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'keys':PyJs_keys_195_}, var)
                            var.registers([])
                            return var.get('Constructor').create(var.get(u"this"), var.get('kind'))
                        PyJs_keys_195_._set_name('keys')
                        return PyJs_keys_195_
                    if SWITCHED or PyJsStrictEq(CONDITION, var.get('VALUES')):
                        SWITCHED = True
                        @Js
                        def PyJs_values_196_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'values':PyJs_values_196_}, var)
                            var.registers([])
                            return var.get('Constructor').create(var.get(u"this"), var.get('kind'))
                        PyJs_values_196_._set_name('values')
                        return PyJs_values_196_
                    SWITCHED = True
                    break
                @Js
                def PyJs_entries_197_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'entries':PyJs_entries_197_}, var)
                    var.registers([])
                    return var.get('Constructor').create(var.get(u"this"), var.get('kind'))
                PyJs_entries_197_._set_name('entries')
                return PyJs_entries_197_
            PyJs_getMethod_194_._set_name('getMethod')
            var.put('getMethod', PyJs_getMethod_194_)
            var.put('TAG', (var.get('NAME')+Js(' Iterator')))
            var.put('DEF_VALUES', (var.get('DEFAULT')==var.get('VALUES')))
            var.put('VALUES_BUG', Js(False))
            var.put('proto', var.get('Base').get('prototype'))
            var.put('$native', ((var.get('proto').get(var.get('ITERATOR')) or var.get('proto').get(var.get('FF_ITERATOR'))) or (var.get('DEFAULT') and var.get('proto').get(var.get('DEFAULT')))))
            var.put('$default', (var.get('$native') or var.get('getMethod')(var.get('DEFAULT'))))
            var.put('$entries', ((var.get('$default') if var.get('DEF_VALUES').neg() else var.get('getMethod')(Js('entries'))) if var.get('DEFAULT') else var.get('undefined')))
            var.put('$anyNative', ((var.get('proto').get('entries') or var.get('$native')) if (var.get('NAME')==Js('Array')) else var.get('$native')))
            pass
            if var.get('$anyNative'):
                var.put('IteratorPrototype', var.get('getPrototypeOf')(var.get('$anyNative').callprop('call', var.get('Base').create())))
                if (PyJsStrictNeq(var.get('IteratorPrototype'),var.get('Object').get('prototype')) and var.get('IteratorPrototype').get('next')):
                    var.get('setToStringTag')(var.get('IteratorPrototype'), var.get('TAG'), Js(True))
                    if (var.get('LIBRARY').neg() and (var.get('IteratorPrototype').get(var.get('ITERATOR')).typeof()!=Js('function'))):
                        var.get('hide')(var.get('IteratorPrototype'), var.get('ITERATOR'), var.get('returnThis'))
            if ((var.get('DEF_VALUES') and var.get('$native')) and PyJsStrictNeq(var.get('$native').get('name'),var.get('VALUES'))):
                var.put('VALUES_BUG', Js(True))
                @Js
                def PyJs_values_198_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'values':PyJs_values_198_}, var)
                    var.registers([])
                    return var.get('$native').callprop('call', var.get(u"this"))
                PyJs_values_198_._set_name('values')
                var.put('$default', PyJs_values_198_)
            if ((var.get('LIBRARY').neg() or var.get('FORCED')) and ((var.get('BUGGY') or var.get('VALUES_BUG')) or var.get('proto').get(var.get('ITERATOR')).neg())):
                var.get('hide')(var.get('proto'), var.get('ITERATOR'), var.get('$default'))
            var.get('Iterators').put(var.get('NAME'), var.get('$default'))
            var.get('Iterators').put(var.get('TAG'), var.get('returnThis'))
            if var.get('DEFAULT'):
                var.put('methods', Js({'values':(var.get('$default') if var.get('DEF_VALUES') else var.get('getMethod')(var.get('VALUES'))),'keys':(var.get('$default') if var.get('IS_SET') else var.get('getMethod')(var.get('KEYS'))),'entries':var.get('$entries')}))
                if var.get('FORCED'):
                    for PyJsTemp in var.get('methods'):
                        var.put('key', PyJsTemp)
                        if var.get('proto').contains(var.get('key')).neg():
                            var.get('redefine')(var.get('proto'), var.get('key'), var.get('methods').get(var.get('key')))
                else:
                    var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*(var.get('BUGGY') or var.get('VALUES_BUG')))), var.get('NAME'), var.get('methods'))
            return var.get('methods')
        PyJs_anonymous_193_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_193_)
    PyJs_anonymous_191_._set_name('anonymous')
    @Js
    def PyJs_anonymous_199_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'riter', 'ITERATOR', 'exports', 'module', 'SAFE_CLOSING'])
        var.put('ITERATOR', var.get('require')(Js('./_wks'))(Js('iterator')))
        var.put('SAFE_CLOSING', Js(False))
        try:
            var.put('riter', Js([Js(7.0)]).callprop(var.get('ITERATOR')))
            @Js
            def PyJs_anonymous_200_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.put('SAFE_CLOSING', Js(True))
            PyJs_anonymous_200_._set_name('anonymous')
            var.get('riter').put('return', PyJs_anonymous_200_)
            @Js
            def PyJs_anonymous_201_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                PyJsTempException = JsToPyException(Js(2.0))
                raise PyJsTempException
            PyJs_anonymous_201_._set_name('anonymous')
            var.get('Array').callprop('from', var.get('riter'), PyJs_anonymous_201_)
        except PyJsException as PyJsTempException:
            PyJsHolder_65_14888518 = var.own.get('e')
            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
            try:
                pass
            finally:
                if PyJsHolder_65_14888518 is not None:
                    var.own['e'] = PyJsHolder_65_14888518
                else:
                    del var.own['e']
                del PyJsHolder_65_14888518
        @Js
        def PyJs_anonymous_202_(exec, skipClosing, this, arguments, var=var):
            var = Scope({'exec':exec, 'skipClosing':skipClosing, 'this':this, 'arguments':arguments}, var)
            var.registers(['iter', 'safe', 'arr', 'exec', 'skipClosing'])
            if (var.get('skipClosing').neg() and var.get('SAFE_CLOSING').neg()):
                return Js(False)
            var.put('safe', Js(False))
            try:
                var.put('arr', Js([Js(7.0)]))
                var.put('iter', var.get('arr').callprop(var.get('ITERATOR')))
                @Js
                def PyJs_anonymous_203_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return Js({'done':var.put('safe', Js(True))})
                PyJs_anonymous_203_._set_name('anonymous')
                var.get('iter').put('next', PyJs_anonymous_203_)
                @Js
                def PyJs_anonymous_204_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return var.get('iter')
                PyJs_anonymous_204_._set_name('anonymous')
                var.get('arr').put(var.get('ITERATOR'), PyJs_anonymous_204_)
                var.get('exec')(var.get('arr'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_31773382 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    pass
                finally:
                    if PyJsHolder_65_31773382 is not None:
                        var.own['e'] = PyJsHolder_65_31773382
                    else:
                        del var.own['e']
                    del PyJsHolder_65_31773382
            return var.get('safe')
        PyJs_anonymous_202_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_202_)
    PyJs_anonymous_199_._set_name('anonymous')
    @Js
    def PyJs_anonymous_205_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_206_(done, value, this, arguments, var=var):
            var = Scope({'done':done, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value', 'done'])
            return Js({'value':var.get('value'),'done':var.get('done').neg().neg()})
        PyJs_anonymous_206_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_206_)
    PyJs_anonymous_205_._set_name('anonymous')
    @Js
    def PyJs_anonymous_207_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('module').put('exports', Js({}))
    PyJs_anonymous_207_._set_name('anonymous')
    @Js
    def PyJs_anonymous_208_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('module').put('exports', Js(False))
    PyJs_anonymous_208_._set_name('anonymous')
    @Js
    def PyJs_anonymous_209_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$expm1', 'exports'])
        var.put('$expm1', var.get('Math').get('expm1'))
        @Js
        def PyJs_expm1_210_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'expm1':PyJs_expm1_210_}, var)
            var.registers(['x'])
            return (var.get('x') if (var.put('x', (+var.get('x')))==Js(0.0)) else ((var.get('x')+((var.get('x')*var.get('x'))/Js(2.0))) if ((var.get('x')>(-Js(1e-06))) and (var.get('x')<Js(1e-06))) else (var.get('Math').callprop('exp', var.get('x'))-Js(1.0))))
        PyJs_expm1_210_._set_name('expm1')
        var.get('module').put('exports', (PyJs_expm1_210_ if (((var.get('$expm1').neg() or (var.get('$expm1')(Js(10.0))>Js(22025.465794806718))) or (var.get('$expm1')(Js(10.0))<Js(22025.465794806718))) or (var.get('$expm1')((-Js(2e-17)))!=(-Js(2e-17)))) else var.get('$expm1')))
    PyJs_anonymous_209_._set_name('anonymous')
    @Js
    def PyJs_anonymous_211_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'MIN32', 'EPSILON', 'roundTiesToEven', 'exports', 'module', 'sign', 'pow', 'MAX32', 'EPSILON32'])
        var.put('sign', var.get('require')(Js('./_math-sign')))
        var.put('pow', var.get('Math').get('pow'))
        var.put('EPSILON', var.get('pow')(Js(2.0), (-Js(52.0))))
        var.put('EPSILON32', var.get('pow')(Js(2.0), (-Js(23.0))))
        var.put('MAX32', (var.get('pow')(Js(2.0), Js(127.0))*(Js(2.0)-var.get('EPSILON32'))))
        var.put('MIN32', var.get('pow')(Js(2.0), (-Js(126.0))))
        @Js
        def PyJs_roundTiesToEven_212_(n, this, arguments, var=var):
            var = Scope({'n':n, 'this':this, 'arguments':arguments, 'roundTiesToEven':PyJs_roundTiesToEven_212_}, var)
            var.registers(['n'])
            return ((var.get('n')+(Js(1.0)/var.get('EPSILON')))-(Js(1.0)/var.get('EPSILON')))
        PyJs_roundTiesToEven_212_._set_name('roundTiesToEven')
        var.put('roundTiesToEven', PyJs_roundTiesToEven_212_)
        @Js
        def PyJs_fround_213_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'fround':PyJs_fround_213_}, var)
            var.registers(['$sign', 'x', '$abs', 'result', 'a'])
            var.put('$abs', var.get('Math').callprop('abs', var.get('x')))
            var.put('$sign', var.get('sign')(var.get('x')))
            pass
            if (var.get('$abs')<var.get('MIN32')):
                return (((var.get('$sign')*var.get('roundTiesToEven')(((var.get('$abs')/var.get('MIN32'))/var.get('EPSILON32'))))*var.get('MIN32'))*var.get('EPSILON32'))
            var.put('a', ((Js(1.0)+(var.get('EPSILON32')/var.get('EPSILON')))*var.get('$abs')))
            var.put('result', (var.get('a')-(var.get('a')-var.get('$abs'))))
            if ((var.get('result')>var.get('MAX32')) or (var.get('result')!=var.get('result'))):
                return (var.get('$sign')*var.get('Infinity'))
            return (var.get('$sign')*var.get('result'))
        PyJs_fround_213_._set_name('fround')
        var.get('module').put('exports', (var.get('Math').get('fround') or PyJs_fround_213_))
    PyJs_anonymous_211_._set_name('anonymous')
    @Js
    def PyJs_anonymous_214_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_log1p_215_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'log1p':PyJs_log1p_215_}, var)
            var.registers(['x'])
            return ((var.get('x')-((var.get('x')*var.get('x'))/Js(2.0))) if ((var.put('x', (+var.get('x')))>(-Js(1e-08))) and (var.get('x')<Js(1e-08))) else var.get('Math').callprop('log', (Js(1.0)+var.get('x'))))
        PyJs_log1p_215_._set_name('log1p')
        var.get('module').put('exports', (var.get('Math').get('log1p') or PyJs_log1p_215_))
    PyJs_anonymous_214_._set_name('anonymous')
    @Js
    def PyJs_anonymous_216_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_scale_217_(x, inLow, inHigh, outLow, outHigh, this, arguments, var=var):
            var = Scope({'x':x, 'inLow':inLow, 'inHigh':inHigh, 'outLow':outLow, 'outHigh':outHigh, 'this':this, 'arguments':arguments, 'scale':PyJs_scale_217_}, var)
            var.registers(['outLow', 'x', 'inLow', 'inHigh', 'outHigh'])
            if (((((PyJsStrictEq(var.get('arguments').get('length'),Js(0.0)) or (var.get('x')!=var.get('x'))) or (var.get('inLow')!=var.get('inLow'))) or (var.get('inHigh')!=var.get('inHigh'))) or (var.get('outLow')!=var.get('outLow'))) or (var.get('outHigh')!=var.get('outHigh'))):
                return var.get('NaN')
            if (PyJsStrictEq(var.get('x'),var.get('Infinity')) or PyJsStrictEq(var.get('x'),(-var.get('Infinity')))):
                return var.get('x')
            return ((((var.get('x')-var.get('inLow'))*(var.get('outHigh')-var.get('outLow')))/(var.get('inHigh')-var.get('inLow')))+var.get('outLow'))
        PyJs_scale_217_._set_name('scale')
        var.get('module').put('exports', (var.get('Math').get('scale') or PyJs_scale_217_))
    PyJs_anonymous_216_._set_name('anonymous')
    @Js
    def PyJs_anonymous_218_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_sign_219_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'sign':PyJs_sign_219_}, var)
            var.registers(['x'])
            return (var.get('x') if ((var.put('x', (+var.get('x')))==Js(0.0)) or (var.get('x')!=var.get('x'))) else ((-Js(1.0)) if (var.get('x')<Js(0.0)) else Js(1.0)))
        PyJs_sign_219_._set_name('sign')
        var.get('module').put('exports', (var.get('Math').get('sign') or PyJs_sign_219_))
    PyJs_anonymous_218_._set_name('anonymous')
    @Js
    def PyJs_anonymous_220_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['getWeak', 'require', 'onFreeze', 'fastKey', 'META', 'setDesc', 'isExtensible', 'meta', 'FREEZE', 'exports', 'module', 'id', 'setMeta', 'isObject', 'has'])
        var.put('META', var.get('require')(Js('./_uid'))(Js('meta')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('has', var.get('require')(Js('./_has')))
        var.put('setDesc', var.get('require')(Js('./_object-dp')).get('f'))
        var.put('id', Js(0.0))
        @Js
        def PyJs_anonymous_221_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return Js(True)
        PyJs_anonymous_221_._set_name('anonymous')
        var.put('isExtensible', (var.get('Object').get('isExtensible') or PyJs_anonymous_221_))
        @Js
        def PyJs_anonymous_222_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('isExtensible')(var.get('Object').callprop('preventExtensions', Js({})))
        PyJs_anonymous_222_._set_name('anonymous')
        var.put('FREEZE', var.get('require')(Js('./_fails'))(PyJs_anonymous_222_).neg())
        @Js
        def PyJs_setMeta_223_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'setMeta':PyJs_setMeta_223_}, var)
            var.registers(['it'])
            var.get('setDesc')(var.get('it'), var.get('META'), Js({'value':Js({'i':(Js('O')+var.put('id',Js(var.get('id').to_number())+Js(1))),'w':Js({})})}))
        PyJs_setMeta_223_._set_name('setMeta')
        var.put('setMeta', PyJs_setMeta_223_)
        @Js
        def PyJs_fastKey_224_(it, create, this, arguments, var=var):
            var = Scope({'it':it, 'create':create, 'this':this, 'arguments':arguments, 'fastKey':PyJs_fastKey_224_}, var)
            var.registers(['it', 'create'])
            if var.get('isObject')(var.get('it')).neg():
                return (var.get('it') if ((Js('undefined') if PyJsStrictEq(var.get('it',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('it')))==Js('symbol')) else ((Js('S') if (var.get('it',throw=False).typeof()==Js('string')) else Js('P'))+var.get('it')))
            if var.get('has')(var.get('it'), var.get('META')).neg():
                if var.get('isExtensible')(var.get('it')).neg():
                    return Js('F')
                if var.get('create').neg():
                    return Js('E')
                var.get('setMeta')(var.get('it'))
            return var.get('it').get(var.get('META')).get('i')
        PyJs_fastKey_224_._set_name('fastKey')
        var.put('fastKey', PyJs_fastKey_224_)
        @Js
        def PyJs_getWeak_225_(it, create, this, arguments, var=var):
            var = Scope({'it':it, 'create':create, 'this':this, 'arguments':arguments, 'getWeak':PyJs_getWeak_225_}, var)
            var.registers(['it', 'create'])
            if var.get('has')(var.get('it'), var.get('META')).neg():
                if var.get('isExtensible')(var.get('it')).neg():
                    return Js(True)
                if var.get('create').neg():
                    return Js(False)
                var.get('setMeta')(var.get('it'))
            return var.get('it').get(var.get('META')).get('w')
        PyJs_getWeak_225_._set_name('getWeak')
        var.put('getWeak', PyJs_getWeak_225_)
        @Js
        def PyJs_onFreeze_226_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'onFreeze':PyJs_onFreeze_226_}, var)
            var.registers(['it'])
            if (((var.get('FREEZE') and var.get('meta').get('NEED')) and var.get('isExtensible')(var.get('it'))) and var.get('has')(var.get('it'), var.get('META')).neg()):
                var.get('setMeta')(var.get('it'))
            return var.get('it')
        PyJs_onFreeze_226_._set_name('onFreeze')
        var.put('onFreeze', PyJs_onFreeze_226_)
        var.put('meta', var.get('module').put('exports', Js({'KEY':var.get('META'),'NEED':Js(False),'fastKey':var.get('fastKey'),'getWeak':var.get('getWeak'),'onFreeze':var.get('onFreeze')})))
    PyJs_anonymous_220_._set_name('anonymous')
    @Js
    def PyJs_anonymous_227_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'ordinaryGetOwnMetadata', 'ordinaryDefineOwnMetadata', '$export', 'exports', 'shared', 'getOrCreateMetadataMap', 'store', 'toMetaKey', 'module', 'ordinaryOwnMetadataKeys', 'Map', 'exp', 'ordinaryHasOwnMetadata'])
        var.put('Map', var.get('require')(Js('./es6.map')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('shared', var.get('require')(Js('./_shared'))(Js('metadata')))
        var.put('store', (var.get('shared').get('store') or var.get('shared').put('store', var.get('require')(Js('./es6.weak-map')).create())))
        @Js
        def PyJs_getOrCreateMetadataMap_228_(target, targetKey, create, this, arguments, var=var):
            var = Scope({'target':target, 'targetKey':targetKey, 'create':create, 'this':this, 'arguments':arguments, 'getOrCreateMetadataMap':PyJs_getOrCreateMetadataMap_228_}, var)
            var.registers(['target', 'keyMetadata', 'targetMetadata', 'targetKey', 'create'])
            var.put('targetMetadata', var.get('store').callprop('get', var.get('target')))
            if var.get('targetMetadata').neg():
                if var.get('create').neg():
                    return var.get('undefined')
                var.get('store').callprop('set', var.get('target'), var.put('targetMetadata', var.get('Map').create()))
            var.put('keyMetadata', var.get('targetMetadata').callprop('get', var.get('targetKey')))
            if var.get('keyMetadata').neg():
                if var.get('create').neg():
                    return var.get('undefined')
                var.get('targetMetadata').callprop('set', var.get('targetKey'), var.put('keyMetadata', var.get('Map').create()))
            return var.get('keyMetadata')
        PyJs_getOrCreateMetadataMap_228_._set_name('getOrCreateMetadataMap')
        var.put('getOrCreateMetadataMap', PyJs_getOrCreateMetadataMap_228_)
        @Js
        def PyJs_ordinaryHasOwnMetadata_229_(MetadataKey, O, P, this, arguments, var=var):
            var = Scope({'MetadataKey':MetadataKey, 'O':O, 'P':P, 'this':this, 'arguments':arguments, 'ordinaryHasOwnMetadata':PyJs_ordinaryHasOwnMetadata_229_}, var)
            var.registers(['metadataMap', 'O', 'P', 'MetadataKey'])
            var.put('metadataMap', var.get('getOrCreateMetadataMap')(var.get('O'), var.get('P'), Js(False)))
            return (Js(False) if PyJsStrictEq(var.get('metadataMap'),var.get('undefined')) else var.get('metadataMap').callprop('has', var.get('MetadataKey')))
        PyJs_ordinaryHasOwnMetadata_229_._set_name('ordinaryHasOwnMetadata')
        var.put('ordinaryHasOwnMetadata', PyJs_ordinaryHasOwnMetadata_229_)
        @Js
        def PyJs_ordinaryGetOwnMetadata_230_(MetadataKey, O, P, this, arguments, var=var):
            var = Scope({'MetadataKey':MetadataKey, 'O':O, 'P':P, 'this':this, 'arguments':arguments, 'ordinaryGetOwnMetadata':PyJs_ordinaryGetOwnMetadata_230_}, var)
            var.registers(['metadataMap', 'O', 'P', 'MetadataKey'])
            var.put('metadataMap', var.get('getOrCreateMetadataMap')(var.get('O'), var.get('P'), Js(False)))
            return (var.get('undefined') if PyJsStrictEq(var.get('metadataMap'),var.get('undefined')) else var.get('metadataMap').callprop('get', var.get('MetadataKey')))
        PyJs_ordinaryGetOwnMetadata_230_._set_name('ordinaryGetOwnMetadata')
        var.put('ordinaryGetOwnMetadata', PyJs_ordinaryGetOwnMetadata_230_)
        @Js
        def PyJs_ordinaryDefineOwnMetadata_231_(MetadataKey, MetadataValue, O, P, this, arguments, var=var):
            var = Scope({'MetadataKey':MetadataKey, 'MetadataValue':MetadataValue, 'O':O, 'P':P, 'this':this, 'arguments':arguments, 'ordinaryDefineOwnMetadata':PyJs_ordinaryDefineOwnMetadata_231_}, var)
            var.registers(['O', 'MetadataValue', 'P', 'MetadataKey'])
            var.get('getOrCreateMetadataMap')(var.get('O'), var.get('P'), Js(True)).callprop('set', var.get('MetadataKey'), var.get('MetadataValue'))
        PyJs_ordinaryDefineOwnMetadata_231_._set_name('ordinaryDefineOwnMetadata')
        var.put('ordinaryDefineOwnMetadata', PyJs_ordinaryDefineOwnMetadata_231_)
        @Js
        def PyJs_ordinaryOwnMetadataKeys_232_(target, targetKey, this, arguments, var=var):
            var = Scope({'target':target, 'targetKey':targetKey, 'this':this, 'arguments':arguments, 'ordinaryOwnMetadataKeys':PyJs_ordinaryOwnMetadataKeys_232_}, var)
            var.registers(['metadataMap', 'target', 'targetKey', 'keys'])
            var.put('metadataMap', var.get('getOrCreateMetadataMap')(var.get('target'), var.get('targetKey'), Js(False)))
            var.put('keys', Js([]))
            if var.get('metadataMap'):
                @Js
                def PyJs_anonymous_233_(_, key, this, arguments, var=var):
                    var = Scope({'_':_, 'key':key, 'this':this, 'arguments':arguments}, var)
                    var.registers(['_', 'key'])
                    var.get('keys').callprop('push', var.get('key'))
                PyJs_anonymous_233_._set_name('anonymous')
                var.get('metadataMap').callprop('forEach', PyJs_anonymous_233_)
            return var.get('keys')
        PyJs_ordinaryOwnMetadataKeys_232_._set_name('ordinaryOwnMetadataKeys')
        var.put('ordinaryOwnMetadataKeys', PyJs_ordinaryOwnMetadataKeys_232_)
        @Js
        def PyJs_toMetaKey_234_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'toMetaKey':PyJs_toMetaKey_234_}, var)
            var.registers(['it'])
            return (var.get('it') if (PyJsStrictEq(var.get('it'),var.get('undefined')) or ((Js('undefined') if PyJsStrictEq(var.get('it',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('it')))==Js('symbol'))) else var.get('String')(var.get('it')))
        PyJs_toMetaKey_234_._set_name('toMetaKey')
        var.put('toMetaKey', PyJs_toMetaKey_234_)
        @Js
        def PyJs_exp_235_(O, this, arguments, var=var):
            var = Scope({'O':O, 'this':this, 'arguments':arguments, 'exp':PyJs_exp_235_}, var)
            var.registers(['O'])
            var.get('$export')(var.get('$export').get('S'), Js('Reflect'), var.get('O'))
        PyJs_exp_235_._set_name('exp')
        var.put('exp', PyJs_exp_235_)
        var.get('module').put('exports', Js({'store':var.get('store'),'map':var.get('getOrCreateMetadataMap'),'has':var.get('ordinaryHasOwnMetadata'),'get':var.get('ordinaryGetOwnMetadata'),'set':var.get('ordinaryDefineOwnMetadata'),'keys':var.get('ordinaryOwnMetadataKeys'),'key':var.get('toMetaKey'),'exp':var.get('exp')}))
    PyJs_anonymous_227_._set_name('anonymous')
    @Js
    def PyJs_anonymous_236_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['isNode', 'require', 'Promise', 'macrotask', 'exports', 'module', 'Observer', 'global', 'process'])
        var.put('global', var.get('require')(Js('./_global')))
        var.put('macrotask', var.get('require')(Js('./_task')).get('set'))
        var.put('Observer', (var.get('global').get('MutationObserver') or var.get('global').get('WebKitMutationObserver')))
        var.put('process', var.get('global').get('process'))
        var.put('Promise', var.get('global').get('Promise'))
        var.put('isNode', (var.get('require')(Js('./_cof'))(var.get('process'))==Js('process')))
        @Js
        def PyJs_anonymous_237_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['head', 'toggle', 'node', 'flush', 'promise', 'last', 'notify'])
            pass
            @Js
            def PyJs_flush_238_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'flush':PyJs_flush_238_}, var)
                var.registers(['parent', 'fn'])
                pass
                if (var.get('isNode') and var.put('parent', var.get('process').get('domain'))):
                    var.get('parent').callprop('exit')
                while var.get('head'):
                    var.put('fn', var.get('head').get('fn'))
                    var.put('head', var.get('head').get('next'))
                    try:
                        var.get('fn')()
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_4175940 = var.own.get('e')
                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                        try:
                            if var.get('head'):
                                var.get('notify')()
                            else:
                                var.put('last', var.get('undefined'))
                            PyJsTempException = JsToPyException(var.get('e'))
                            raise PyJsTempException
                        finally:
                            if PyJsHolder_65_4175940 is not None:
                                var.own['e'] = PyJsHolder_65_4175940
                            else:
                                del var.own['e']
                            del PyJsHolder_65_4175940
                var.put('last', var.get('undefined'))
                if var.get('parent'):
                    var.get('parent').callprop('enter')
            PyJs_flush_238_._set_name('flush')
            var.put('flush', PyJs_flush_238_)
            if var.get('isNode'):
                @Js
                def PyJs_notify_239_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'notify':PyJs_notify_239_}, var)
                    var.registers([])
                    var.get('process').callprop('nextTick', var.get('flush'))
                PyJs_notify_239_._set_name('notify')
                var.put('notify', PyJs_notify_239_)
            else:
                if (var.get('Observer') and (var.get('global').get('navigator') and var.get('global').get('navigator').get('standalone')).neg()):
                    var.put('toggle', Js(True))
                    var.put('node', var.get('document').callprop('createTextNode', Js('')))
                    var.get('Observer').create(var.get('flush')).callprop('observe', var.get('node'), Js({'characterData':Js(True)}))
                    @Js
                    def PyJs_notify_240_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'notify':PyJs_notify_240_}, var)
                        var.registers([])
                        var.get('node').put('data', var.put('toggle', var.get('toggle').neg()))
                    PyJs_notify_240_._set_name('notify')
                    var.put('notify', PyJs_notify_240_)
                else:
                    if (var.get('Promise') and var.get('Promise').get('resolve')):
                        var.put('promise', var.get('Promise').callprop('resolve', var.get('undefined')))
                        @Js
                        def PyJs_notify_241_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'notify':PyJs_notify_241_}, var)
                            var.registers([])
                            var.get('promise').callprop('then', var.get('flush'))
                        PyJs_notify_241_._set_name('notify')
                        var.put('notify', PyJs_notify_241_)
                    else:
                        @Js
                        def PyJs_notify_242_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'notify':PyJs_notify_242_}, var)
                            var.registers([])
                            var.get('macrotask').callprop('call', var.get('global'), var.get('flush'))
                        PyJs_notify_242_._set_name('notify')
                        var.put('notify', PyJs_notify_242_)
            @Js
            def PyJs_anonymous_243_(fn, this, arguments, var=var):
                var = Scope({'fn':fn, 'this':this, 'arguments':arguments}, var)
                var.registers(['task', 'fn'])
                var.put('task', Js({'fn':var.get('fn'),'next':var.get('undefined')}))
                if var.get('last'):
                    var.get('last').put('next', var.get('task'))
                if var.get('head').neg():
                    var.put('head', var.get('task'))
                    var.get('notify')()
                var.put('last', var.get('task'))
            PyJs_anonymous_243_._set_name('anonymous')
            return PyJs_anonymous_243_
        PyJs_anonymous_237_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_237_)
    PyJs_anonymous_236_._set_name('anonymous')
    @Js
    def PyJs_anonymous_244_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['aFunction', 'require', 'PromiseCapability', 'exports', 'module'])
        @Js
        def PyJsHoisted_PromiseCapability_(C, this, arguments, var=var):
            var = Scope({'C':C, 'this':this, 'arguments':arguments}, var)
            var.registers(['C', 'resolve', 'reject'])
            pass
            @Js
            def PyJs_anonymous_245_(PyJsArg_24247265736f6c7665_, PyJsArg_242472656a656374_, this, arguments, var=var):
                var = Scope({'$$resolve':PyJsArg_24247265736f6c7665_, '$$reject':PyJsArg_242472656a656374_, 'this':this, 'arguments':arguments}, var)
                var.registers(['$$reject', '$$resolve'])
                if (PyJsStrictNeq(var.get('resolve'),var.get('undefined')) or PyJsStrictNeq(var.get('reject'),var.get('undefined'))):
                    PyJsTempException = JsToPyException(var.get('TypeError')(Js('Bad Promise constructor')))
                    raise PyJsTempException
                var.put('resolve', var.get('$$resolve'))
                var.put('reject', var.get('$$reject'))
            PyJs_anonymous_245_._set_name('anonymous')
            var.get(u"this").put('promise', var.get('C').create(PyJs_anonymous_245_))
            var.get(u"this").put('resolve', var.get('aFunction')(var.get('resolve')))
            var.get(u"this").put('reject', var.get('aFunction')(var.get('reject')))
        PyJsHoisted_PromiseCapability_.func_name = 'PromiseCapability'
        var.put('PromiseCapability', PyJsHoisted_PromiseCapability_)
        Js('use strict')
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        pass
        @Js
        def PyJs_anonymous_246_(C, this, arguments, var=var):
            var = Scope({'C':C, 'this':this, 'arguments':arguments}, var)
            var.registers(['C'])
            return var.get('PromiseCapability').create(var.get('C'))
        PyJs_anonymous_246_._set_name('anonymous')
        var.get('module').get('exports').put('f', PyJs_anonymous_246_)
    PyJs_anonymous_244_._set_name('anonymous')
    @Js
    def PyJs_anonymous_247_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'getKeys', 'DESCRIPTORS', 'pIE', 'gOPS', 'toObject', 'exports', 'module', 'IObject', '$assign'])
        Js('use strict')
        var.put('DESCRIPTORS', var.get('require')(Js('./_descriptors')))
        var.put('getKeys', var.get('require')(Js('./_object-keys')))
        var.put('gOPS', var.get('require')(Js('./_object-gops')))
        var.put('pIE', var.get('require')(Js('./_object-pie')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('IObject', var.get('require')(Js('./_iobject')))
        var.put('$assign', var.get('Object').get('assign'))
        @Js
        def PyJs_assign_248_(target, source, this, arguments, var=var):
            var = Scope({'target':target, 'source':source, 'this':this, 'arguments':arguments, 'assign':PyJs_assign_248_}, var)
            var.registers(['target', 'keys', 'index', 'length', 'source', 'j', 'getSymbols', 'isEnum', 'aLen', 'S', 'key', 'T'])
            var.put('T', var.get('toObject')(var.get('target')))
            var.put('aLen', var.get('arguments').get('length'))
            var.put('index', Js(1.0))
            var.put('getSymbols', var.get('gOPS').get('f'))
            var.put('isEnum', var.get('pIE').get('f'))
            while (var.get('aLen')>var.get('index')):
                var.put('S', var.get('IObject')(var.get('arguments').get((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1)))))
                var.put('keys', (var.get('getKeys')(var.get('S')).callprop('concat', var.get('getSymbols')(var.get('S'))) if var.get('getSymbols') else var.get('getKeys')(var.get('S'))))
                var.put('length', var.get('keys').get('length'))
                var.put('j', Js(0.0))
                pass
                while (var.get('length')>var.get('j')):
                    var.put('key', var.get('keys').get((var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))))
                    if (var.get('DESCRIPTORS').neg() or var.get('isEnum').callprop('call', var.get('S'), var.get('key'))):
                        var.get('T').put(var.get('key'), var.get('S').get(var.get('key')))
            return var.get('T')
        PyJs_assign_248_._set_name('assign')
        @Js
        def PyJs_anonymous_249_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['B', 'K', 'S', 'A'])
            var.put('A', Js({}))
            var.put('B', Js({}))
            var.put('S', var.get('Symbol')())
            var.put('K', Js('abcdefghijklmnopqrst'))
            var.get('A').put(var.get('S'), Js(7.0))
            @Js
            def PyJs_anonymous_250_(k, this, arguments, var=var):
                var = Scope({'k':k, 'this':this, 'arguments':arguments}, var)
                var.registers(['k'])
                var.get('B').put(var.get('k'), var.get('k'))
            PyJs_anonymous_250_._set_name('anonymous')
            var.get('K').callprop('split', Js('')).callprop('forEach', PyJs_anonymous_250_)
            return ((var.get('$assign')(Js({}), var.get('A')).get(var.get('S'))!=Js(7.0)) or (var.get('Object').callprop('keys', var.get('$assign')(Js({}), var.get('B'))).callprop('join', Js(''))!=var.get('K')))
        PyJs_anonymous_249_._set_name('anonymous')
        var.get('module').put('exports', (PyJs_assign_248_ if (var.get('$assign').neg() or var.get('require')(Js('./_fails'))(PyJs_anonymous_249_)) else var.get('$assign')))
    PyJs_anonymous_247_._set_name('anonymous')
    @Js
    def PyJs_anonymous_251_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['PROTOTYPE', 'require', 'IE_PROTO', 'enumBugKeys', '_createDict', 'Empty', 'exports', 'module', 'anObject', 'dPs'])
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('dPs', var.get('require')(Js('./_object-dps')))
        var.put('enumBugKeys', var.get('require')(Js('./_enum-bug-keys')))
        var.put('IE_PROTO', var.get('require')(Js('./_shared-key'))(Js('IE_PROTO')))
        @Js
        def PyJs_Empty_252_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'Empty':PyJs_Empty_252_}, var)
            var.registers([])
            pass
        PyJs_Empty_252_._set_name('Empty')
        var.put('Empty', PyJs_Empty_252_)
        var.put('PROTOTYPE', Js('prototype'))
        @Js
        def PyJs_createDict_253_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'createDict':PyJs_createDict_253_}, var)
            var.registers(['lt', 'iframe', 'i', 'iframeDocument', 'gt'])
            var.put('iframe', var.get('require')(Js('./_dom-create'))(Js('iframe')))
            var.put('i', var.get('enumBugKeys').get('length'))
            var.put('lt', Js('<'))
            var.put('gt', Js('>'))
            pass
            var.get('iframe').get('style').put('display', Js('none'))
            var.get('require')(Js('./_html')).callprop('appendChild', var.get('iframe'))
            var.get('iframe').put('src', Js('javascript:'))
            var.put('iframeDocument', var.get('iframe').get('contentWindow').get('document'))
            var.get('iframeDocument').callprop('open')
            var.get('iframeDocument').callprop('write', ((((((var.get('lt')+Js('script'))+var.get('gt'))+Js('document.F=Object'))+var.get('lt'))+Js('/script'))+var.get('gt')))
            var.get('iframeDocument').callprop('close')
            var.put('_createDict', var.get('iframeDocument').get('F'))
            while (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1)):
                var.get('_createDict').get(var.get('PROTOTYPE')).delete(var.get('enumBugKeys').get(var.get('i')))
            return var.get('_createDict')()
        PyJs_createDict_253_._set_name('createDict')
        var.put('_createDict', PyJs_createDict_253_)
        @Js
        def PyJs_create_254_(O, Properties, this, arguments, var=var):
            var = Scope({'O':O, 'Properties':Properties, 'this':this, 'arguments':arguments, 'create':PyJs_create_254_}, var)
            var.registers(['Properties', 'O', 'result'])
            pass
            if PyJsStrictNeq(var.get('O'),var.get(u"null")):
                var.get('Empty').put(var.get('PROTOTYPE'), var.get('anObject')(var.get('O')))
                var.put('result', var.get('Empty').create())
                var.get('Empty').put(var.get('PROTOTYPE'), var.get(u"null"))
                var.get('result').put(var.get('IE_PROTO'), var.get('O'))
            else:
                var.put('result', var.get('_createDict')())
            return (var.get('result') if PyJsStrictEq(var.get('Properties'),var.get('undefined')) else var.get('dPs')(var.get('result'), var.get('Properties')))
        PyJs_create_254_._set_name('create')
        var.get('module').put('exports', (var.get('Object').get('create') or PyJs_create_254_))
    PyJs_anonymous_251_._set_name('anonymous')
    @Js
    def PyJs_anonymous_255_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toPrimitive', 'exports', 'module', 'IE8_DOM_DEFINE', 'dP', 'anObject'])
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('IE8_DOM_DEFINE', var.get('require')(Js('./_ie8-dom-define')))
        var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
        var.put('dP', var.get('Object').get('defineProperty'))
        @Js
        def PyJs_defineProperty_256_(O, P, Attributes, this, arguments, var=var):
            var = Scope({'O':O, 'P':P, 'Attributes':Attributes, 'this':this, 'arguments':arguments, 'defineProperty':PyJs_defineProperty_256_}, var)
            var.registers(['Attributes', 'O', 'P'])
            var.get('anObject')(var.get('O'))
            var.put('P', var.get('toPrimitive')(var.get('P'), Js(True)))
            var.get('anObject')(var.get('Attributes'))
            if var.get('IE8_DOM_DEFINE'):
                try:
                    return var.get('dP')(var.get('O'), var.get('P'), var.get('Attributes'))
                except PyJsException as PyJsTempException:
                    PyJsHolder_65_11894856 = var.own.get('e')
                    var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                    try:
                        pass
                    finally:
                        if PyJsHolder_65_11894856 is not None:
                            var.own['e'] = PyJsHolder_65_11894856
                        else:
                            del var.own['e']
                        del PyJsHolder_65_11894856
            if (var.get('Attributes').contains(Js('get')) or var.get('Attributes').contains(Js('set'))):
                PyJsTempException = JsToPyException(var.get('TypeError')(Js('Accessors not supported!')))
                raise PyJsTempException
            if var.get('Attributes').contains(Js('value')):
                var.get('O').put(var.get('P'), var.get('Attributes').get('value'))
            return var.get('O')
        PyJs_defineProperty_256_._set_name('defineProperty')
        var.get('exports').put('f', (var.get('Object').get('defineProperty') if var.get('require')(Js('./_descriptors')) else PyJs_defineProperty_256_))
    PyJs_anonymous_255_._set_name('anonymous')
    @Js
    def PyJs_anonymous_257_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'getKeys', 'exports', 'module', 'dP', 'anObject'])
        var.put('dP', var.get('require')(Js('./_object-dp')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('getKeys', var.get('require')(Js('./_object-keys')))
        @Js
        def PyJs_defineProperties_258_(O, Properties, this, arguments, var=var):
            var = Scope({'O':O, 'Properties':Properties, 'this':this, 'arguments':arguments, 'defineProperties':PyJs_defineProperties_258_}, var)
            var.registers(['keys', 'length', 'i', 'O', 'Properties', 'P'])
            var.get('anObject')(var.get('O'))
            var.put('keys', var.get('getKeys')(var.get('Properties')))
            var.put('length', var.get('keys').get('length'))
            var.put('i', Js(0.0))
            pass
            while (var.get('length')>var.get('i')):
                var.get('dP').callprop('f', var.get('O'), var.put('P', var.get('keys').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)))), var.get('Properties').get(var.get('P')))
            return var.get('O')
        PyJs_defineProperties_258_._set_name('defineProperties')
        var.get('module').put('exports', (var.get('Object').get('defineProperties') if var.get('require')(Js('./_descriptors')) else PyJs_defineProperties_258_))
    PyJs_anonymous_257_._set_name('anonymous')
    @Js
    def PyJs_anonymous_259_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_260_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['K'])
            var.put('K', var.get('Math').callprop('random'))
            @Js
            def PyJs_anonymous_261_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                pass
            PyJs_anonymous_261_._set_name('anonymous')
            var.get('__defineSetter__').callprop('call', var.get(u"null"), var.get('K'), PyJs_anonymous_261_)
            var.get('require')(Js('./_global')).delete(var.get('K'))
        PyJs_anonymous_260_._set_name('anonymous')
        var.get('module').put('exports', (var.get('require')(Js('./_library')) or var.get('require')(Js('./_fails'))(PyJs_anonymous_260_).neg()))
    PyJs_anonymous_259_._set_name('anonymous')
    @Js
    def PyJs_anonymous_262_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toPrimitive', 'toIObject', 'pIE', 'gOPD', 'exports', 'module', 'IE8_DOM_DEFINE', 'createDesc', 'has'])
        var.put('pIE', var.get('require')(Js('./_object-pie')))
        var.put('createDesc', var.get('require')(Js('./_property-desc')))
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
        var.put('has', var.get('require')(Js('./_has')))
        var.put('IE8_DOM_DEFINE', var.get('require')(Js('./_ie8-dom-define')))
        var.put('gOPD', var.get('Object').get('getOwnPropertyDescriptor'))
        @Js
        def PyJs_getOwnPropertyDescriptor_263_(O, P, this, arguments, var=var):
            var = Scope({'O':O, 'P':P, 'this':this, 'arguments':arguments, 'getOwnPropertyDescriptor':PyJs_getOwnPropertyDescriptor_263_}, var)
            var.registers(['O', 'P'])
            var.put('O', var.get('toIObject')(var.get('O')))
            var.put('P', var.get('toPrimitive')(var.get('P'), Js(True)))
            if var.get('IE8_DOM_DEFINE'):
                try:
                    return var.get('gOPD')(var.get('O'), var.get('P'))
                except PyJsException as PyJsTempException:
                    PyJsHolder_65_76815022 = var.own.get('e')
                    var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                    try:
                        pass
                    finally:
                        if PyJsHolder_65_76815022 is not None:
                            var.own['e'] = PyJsHolder_65_76815022
                        else:
                            del var.own['e']
                        del PyJsHolder_65_76815022
            if var.get('has')(var.get('O'), var.get('P')):
                return var.get('createDesc')(var.get('pIE').get('f').callprop('call', var.get('O'), var.get('P')).neg(), var.get('O').get(var.get('P')))
        PyJs_getOwnPropertyDescriptor_263_._set_name('getOwnPropertyDescriptor')
        var.get('exports').put('f', (var.get('gOPD') if var.get('require')(Js('./_descriptors')) else PyJs_getOwnPropertyDescriptor_263_))
    PyJs_anonymous_262_._set_name('anonymous')
    @Js
    def PyJs_anonymous_264_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'windowNames', 'toIObject', 'gOPN', 'toString', 'exports', 'module', 'getWindowNames'])
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('gOPN', var.get('require')(Js('./_object-gopn')).get('f'))
        var.put('toString', Js({}).get('toString'))
        var.put('windowNames', (var.get('Object').callprop('getOwnPropertyNames', var.get('window')) if ((((Js('undefined') if PyJsStrictEq(var.get('window',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('window')))==Js('object')) and var.get('window')) and var.get('Object').get('getOwnPropertyNames')) else Js([])))
        @Js
        def PyJs_getWindowNames_265_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'getWindowNames':PyJs_getWindowNames_265_}, var)
            var.registers(['it'])
            try:
                return var.get('gOPN')(var.get('it'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_13208127 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    return var.get('windowNames').callprop('slice')
                finally:
                    if PyJsHolder_65_13208127 is not None:
                        var.own['e'] = PyJsHolder_65_13208127
                    else:
                        del var.own['e']
                    del PyJsHolder_65_13208127
        PyJs_getWindowNames_265_._set_name('getWindowNames')
        var.put('getWindowNames', PyJs_getWindowNames_265_)
        @Js
        def PyJs_getOwnPropertyNames_266_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'getOwnPropertyNames':PyJs_getOwnPropertyNames_266_}, var)
            var.registers(['it'])
            return (var.get('getWindowNames')(var.get('it')) if (var.get('windowNames') and (var.get('toString').callprop('call', var.get('it'))==Js('[object Window]'))) else var.get('gOPN')(var.get('toIObject')(var.get('it'))))
        PyJs_getOwnPropertyNames_266_._set_name('getOwnPropertyNames')
        var.get('module').get('exports').put('f', PyJs_getOwnPropertyNames_266_)
    PyJs_anonymous_264_._set_name('anonymous')
    @Js
    def PyJs_anonymous_267_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$keys', 'exports', 'module', 'hiddenKeys'])
        var.put('$keys', var.get('require')(Js('./_object-keys-internal')))
        var.put('hiddenKeys', var.get('require')(Js('./_enum-bug-keys')).callprop('concat', Js('length'), Js('prototype')))
        @Js
        def PyJs_getOwnPropertyNames_268_(O, this, arguments, var=var):
            var = Scope({'O':O, 'this':this, 'arguments':arguments, 'getOwnPropertyNames':PyJs_getOwnPropertyNames_268_}, var)
            var.registers(['O'])
            return var.get('$keys')(var.get('O'), var.get('hiddenKeys'))
        PyJs_getOwnPropertyNames_268_._set_name('getOwnPropertyNames')
        var.get('exports').put('f', (var.get('Object').get('getOwnPropertyNames') or PyJs_getOwnPropertyNames_268_))
    PyJs_anonymous_267_._set_name('anonymous')
    @Js
    def PyJs_anonymous_269_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('exports').put('f', var.get('Object').get('getOwnPropertySymbols'))
    PyJs_anonymous_269_._set_name('anonymous')
    @Js
    def PyJs_anonymous_270_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'IE_PROTO', 'toObject', 'exports', 'module', 'ObjectProto', 'has'])
        var.put('has', var.get('require')(Js('./_has')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('IE_PROTO', var.get('require')(Js('./_shared-key'))(Js('IE_PROTO')))
        var.put('ObjectProto', var.get('Object').get('prototype'))
        @Js
        def PyJs_anonymous_271_(O, this, arguments, var=var):
            var = Scope({'O':O, 'this':this, 'arguments':arguments}, var)
            var.registers(['O'])
            var.put('O', var.get('toObject')(var.get('O')))
            if var.get('has')(var.get('O'), var.get('IE_PROTO')):
                return var.get('O').get(var.get('IE_PROTO'))
            if ((var.get('O').get('constructor').typeof()==Js('function')) and var.get('O').instanceof(var.get('O').get('constructor'))):
                return var.get('O').get('constructor').get('prototype')
            return (var.get('ObjectProto') if var.get('O').instanceof(var.get('Object')) else var.get(u"null"))
        PyJs_anonymous_271_._set_name('anonymous')
        var.get('module').put('exports', (var.get('Object').get('getPrototypeOf') or PyJs_anonymous_271_))
    PyJs_anonymous_270_._set_name('anonymous')
    @Js
    def PyJs_anonymous_272_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'IE_PROTO', 'arrayIndexOf', 'toIObject', 'exports', 'module', 'has'])
        var.put('has', var.get('require')(Js('./_has')))
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('arrayIndexOf', var.get('require')(Js('./_array-includes'))(Js(False)))
        var.put('IE_PROTO', var.get('require')(Js('./_shared-key'))(Js('IE_PROTO')))
        @Js
        def PyJs_anonymous_273_(object, names, this, arguments, var=var):
            var = Scope({'object':object, 'names':names, 'this':this, 'arguments':arguments}, var)
            var.registers(['object', 'i', 'O', 'result', 'key', 'names'])
            var.put('O', var.get('toIObject')(var.get('object')))
            var.put('i', Js(0.0))
            var.put('result', Js([]))
            pass
            for PyJsTemp in var.get('O'):
                var.put('key', PyJsTemp)
                if (var.get('key')!=var.get('IE_PROTO')):
                    (var.get('has')(var.get('O'), var.get('key')) and var.get('result').callprop('push', var.get('key')))
            while (var.get('names').get('length')>var.get('i')):
                if var.get('has')(var.get('O'), var.put('key', var.get('names').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))):
                    ((~var.get('arrayIndexOf')(var.get('result'), var.get('key'))) or var.get('result').callprop('push', var.get('key')))
            return var.get('result')
        PyJs_anonymous_273_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_273_)
    PyJs_anonymous_272_._set_name('anonymous')
    @Js
    def PyJs_anonymous_274_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'enumBugKeys', '$keys', 'exports', 'module'])
        var.put('$keys', var.get('require')(Js('./_object-keys-internal')))
        var.put('enumBugKeys', var.get('require')(Js('./_enum-bug-keys')))
        @Js
        def PyJs_keys_275_(O, this, arguments, var=var):
            var = Scope({'O':O, 'this':this, 'arguments':arguments, 'keys':PyJs_keys_275_}, var)
            var.registers(['O'])
            return var.get('$keys')(var.get('O'), var.get('enumBugKeys'))
        PyJs_keys_275_._set_name('keys')
        var.get('module').put('exports', (var.get('Object').get('keys') or PyJs_keys_275_))
    PyJs_anonymous_274_._set_name('anonymous')
    @Js
    def PyJs_anonymous_276_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('exports').put('f', Js({}).get('propertyIsEnumerable'))
    PyJs_anonymous_276_._set_name('anonymous')
    @Js
    def PyJs_anonymous_277_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['core', 'require', '$export', 'exports', 'module', 'fails'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('core', var.get('require')(Js('./_core')))
        var.put('fails', var.get('require')(Js('./_fails')))
        @Js
        def PyJs_anonymous_278_(KEY, exec, this, arguments, var=var):
            var = Scope({'KEY':KEY, 'exec':exec, 'this':this, 'arguments':arguments}, var)
            var.registers(['exp', 'exec', 'fn', 'KEY'])
            var.put('fn', ((var.get('core').get('Object') or Js({})).get(var.get('KEY')) or var.get('Object').get(var.get('KEY'))))
            var.put('exp', Js({}))
            var.get('exp').put(var.get('KEY'), var.get('exec')(var.get('fn')))
            @Js
            def PyJs_anonymous_279_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('fn')(Js(1.0))
            PyJs_anonymous_279_._set_name('anonymous')
            var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('fails')(PyJs_anonymous_279_))), Js('Object'), var.get('exp'))
        PyJs_anonymous_278_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_278_)
    PyJs_anonymous_277_._set_name('anonymous')
    @Js
    def PyJs_anonymous_280_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'getKeys', 'toIObject', 'DESCRIPTORS', 'exports', 'module', 'isEnum'])
        var.put('DESCRIPTORS', var.get('require')(Js('./_descriptors')))
        var.put('getKeys', var.get('require')(Js('./_object-keys')))
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('isEnum', var.get('require')(Js('./_object-pie')).get('f'))
        @Js
        def PyJs_anonymous_281_(isEntries, this, arguments, var=var):
            var = Scope({'isEntries':isEntries, 'this':this, 'arguments':arguments}, var)
            var.registers(['isEntries'])
            @Js
            def PyJs_anonymous_282_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
                var.registers(['it', 'length', 'i', 'O', 'result', 'key', 'keys'])
                var.put('O', var.get('toIObject')(var.get('it')))
                var.put('keys', var.get('getKeys')(var.get('O')))
                var.put('length', var.get('keys').get('length'))
                var.put('i', Js(0.0))
                var.put('result', Js([]))
                pass
                while (var.get('length')>var.get('i')):
                    var.put('key', var.get('keys').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
                    if (var.get('DESCRIPTORS').neg() or var.get('isEnum').callprop('call', var.get('O'), var.get('key'))):
                        var.get('result').callprop('push', (Js([var.get('key'), var.get('O').get(var.get('key'))]) if var.get('isEntries') else var.get('O').get(var.get('key'))))
                return var.get('result')
            PyJs_anonymous_282_._set_name('anonymous')
            return PyJs_anonymous_282_
        PyJs_anonymous_281_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_281_)
    PyJs_anonymous_280_._set_name('anonymous')
    @Js
    def PyJs_anonymous_283_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'Reflect', 'gOPN', 'gOPS', 'exports', 'module', 'anObject'])
        var.put('gOPN', var.get('require')(Js('./_object-gopn')))
        var.put('gOPS', var.get('require')(Js('./_object-gops')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('Reflect', var.get('require')(Js('./_global')).get('Reflect'))
        @Js
        def PyJs_ownKeys_284_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'ownKeys':PyJs_ownKeys_284_}, var)
            var.registers(['it', 'getSymbols', 'keys'])
            var.put('keys', var.get('gOPN').callprop('f', var.get('anObject')(var.get('it'))))
            var.put('getSymbols', var.get('gOPS').get('f'))
            return (var.get('keys').callprop('concat', var.get('getSymbols')(var.get('it'))) if var.get('getSymbols') else var.get('keys'))
        PyJs_ownKeys_284_._set_name('ownKeys')
        var.get('module').put('exports', ((var.get('Reflect') and var.get('Reflect').get('ownKeys')) or PyJs_ownKeys_284_))
    PyJs_anonymous_283_._set_name('anonymous')
    @Js
    def PyJs_anonymous_285_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$parseFloat', 'exports', 'module', '$trim'])
        var.put('$parseFloat', var.get('require')(Js('./_global')).get('parseFloat'))
        var.put('$trim', var.get('require')(Js('./_string-trim')).get('trim'))
        @Js
        def PyJs_parseFloat_286_(str, this, arguments, var=var):
            var = Scope({'str':str, 'this':this, 'arguments':arguments, 'parseFloat':PyJs_parseFloat_286_}, var)
            var.registers(['str', 'string', 'result'])
            var.put('string', var.get('$trim')(var.get('String')(var.get('str')), Js(3.0)))
            var.put('result', var.get('$parseFloat')(var.get('string')))
            return ((-Js(0.0)) if (PyJsStrictEq(var.get('result'),Js(0.0)) and (var.get('string').callprop('charAt', Js(0.0))==Js('-'))) else var.get('result'))
        PyJs_parseFloat_286_._set_name('parseFloat')
        var.get('module').put('exports', (PyJs_parseFloat_286_ if PyJsStrictNeq((Js(1.0)/var.get('$parseFloat')((var.get('require')(Js('./_string-ws'))+Js('-0')))),(-var.get('Infinity'))) else var.get('$parseFloat')))
    PyJs_anonymous_285_._set_name('anonymous')
    @Js
    def PyJs_anonymous_287_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'hex', '$parseInt', 'ws', 'exports', 'module', '$trim'])
        var.put('$parseInt', var.get('require')(Js('./_global')).get('parseInt'))
        var.put('$trim', var.get('require')(Js('./_string-trim')).get('trim'))
        var.put('ws', var.get('require')(Js('./_string-ws')))
        var.put('hex', JsRegExp('/^[-+]?0[xX]/'))
        @Js
        def PyJs_parseInt_288_(str, radix, this, arguments, var=var):
            var = Scope({'str':str, 'radix':radix, 'this':this, 'arguments':arguments, 'parseInt':PyJs_parseInt_288_}, var)
            var.registers(['str', 'string', 'radix'])
            var.put('string', var.get('$trim')(var.get('String')(var.get('str')), Js(3.0)))
            return var.get('$parseInt')(var.get('string'), (PyJsBshift(var.get('radix'),Js(0.0)) or (Js(16.0) if var.get('hex').callprop('test', var.get('string')) else Js(10.0))))
        PyJs_parseInt_288_._set_name('parseInt')
        var.get('module').put('exports', (PyJs_parseInt_288_ if (PyJsStrictNeq(var.get('$parseInt')((var.get('ws')+Js('08'))),Js(8.0)) or PyJsStrictNeq(var.get('$parseInt')((var.get('ws')+Js('0x16'))),Js(22.0))) else var.get('$parseInt')))
    PyJs_anonymous_287_._set_name('anonymous')
    @Js
    def PyJs_anonymous_289_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_290_(exec, this, arguments, var=var):
            var = Scope({'exec':exec, 'this':this, 'arguments':arguments}, var)
            var.registers(['exec'])
            try:
                return Js({'e':Js(False),'v':var.get('exec')()})
            except PyJsException as PyJsTempException:
                PyJsHolder_65_99823992 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    return Js({'e':Js(True),'v':var.get('e')})
                finally:
                    if PyJsHolder_65_99823992 is not None:
                        var.own['e'] = PyJsHolder_65_99823992
                    else:
                        del var.own['e']
                    del PyJsHolder_65_99823992
        PyJs_anonymous_290_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_290_)
    PyJs_anonymous_289_._set_name('anonymous')
    @Js
    def PyJs_anonymous_291_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'exports', 'module', 'newPromiseCapability', 'isObject', 'anObject'])
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('newPromiseCapability', var.get('require')(Js('./_new-promise-capability')))
        @Js
        def PyJs_anonymous_292_(C, x, this, arguments, var=var):
            var = Scope({'C':C, 'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['C', 'x', 'promiseCapability', 'resolve'])
            var.get('anObject')(var.get('C'))
            if (var.get('isObject')(var.get('x')) and PyJsStrictEq(var.get('x').get('constructor'),var.get('C'))):
                return var.get('x')
            var.put('promiseCapability', var.get('newPromiseCapability').callprop('f', var.get('C')))
            var.put('resolve', var.get('promiseCapability').get('resolve'))
            var.get('resolve')(var.get('x'))
            return var.get('promiseCapability').get('promise')
        PyJs_anonymous_292_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_292_)
    PyJs_anonymous_291_._set_name('anonymous')
    @Js
    def PyJs_anonymous_293_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_294_(bitmap, value, this, arguments, var=var):
            var = Scope({'bitmap':bitmap, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value', 'bitmap'])
            return Js({'enumerable':(var.get('bitmap')&Js(1.0)).neg(),'configurable':(var.get('bitmap')&Js(2.0)).neg(),'writable':(var.get('bitmap')&Js(4.0)).neg(),'value':var.get('value')})
        PyJs_anonymous_294_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_294_)
    PyJs_anonymous_293_._set_name('anonymous')
    @Js
    def PyJs_anonymous_295_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'redefine', 'module', 'exports'])
        var.put('redefine', var.get('require')(Js('./_redefine')))
        @Js
        def PyJs_anonymous_296_(target, src, safe, this, arguments, var=var):
            var = Scope({'target':target, 'src':src, 'safe':safe, 'this':this, 'arguments':arguments}, var)
            var.registers(['target', 'src', 'key', 'safe'])
            for PyJsTemp in var.get('src'):
                var.put('key', PyJsTemp)
                var.get('redefine')(var.get('target'), var.get('key'), var.get('src').get(var.get('key')), var.get('safe'))
            return var.get('target')
        PyJs_anonymous_296_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_296_)
    PyJs_anonymous_295_._set_name('anonymous')
    @Js
    def PyJs_anonymous_297_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'has', 'hide', 'TPL', 'exports', 'module', 'TO_STRING', 'global', '$toString', 'SRC'])
        var.put('global', var.get('require')(Js('./_global')))
        var.put('hide', var.get('require')(Js('./_hide')))
        var.put('has', var.get('require')(Js('./_has')))
        var.put('SRC', var.get('require')(Js('./_uid'))(Js('src')))
        var.put('$toString', var.get('require')(Js('./_function-to-string')))
        var.put('TO_STRING', Js('toString'))
        var.put('TPL', (Js('')+var.get('$toString')).callprop('split', var.get('TO_STRING')))
        @Js
        def PyJs_anonymous_298_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return var.get('$toString').callprop('call', var.get('it'))
        PyJs_anonymous_298_._set_name('anonymous')
        var.get('require')(Js('./_core')).put('inspectSource', PyJs_anonymous_298_)
        @Js
        def PyJs_toString_299_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'toString':PyJs_toString_299_}, var)
            var.registers([])
            return (((var.get(u"this",throw=False).typeof()==Js('function')) and var.get(u"this").get(var.get('SRC'))) or var.get('$toString').callprop('call', var.get(u"this")))
        PyJs_toString_299_._set_name('toString')
        @Js
        def PyJs_anonymous_300_(O, key, val, safe, this, arguments, var=var):
            var = Scope({'O':O, 'key':key, 'val':val, 'safe':safe, 'this':this, 'arguments':arguments}, var)
            var.registers(['isFunction', 'safe', 'val', 'O', 'key'])
            var.put('isFunction', (var.get('val',throw=False).typeof()==Js('function')))
            if var.get('isFunction'):
                (var.get('has')(var.get('val'), Js('name')) or var.get('hide')(var.get('val'), Js('name'), var.get('key')))
            if PyJsStrictEq(var.get('O').get(var.get('key')),var.get('val')):
                return var.get('undefined')
            if var.get('isFunction'):
                (var.get('has')(var.get('val'), var.get('SRC')) or var.get('hide')(var.get('val'), var.get('SRC'), ((Js('')+var.get('O').get(var.get('key'))) if var.get('O').get(var.get('key')) else var.get('TPL').callprop('join', var.get('String')(var.get('key'))))))
            if PyJsStrictEq(var.get('O'),var.get('global')):
                var.get('O').put(var.get('key'), var.get('val'))
            else:
                if var.get('safe').neg():
                    var.get('O').delete(var.get('key'))
                    var.get('hide')(var.get('O'), var.get('key'), var.get('val'))
                else:
                    if var.get('O').get(var.get('key')):
                        var.get('O').put(var.get('key'), var.get('val'))
                    else:
                        var.get('hide')(var.get('O'), var.get('key'), var.get('val'))
        PyJs_anonymous_300_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_300_)(var.get('Function').get('prototype'), var.get('TO_STRING'), PyJs_toString_299_)
    PyJs_anonymous_297_._set_name('anonymous')
    @Js
    def PyJs_anonymous_301_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'builtinExec', 'classof', 'exports', 'module'])
        Js('use strict')
        var.put('classof', var.get('require')(Js('./_classof')))
        var.put('builtinExec', var.get('RegExp').get('prototype').get('exec'))
        @Js
        def PyJs_anonymous_302_(R, S, this, arguments, var=var):
            var = Scope({'R':R, 'S':S, 'this':this, 'arguments':arguments}, var)
            var.registers(['result', 'exec', 'S', 'R'])
            var.put('exec', var.get('R').get('exec'))
            if PyJsStrictEq(var.get('exec',throw=False).typeof(),Js('function')):
                var.put('result', var.get('exec').callprop('call', var.get('R'), var.get('S')))
                if PyJsStrictNeq((Js('undefined') if PyJsStrictEq(var.get('result',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('result'))),Js('object')):
                    PyJsTempException = JsToPyException(var.get('TypeError').create(Js('RegExp exec method returned something other than an Object or null')))
                    raise PyJsTempException
                return var.get('result')
            if PyJsStrictNeq(var.get('classof')(var.get('R')),Js('RegExp')):
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('RegExp#exec called on incompatible receiver')))
                raise PyJsTempException
            return var.get('builtinExec').callprop('call', var.get('R'), var.get('S'))
        PyJs_anonymous_302_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_302_)
    PyJs_anonymous_301_._set_name('anonymous')
    @Js
    def PyJs_anonymous_303_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'UPDATES_LAST_INDEX_WRONG', 'regexpFlags', 'NPCG_INCLUDED', 'nativeExec', 'PATCH', 'nativeReplace', 'exports', 'LAST_INDEX', 'module', 'patchedExec'])
        Js('use strict')
        var.put('regexpFlags', var.get('require')(Js('./_flags')))
        var.put('nativeExec', var.get('RegExp').get('prototype').get('exec'))
        var.put('nativeReplace', var.get('String').get('prototype').get('replace'))
        var.put('patchedExec', var.get('nativeExec'))
        var.put('LAST_INDEX', Js('lastIndex'))
        @Js
        def PyJs_anonymous_304_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['re2', 're1'])
            var.put('re1', JsRegExp('/a/'))
            var.put('re2', JsRegExp('/b*/g'))
            var.get('nativeExec').callprop('call', var.get('re1'), Js('a'))
            var.get('nativeExec').callprop('call', var.get('re2'), Js('a'))
            return (PyJsStrictNeq(var.get('re1').get(var.get('LAST_INDEX')),Js(0.0)) or PyJsStrictNeq(var.get('re2').get(var.get('LAST_INDEX')),Js(0.0)))
        PyJs_anonymous_304_._set_name('anonymous')
        var.put('UPDATES_LAST_INDEX_WRONG', PyJs_anonymous_304_())
        var.put('NPCG_INCLUDED', PyJsStrictNeq(JsRegExp('/()??/').callprop('exec', Js('')).get('1'),var.get('undefined')))
        var.put('PATCH', (var.get('UPDATES_LAST_INDEX_WRONG') or var.get('NPCG_INCLUDED')))
        if var.get('PATCH'):
            @Js
            def PyJs_exec_305_(str, this, arguments, var=var):
                var = Scope({'str':str, 'this':this, 'arguments':arguments, 'exec':PyJs_exec_305_}, var)
                var.registers(['reCopy', 'str', 're', 'i', 'match', 'lastIndex'])
                var.put('re', var.get(u"this"))
                pass
                if var.get('NPCG_INCLUDED'):
                    var.put('reCopy', var.get('RegExp').create(((Js('^')+var.get('re').get('source'))+Js('$(?!\\s)')), var.get('regexpFlags').callprop('call', var.get('re'))))
                if var.get('UPDATES_LAST_INDEX_WRONG'):
                    var.put('lastIndex', var.get('re').get(var.get('LAST_INDEX')))
                var.put('match', var.get('nativeExec').callprop('call', var.get('re'), var.get('str')))
                if (var.get('UPDATES_LAST_INDEX_WRONG') and var.get('match')):
                    var.get('re').put(var.get('LAST_INDEX'), ((var.get('match').get('index')+var.get('match').get('0').get('length')) if var.get('re').get('global') else var.get('lastIndex')))
                if ((var.get('NPCG_INCLUDED') and var.get('match')) and (var.get('match').get('length')>Js(1.0))):
                    @Js
                    def PyJs_anonymous_306_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        #for JS loop
                        var.put('i', Js(1.0))
                        while (var.get('i')<(var.get('arguments').get('length')-Js(2.0))):
                            try:
                                if PyJsStrictEq(var.get('arguments').get(var.get('i')),var.get('undefined')):
                                    var.get('match').put(var.get('i'), var.get('undefined'))
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    PyJs_anonymous_306_._set_name('anonymous')
                    var.get('nativeReplace').callprop('call', var.get('match').get('0'), var.get('reCopy'), PyJs_anonymous_306_)
                return var.get('match')
            PyJs_exec_305_._set_name('exec')
            var.put('patchedExec', PyJs_exec_305_)
        var.get('module').put('exports', var.get('patchedExec'))
    PyJs_anonymous_303_._set_name('anonymous')
    @Js
    def PyJs_anonymous_307_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_308_(regExp, replace, this, arguments, var=var):
            var = Scope({'regExp':regExp, 'replace':replace, 'this':this, 'arguments':arguments}, var)
            var.registers(['replacer', 'replace', 'regExp'])
            @Js
            def PyJs_anonymous_309_(part, this, arguments, var=var):
                var = Scope({'part':part, 'this':this, 'arguments':arguments}, var)
                var.registers(['part'])
                return var.get('replace').get(var.get('part'))
            PyJs_anonymous_309_._set_name('anonymous')
            var.put('replacer', (PyJs_anonymous_309_ if PyJsStrictEq(var.get('replace'),var.get('Object')(var.get('replace'))) else var.get('replace')))
            @Js
            def PyJs_anonymous_310_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
                var.registers(['it'])
                return var.get('String')(var.get('it')).callprop('replace', var.get('regExp'), var.get('replacer'))
            PyJs_anonymous_310_._set_name('anonymous')
            return PyJs_anonymous_310_
        PyJs_anonymous_308_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_308_)
    PyJs_anonymous_307_._set_name('anonymous')
    @Js
    def PyJs_anonymous_311_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_InlineNonPyName_312_(x, y, this, arguments, var=var):
            var = Scope({'x':x, 'y':y, 'this':this, 'arguments':arguments, 'is':PyJs_InlineNonPyName_312_}, var)
            var.registers(['x', 'y'])
            return ((PyJsStrictNeq(var.get('x'),Js(0.0)) or PyJsStrictEq((Js(1.0)/var.get('x')),(Js(1.0)/var.get('y')))) if PyJsStrictEq(var.get('x'),var.get('y')) else ((var.get('x')!=var.get('x')) and (var.get('y')!=var.get('y'))))
        PyJs_InlineNonPyName_312_._set_name('is')
        var.get('module').put('exports', (var.get('Object').get('is') or PyJs_InlineNonPyName_312_))
    PyJs_anonymous_311_._set_name('anonymous')
    @Js
    def PyJs_anonymous_313_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['aFunction', 'require', '$export', 'exports', 'module', 'forOf', 'ctx'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('forOf', var.get('require')(Js('./_for-of')))
        @Js
        def PyJs_anonymous_314_(COLLECTION, this, arguments, var=var):
            var = Scope({'COLLECTION':COLLECTION, 'this':this, 'arguments':arguments}, var)
            var.registers(['COLLECTION'])
            @Js
            def PyJs_InlineNonPyName_315_(source, this, arguments, var=var):
                var = Scope({'source':source, 'this':this, 'arguments':arguments, 'from':PyJs_InlineNonPyName_315_}, var)
                var.registers(['mapFn', 'cb', 'n', 'A', 'source', 'mapping'])
                var.put('mapFn', var.get('arguments').get('1'))
                pass
                var.get('aFunction')(var.get(u"this"))
                var.put('mapping', PyJsStrictNeq(var.get('mapFn'),var.get('undefined')))
                if var.get('mapping'):
                    var.get('aFunction')(var.get('mapFn'))
                if (var.get('source')==var.get('undefined')):
                    return var.get(u"this").create()
                var.put('A', Js([]))
                if var.get('mapping'):
                    var.put('n', Js(0.0))
                    var.put('cb', var.get('ctx')(var.get('mapFn'), var.get('arguments').get('2'), Js(2.0)))
                    @Js
                    def PyJs_anonymous_316_(nextItem, this, arguments, var=var):
                        var = Scope({'nextItem':nextItem, 'this':this, 'arguments':arguments}, var)
                        var.registers(['nextItem'])
                        var.get('A').callprop('push', var.get('cb')(var.get('nextItem'), (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))))
                    PyJs_anonymous_316_._set_name('anonymous')
                    var.get('forOf')(var.get('source'), Js(False), PyJs_anonymous_316_)
                else:
                    var.get('forOf')(var.get('source'), Js(False), var.get('A').get('push'), var.get('A'))
                return var.get(u"this").create(var.get('A'))
            PyJs_InlineNonPyName_315_._set_name('from')
            var.get('$export')(var.get('$export').get('S'), var.get('COLLECTION'), Js({'from':PyJs_InlineNonPyName_315_}))
        PyJs_anonymous_314_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_314_)
    PyJs_anonymous_313_._set_name('anonymous')
    @Js
    def PyJs_anonymous_317_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_anonymous_318_(COLLECTION, this, arguments, var=var):
            var = Scope({'COLLECTION':COLLECTION, 'this':this, 'arguments':arguments}, var)
            var.registers(['COLLECTION'])
            @Js
            def PyJs_of_319_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'of':PyJs_of_319_}, var)
                var.registers(['length', 'A'])
                var.put('length', var.get('arguments').get('length'))
                var.put('A', var.get('Array').create(var.get('length')))
                while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
                    var.get('A').put(var.get('length'), var.get('arguments').get(var.get('length')))
                return var.get(u"this").create(var.get('A'))
            PyJs_of_319_._set_name('of')
            var.get('$export')(var.get('$export').get('S'), var.get('COLLECTION'), Js({'of':PyJs_of_319_}))
        PyJs_anonymous_318_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_318_)
    PyJs_anonymous_317_._set_name('anonymous')
    @Js
    def PyJs_anonymous_320_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'exports', 'module', 'check', 'isObject', 'anObject'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        @Js
        def PyJs_check_321_(O, proto, this, arguments, var=var):
            var = Scope({'O':O, 'proto':proto, 'this':this, 'arguments':arguments, 'check':PyJs_check_321_}, var)
            var.registers(['O', 'proto'])
            var.get('anObject')(var.get('O'))
            if (var.get('isObject')(var.get('proto')).neg() and PyJsStrictNeq(var.get('proto'),var.get(u"null"))):
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('proto')+Js(": can't set as prototype!"))))
                raise PyJsTempException
        PyJs_check_321_._set_name('check')
        var.put('check', PyJs_check_321_)
        @Js
        def PyJs_anonymous_322_(test, buggy, set, this, arguments, var=var):
            var = Scope({'test':test, 'buggy':buggy, 'set':set, 'this':this, 'arguments':arguments}, var)
            var.registers(['set', 'test', 'buggy'])
            try:
                var.put('set', var.get('require')(Js('./_ctx'))(var.get('Function').get('call'), var.get('require')(Js('./_object-gopd')).callprop('f', var.get('Object').get('prototype'), Js('__proto__')).get('set'), Js(2.0)))
                var.get('set')(var.get('test'), Js([]))
                var.put('buggy', var.get('test').instanceof(var.get('Array')).neg())
            except PyJsException as PyJsTempException:
                PyJsHolder_65_28858745 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('buggy', Js(True))
                finally:
                    if PyJsHolder_65_28858745 is not None:
                        var.own['e'] = PyJsHolder_65_28858745
                    else:
                        del var.own['e']
                    del PyJsHolder_65_28858745
            @Js
            def PyJs_setPrototypeOf_323_(O, proto, this, arguments, var=var):
                var = Scope({'O':O, 'proto':proto, 'this':this, 'arguments':arguments, 'setPrototypeOf':PyJs_setPrototypeOf_323_}, var)
                var.registers(['O', 'proto'])
                var.get('check')(var.get('O'), var.get('proto'))
                if var.get('buggy'):
                    var.get('O').put('__proto__', var.get('proto'))
                else:
                    var.get('set')(var.get('O'), var.get('proto'))
                return var.get('O')
            PyJs_setPrototypeOf_323_._set_name('setPrototypeOf')
            return PyJs_setPrototypeOf_323_
        PyJs_anonymous_322_._set_name('anonymous')
        var.get('module').put('exports', Js({'set':(var.get('Object').get('setPrototypeOf') or (PyJs_anonymous_322_(Js({}), Js(False)) if Js({}).contains(Js('__proto__')) else var.get('undefined'))),'check':var.get('check')}))
    PyJs_anonymous_320_._set_name('anonymous')
    @Js
    def PyJs_anonymous_324_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'SPECIES', 'DESCRIPTORS', 'exports', 'module', 'global', 'dP'])
        Js('use strict')
        var.put('global', var.get('require')(Js('./_global')))
        var.put('dP', var.get('require')(Js('./_object-dp')))
        var.put('DESCRIPTORS', var.get('require')(Js('./_descriptors')))
        var.put('SPECIES', var.get('require')(Js('./_wks'))(Js('species')))
        @Js
        def PyJs_anonymous_325_(KEY, this, arguments, var=var):
            var = Scope({'KEY':KEY, 'this':this, 'arguments':arguments}, var)
            var.registers(['C', 'KEY'])
            var.put('C', var.get('global').get(var.get('KEY')))
            if ((var.get('DESCRIPTORS') and var.get('C')) and var.get('C').get(var.get('SPECIES')).neg()):
                @Js
                def PyJs_get_326_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_326_}, var)
                    var.registers([])
                    return var.get(u"this")
                PyJs_get_326_._set_name('get')
                var.get('dP').callprop('f', var.get('C'), var.get('SPECIES'), Js({'configurable':Js(True),'get':PyJs_get_326_}))
        PyJs_anonymous_325_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_325_)
    PyJs_anonymous_324_._set_name('anonymous')
    @Js
    def PyJs_anonymous_327_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'def', 'TAG', 'exports', 'module', 'has'])
        var.put('def', var.get('require')(Js('./_object-dp')).get('f'))
        var.put('has', var.get('require')(Js('./_has')))
        var.put('TAG', var.get('require')(Js('./_wks'))(Js('toStringTag')))
        @Js
        def PyJs_anonymous_328_(it, tag, stat, this, arguments, var=var):
            var = Scope({'it':it, 'tag':tag, 'stat':stat, 'this':this, 'arguments':arguments}, var)
            var.registers(['it', 'tag', 'stat'])
            if (var.get('it') and var.get('has')(var.put('it', (var.get('it') if var.get('stat') else var.get('it').get('prototype'))), var.get('TAG')).neg()):
                var.get('def')(var.get('it'), var.get('TAG'), Js({'configurable':Js(True),'value':var.get('tag')}))
        PyJs_anonymous_328_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_328_)
    PyJs_anonymous_327_._set_name('anonymous')
    @Js
    def PyJs_anonymous_329_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'exports', 'shared', 'uid', 'module'])
        var.put('shared', var.get('require')(Js('./_shared'))(Js('keys')))
        var.put('uid', var.get('require')(Js('./_uid')))
        @Js
        def PyJs_anonymous_330_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
            var.registers(['key'])
            return (var.get('shared').get(var.get('key')) or var.get('shared').put(var.get('key'), var.get('uid')(var.get('key'))))
        PyJs_anonymous_330_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_330_)
    PyJs_anonymous_329_._set_name('anonymous')
    @Js
    def PyJs_anonymous_331_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['core', 'require', 'SHARED', 'exports', 'store', 'module', 'global'])
        var.put('core', var.get('require')(Js('./_core')))
        var.put('global', var.get('require')(Js('./_global')))
        var.put('SHARED', Js('__core-js_shared__'))
        var.put('store', (var.get('global').get(var.get('SHARED')) or var.get('global').put(var.get('SHARED'), Js({}))))
        @Js
        def PyJs_anonymous_332_(key, value, this, arguments, var=var):
            var = Scope({'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value', 'key'])
            return (var.get('store').get(var.get('key')) or var.get('store').put(var.get('key'), (var.get('value') if PyJsStrictNeq(var.get('value'),var.get('undefined')) else Js({}))))
        PyJs_anonymous_332_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_332_)(Js('versions'), Js([])).callprop('push', Js({'version':var.get('core').get('version'),'mode':(Js('pure') if var.get('require')(Js('./_library')) else Js('global')),'copyright':Js('© 2020 Denis Pushkarev (zloirock.ru)')}))
    PyJs_anonymous_331_._set_name('anonymous')
    @Js
    def PyJs_anonymous_333_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['aFunction', 'require', 'SPECIES', 'exports', 'module', 'anObject'])
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('SPECIES', var.get('require')(Js('./_wks'))(Js('species')))
        @Js
        def PyJs_anonymous_334_(O, D, this, arguments, var=var):
            var = Scope({'O':O, 'D':D, 'this':this, 'arguments':arguments}, var)
            var.registers(['O', 'C', 'D', 'S'])
            var.put('C', var.get('anObject')(var.get('O')).get('constructor'))
            pass
            return (var.get('D') if (PyJsStrictEq(var.get('C'),var.get('undefined')) or (var.put('S', var.get('anObject')(var.get('C')).get(var.get('SPECIES')))==var.get('undefined'))) else var.get('aFunction')(var.get('S')))
        PyJs_anonymous_334_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_334_)
    PyJs_anonymous_333_._set_name('anonymous')
    @Js
    def PyJs_anonymous_335_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['fails', 'module', 'require', 'exports'])
        Js('use strict')
        var.put('fails', var.get('require')(Js('./_fails')))
        @Js
        def PyJs_anonymous_336_(method, arg, this, arguments, var=var):
            var = Scope({'method':method, 'arg':arg, 'this':this, 'arguments':arguments}, var)
            var.registers(['arg', 'method'])
            @Js
            def PyJs_anonymous_337_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                @Js
                def PyJs_anonymous_338_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    pass
                PyJs_anonymous_338_._set_name('anonymous')
                (var.get('method').callprop('call', var.get(u"null"), PyJs_anonymous_338_, Js(1.0)) if var.get('arg') else var.get('method').callprop('call', var.get(u"null")))
            PyJs_anonymous_337_._set_name('anonymous')
            return (var.get('method').neg().neg() and var.get('fails')(PyJs_anonymous_337_))
        PyJs_anonymous_336_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_336_)
    PyJs_anonymous_335_._set_name('anonymous')
    @Js
    def PyJs_anonymous_339_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'defined', 'exports', 'module', 'toInteger'])
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('defined', var.get('require')(Js('./_defined')))
        @Js
        def PyJs_anonymous_340_(TO_STRING, this, arguments, var=var):
            var = Scope({'TO_STRING':TO_STRING, 'this':this, 'arguments':arguments}, var)
            var.registers(['TO_STRING'])
            @Js
            def PyJs_anonymous_341_(that, pos, this, arguments, var=var):
                var = Scope({'that':that, 'pos':pos, 'this':this, 'arguments':arguments}, var)
                var.registers(['pos', 'i', 'that', 'a', 'b', 's', 'l'])
                var.put('s', var.get('String')(var.get('defined')(var.get('that'))))
                var.put('i', var.get('toInteger')(var.get('pos')))
                var.put('l', var.get('s').get('length'))
                pass
                if ((var.get('i')<Js(0.0)) or (var.get('i')>=var.get('l'))):
                    return (Js('') if var.get('TO_STRING') else var.get('undefined'))
                var.put('a', var.get('s').callprop('charCodeAt', var.get('i')))
                def PyJs_LONG_342_(var=var):
                    return ((var.get('s').callprop('charAt', var.get('i')) if var.get('TO_STRING') else var.get('a')) if (((((var.get('a')<Js(55296)) or (var.get('a')>Js(56319))) or PyJsStrictEq((var.get('i')+Js(1.0)),var.get('l'))) or (var.put('b', var.get('s').callprop('charCodeAt', (var.get('i')+Js(1.0))))<Js(56320))) or (var.get('b')>Js(57343))) else (var.get('s').callprop('slice', var.get('i'), (var.get('i')+Js(2.0))) if var.get('TO_STRING') else ((((var.get('a')-Js(55296))<<Js(10.0))+(var.get('b')-Js(56320)))+Js(65536))))
                return PyJs_LONG_342_()
            PyJs_anonymous_341_._set_name('anonymous')
            return PyJs_anonymous_341_
        PyJs_anonymous_340_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_340_)
    PyJs_anonymous_339_._set_name('anonymous')
    @Js
    def PyJs_anonymous_343_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'defined', 'isRegExp', 'exports', 'module'])
        var.put('isRegExp', var.get('require')(Js('./_is-regexp')))
        var.put('defined', var.get('require')(Js('./_defined')))
        @Js
        def PyJs_anonymous_344_(that, searchString, NAME, this, arguments, var=var):
            var = Scope({'that':that, 'searchString':searchString, 'NAME':NAME, 'this':this, 'arguments':arguments}, var)
            var.registers(['NAME', 'searchString', 'that'])
            if var.get('isRegExp')(var.get('searchString')):
                PyJsTempException = JsToPyException(var.get('TypeError')(((Js('String#')+var.get('NAME'))+Js(" doesn't accept regex!"))))
                raise PyJsTempException
            return var.get('String')(var.get('defined')(var.get('that')))
        PyJs_anonymous_344_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_344_)
    PyJs_anonymous_343_._set_name('anonymous')
    @Js
    def PyJs_anonymous_345_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'defined', 'createHTML', '$export', 'exports', 'module', 'quot', 'fails'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('defined', var.get('require')(Js('./_defined')))
        var.put('quot', JsRegExp('/"/g'))
        @Js
        def PyJs_createHTML_346_(string, tag, attribute, value, this, arguments, var=var):
            var = Scope({'string':string, 'tag':tag, 'attribute':attribute, 'value':value, 'this':this, 'arguments':arguments, 'createHTML':PyJs_createHTML_346_}, var)
            var.registers(['string', 'p1', 'attribute', 'value', 'tag', 'S'])
            var.put('S', var.get('String')(var.get('defined')(var.get('string'))))
            var.put('p1', (Js('<')+var.get('tag')))
            if PyJsStrictNeq(var.get('attribute'),Js('')):
                var.put('p1', ((((Js(' ')+var.get('attribute'))+Js('="'))+var.get('String')(var.get('value')).callprop('replace', var.get('quot'), Js('&quot;')))+Js('"')), '+')
            return (((((var.get('p1')+Js('>'))+var.get('S'))+Js('</'))+var.get('tag'))+Js('>'))
        PyJs_createHTML_346_._set_name('createHTML')
        var.put('createHTML', PyJs_createHTML_346_)
        @Js
        def PyJs_anonymous_347_(NAME, exec, this, arguments, var=var):
            var = Scope({'NAME':NAME, 'exec':exec, 'this':this, 'arguments':arguments}, var)
            var.registers(['NAME', 'O', 'exec'])
            var.put('O', Js({}))
            var.get('O').put(var.get('NAME'), var.get('exec')(var.get('createHTML')))
            @Js
            def PyJs_anonymous_348_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['test'])
                var.put('test', Js('').callprop(var.get('NAME'), Js('"')))
                return (PyJsStrictNeq(var.get('test'),var.get('test').callprop('toLowerCase')) or (var.get('test').callprop('split', Js('"')).get('length')>Js(3.0)))
            PyJs_anonymous_348_._set_name('anonymous')
            var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('fails')(PyJs_anonymous_348_))), Js('String'), var.get('O'))
        PyJs_anonymous_347_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_347_)
    PyJs_anonymous_345_._set_name('anonymous')
    @Js
    def PyJs_anonymous_349_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'defined', 'toLength', 'exports', 'module', 'repeat'])
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('repeat', var.get('require')(Js('./_string-repeat')))
        var.put('defined', var.get('require')(Js('./_defined')))
        @Js
        def PyJs_anonymous_350_(that, maxLength, fillString, left, this, arguments, var=var):
            var = Scope({'that':that, 'maxLength':maxLength, 'fillString':fillString, 'left':left, 'this':this, 'arguments':arguments}, var)
            var.registers(['intMaxLength', 'fillString', 'fillStr', 'left', 'that', 'stringLength', 'maxLength', 'fillLen', 'stringFiller', 'S'])
            var.put('S', var.get('String')(var.get('defined')(var.get('that'))))
            var.put('stringLength', var.get('S').get('length'))
            var.put('fillStr', (Js(' ') if PyJsStrictEq(var.get('fillString'),var.get('undefined')) else var.get('String')(var.get('fillString'))))
            var.put('intMaxLength', var.get('toLength')(var.get('maxLength')))
            if ((var.get('intMaxLength')<=var.get('stringLength')) or (var.get('fillStr')==Js(''))):
                return var.get('S')
            var.put('fillLen', (var.get('intMaxLength')-var.get('stringLength')))
            var.put('stringFiller', var.get('repeat').callprop('call', var.get('fillStr'), var.get('Math').callprop('ceil', (var.get('fillLen')/var.get('fillStr').get('length')))))
            if (var.get('stringFiller').get('length')>var.get('fillLen')):
                var.put('stringFiller', var.get('stringFiller').callprop('slice', Js(0.0), var.get('fillLen')))
            return ((var.get('stringFiller')+var.get('S')) if var.get('left') else (var.get('S')+var.get('stringFiller')))
        PyJs_anonymous_350_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_350_)
    PyJs_anonymous_349_._set_name('anonymous')
    @Js
    def PyJs_anonymous_351_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'defined', 'exports', 'module', 'toInteger'])
        Js('use strict')
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('defined', var.get('require')(Js('./_defined')))
        @Js
        def PyJs_repeat_352_(count, this, arguments, var=var):
            var = Scope({'count':count, 'this':this, 'arguments':arguments, 'repeat':PyJs_repeat_352_}, var)
            var.registers(['str', 'count', 'n', 'res'])
            var.put('str', var.get('String')(var.get('defined')(var.get(u"this"))))
            var.put('res', Js(''))
            var.put('n', var.get('toInteger')(var.get('count')))
            if ((var.get('n')<Js(0.0)) or (var.get('n')==var.get('Infinity'))):
                PyJsTempException = JsToPyException(var.get('RangeError')(Js("Count can't be negative")))
                raise PyJsTempException
            #for JS loop
            
            while (var.get('n')>Js(0.0)):
                try:
                    if (var.get('n')&Js(1.0)):
                        var.put('res', var.get('str'), '+')
                finally:
                        (var.put('n', Js(1.0), '>>>') and var.put('str', var.get('str'), '+'))
            return var.get('res')
        PyJs_repeat_352_._set_name('repeat')
        var.get('module').put('exports', PyJs_repeat_352_)
    PyJs_anonymous_351_._set_name('anonymous')
    @Js
    def PyJs_anonymous_353_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['rtrim', 'non', 'defined', 'require', 'spaces', 'ltrim', 'exporter', '$export', 'exports', 'module', 'fails', 'space', 'trim'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('defined', var.get('require')(Js('./_defined')))
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('spaces', var.get('require')(Js('./_string-ws')))
        var.put('space', ((Js('[')+var.get('spaces'))+Js(']')))
        var.put('non', Js('\u200b\x85'))
        var.put('ltrim', var.get('RegExp')((((Js('^')+var.get('space'))+var.get('space'))+Js('*'))))
        var.put('rtrim', var.get('RegExp')(((var.get('space')+var.get('space'))+Js('*$'))))
        @Js
        def PyJs_exporter_354_(KEY, exec, ALIAS, this, arguments, var=var):
            var = Scope({'KEY':KEY, 'exec':exec, 'ALIAS':ALIAS, 'this':this, 'arguments':arguments, 'exporter':PyJs_exporter_354_}, var)
            var.registers(['KEY', 'ALIAS', 'fn', 'FORCE', 'exec', 'exp'])
            var.put('exp', Js({}))
            @Js
            def PyJs_anonymous_355_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return (var.get('spaces').callprop(var.get('KEY')).neg().neg() or (var.get('non').callprop(var.get('KEY'))!=var.get('non')))
            PyJs_anonymous_355_._set_name('anonymous')
            var.put('FORCE', var.get('fails')(PyJs_anonymous_355_))
            var.put('fn', var.get('exp').put(var.get('KEY'), (var.get('exec')(var.get('trim')) if var.get('FORCE') else var.get('spaces').get(var.get('KEY')))))
            if var.get('ALIAS'):
                var.get('exp').put(var.get('ALIAS'), var.get('fn'))
            var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('FORCE'))), Js('String'), var.get('exp'))
        PyJs_exporter_354_._set_name('exporter')
        var.put('exporter', PyJs_exporter_354_)
        @Js
        def PyJs_anonymous_356_(string, TYPE, this, arguments, var=var):
            var = Scope({'string':string, 'TYPE':TYPE, 'this':this, 'arguments':arguments}, var)
            var.registers(['TYPE', 'string'])
            var.put('string', var.get('String')(var.get('defined')(var.get('string'))))
            if (var.get('TYPE')&Js(1.0)):
                var.put('string', var.get('string').callprop('replace', var.get('ltrim'), Js('')))
            if (var.get('TYPE')&Js(2.0)):
                var.put('string', var.get('string').callprop('replace', var.get('rtrim'), Js('')))
            return var.get('string')
        PyJs_anonymous_356_._set_name('anonymous')
        var.put('trim', var.get('exporter').put('trim', PyJs_anonymous_356_))
        var.get('module').put('exports', var.get('exporter'))
    PyJs_anonymous_353_._set_name('anonymous')
    @Js
    def PyJs_anonymous_357_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('module').put('exports', (Js('\t\n\x0b\x0c\r \xa0\u1680\u180e\u2000\u2001\u2002\u2003')+Js('\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029\ufeff')))
    PyJs_anonymous_357_._set_name('anonymous')
    @Js
    def PyJs_anonymous_358_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['clearTask', 'Dispatch', 'defer', 'port', 'process', 'invoke', 'require', 'ONREADYSTATECHANGE', 'setTask', 'cel', 'counter', 'module', 'run', 'channel', 'global', 'html', 'MessageChannel', 'exports', 'queue', 'listener', 'ctx'])
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('invoke', var.get('require')(Js('./_invoke')))
        var.put('html', var.get('require')(Js('./_html')))
        var.put('cel', var.get('require')(Js('./_dom-create')))
        var.put('global', var.get('require')(Js('./_global')))
        var.put('process', var.get('global').get('process'))
        var.put('setTask', var.get('global').get('setImmediate'))
        var.put('clearTask', var.get('global').get('clearImmediate'))
        var.put('MessageChannel', var.get('global').get('MessageChannel'))
        var.put('Dispatch', var.get('global').get('Dispatch'))
        var.put('counter', Js(0.0))
        var.put('queue', Js({}))
        var.put('ONREADYSTATECHANGE', Js('onreadystatechange'))
        pass
        @Js
        def PyJs_run_359_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'run':PyJs_run_359_}, var)
            var.registers(['fn', 'id'])
            var.put('id', (+var.get(u"this")))
            if var.get('queue').callprop('hasOwnProperty', var.get('id')):
                var.put('fn', var.get('queue').get(var.get('id')))
                var.get('queue').delete(var.get('id'))
                var.get('fn')()
        PyJs_run_359_._set_name('run')
        var.put('run', PyJs_run_359_)
        @Js
        def PyJs_listener_360_(event, this, arguments, var=var):
            var = Scope({'event':event, 'this':this, 'arguments':arguments, 'listener':PyJs_listener_360_}, var)
            var.registers(['event'])
            var.get('run').callprop('call', var.get('event').get('data'))
        PyJs_listener_360_._set_name('listener')
        var.put('listener', PyJs_listener_360_)
        if (var.get('setTask').neg() or var.get('clearTask').neg()):
            @Js
            def PyJs_setImmediate_361_(fn, this, arguments, var=var):
                var = Scope({'fn':fn, 'this':this, 'arguments':arguments, 'setImmediate':PyJs_setImmediate_361_}, var)
                var.registers(['i', 'fn', 'args'])
                var.put('args', Js([]))
                var.put('i', Js(1.0))
                while (var.get('arguments').get('length')>var.get('i')):
                    var.get('args').callprop('push', var.get('arguments').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
                @Js
                def PyJs_anonymous_362_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get('invoke')((var.get('fn') if (var.get('fn',throw=False).typeof()==Js('function')) else var.get('Function')(var.get('fn'))), var.get('args'))
                PyJs_anonymous_362_._set_name('anonymous')
                var.get('queue').put(var.put('counter',Js(var.get('counter').to_number())+Js(1)), PyJs_anonymous_362_)
                var.get('defer')(var.get('counter'))
                return var.get('counter')
            PyJs_setImmediate_361_._set_name('setImmediate')
            var.put('setTask', PyJs_setImmediate_361_)
            @Js
            def PyJs_clearImmediate_363_(id, this, arguments, var=var):
                var = Scope({'id':id, 'this':this, 'arguments':arguments, 'clearImmediate':PyJs_clearImmediate_363_}, var)
                var.registers(['id'])
                var.get('queue').delete(var.get('id'))
            PyJs_clearImmediate_363_._set_name('clearImmediate')
            var.put('clearTask', PyJs_clearImmediate_363_)
            if (var.get('require')(Js('./_cof'))(var.get('process'))==Js('process')):
                @Js
                def PyJs_defer_364_(id, this, arguments, var=var):
                    var = Scope({'id':id, 'this':this, 'arguments':arguments, 'defer':PyJs_defer_364_}, var)
                    var.registers(['id'])
                    var.get('process').callprop('nextTick', var.get('ctx')(var.get('run'), var.get('id'), Js(1.0)))
                PyJs_defer_364_._set_name('defer')
                var.put('defer', PyJs_defer_364_)
            else:
                if (var.get('Dispatch') and var.get('Dispatch').get('now')):
                    @Js
                    def PyJs_defer_365_(id, this, arguments, var=var):
                        var = Scope({'id':id, 'this':this, 'arguments':arguments, 'defer':PyJs_defer_365_}, var)
                        var.registers(['id'])
                        var.get('Dispatch').callprop('now', var.get('ctx')(var.get('run'), var.get('id'), Js(1.0)))
                    PyJs_defer_365_._set_name('defer')
                    var.put('defer', PyJs_defer_365_)
                else:
                    if var.get('MessageChannel'):
                        var.put('channel', var.get('MessageChannel').create())
                        var.put('port', var.get('channel').get('port2'))
                        var.get('channel').get('port1').put('onmessage', var.get('listener'))
                        var.put('defer', var.get('ctx')(var.get('port').get('postMessage'), var.get('port'), Js(1.0)))
                    else:
                        if ((var.get('global').get('addEventListener') and (var.get('postMessage',throw=False).typeof()==Js('function'))) and var.get('global').get('importScripts').neg()):
                            @Js
                            def PyJs_defer_366_(id, this, arguments, var=var):
                                var = Scope({'id':id, 'this':this, 'arguments':arguments, 'defer':PyJs_defer_366_}, var)
                                var.registers(['id'])
                                var.get('global').callprop('postMessage', (var.get('id')+Js('')), Js('*'))
                            PyJs_defer_366_._set_name('defer')
                            var.put('defer', PyJs_defer_366_)
                            var.get('global').callprop('addEventListener', Js('message'), var.get('listener'), Js(False))
                        else:
                            if var.get('cel')(Js('script')).contains(var.get('ONREADYSTATECHANGE')):
                                @Js
                                def PyJs_defer_367_(id, this, arguments, var=var):
                                    var = Scope({'id':id, 'this':this, 'arguments':arguments, 'defer':PyJs_defer_367_}, var)
                                    var.registers(['id'])
                                    @Js
                                    def PyJs_anonymous_368_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get('html').callprop('removeChild', var.get(u"this"))
                                        var.get('run').callprop('call', var.get('id'))
                                    PyJs_anonymous_368_._set_name('anonymous')
                                    var.get('html').callprop('appendChild', var.get('cel')(Js('script'))).put(var.get('ONREADYSTATECHANGE'), PyJs_anonymous_368_)
                                PyJs_defer_367_._set_name('defer')
                                var.put('defer', PyJs_defer_367_)
                            else:
                                @Js
                                def PyJs_defer_369_(id, this, arguments, var=var):
                                    var = Scope({'id':id, 'this':this, 'arguments':arguments, 'defer':PyJs_defer_369_}, var)
                                    var.registers(['id'])
                                    var.get('setTimeout')(var.get('ctx')(var.get('run'), var.get('id'), Js(1.0)), Js(0.0))
                                PyJs_defer_369_._set_name('defer')
                                var.put('defer', PyJs_defer_369_)
        var.get('module').put('exports', Js({'set':var.get('setTask'),'clear':var.get('clearTask')}))
    PyJs_anonymous_358_._set_name('anonymous')
    @Js
    def PyJs_anonymous_370_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'max', 'min', 'exports', 'module', 'toInteger'])
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('max', var.get('Math').get('max'))
        var.put('min', var.get('Math').get('min'))
        @Js
        def PyJs_anonymous_371_(index, length, this, arguments, var=var):
            var = Scope({'index':index, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['index', 'length'])
            var.put('index', var.get('toInteger')(var.get('index')))
            return (var.get('max')((var.get('index')+var.get('length')), Js(0.0)) if (var.get('index')<Js(0.0)) else var.get('min')(var.get('index'), var.get('length')))
        PyJs_anonymous_371_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_371_)
    PyJs_anonymous_370_._set_name('anonymous')
    @Js
    def PyJs_anonymous_372_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toLength', 'exports', 'module', 'toInteger'])
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        @Js
        def PyJs_anonymous_373_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['length', 'it', 'number'])
            if PyJsStrictEq(var.get('it'),var.get('undefined')):
                return Js(0.0)
            var.put('number', var.get('toInteger')(var.get('it')))
            var.put('length', var.get('toLength')(var.get('number')))
            if PyJsStrictNeq(var.get('number'),var.get('length')):
                PyJsTempException = JsToPyException(var.get('RangeError')(Js('Wrong length!')))
                raise PyJsTempException
            return var.get('length')
        PyJs_anonymous_373_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_373_)
    PyJs_anonymous_372_._set_name('anonymous')
    @Js
    def PyJs_anonymous_374_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'floor', 'exports', 'ceil', 'module'])
        var.put('ceil', var.get('Math').get('ceil'))
        var.put('floor', var.get('Math').get('floor'))
        @Js
        def PyJs_anonymous_375_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return (Js(0.0) if var.get('isNaN')(var.put('it', (+var.get('it')))) else (var.get('floor') if (var.get('it')>Js(0.0)) else var.get('ceil'))(var.get('it')))
        PyJs_anonymous_375_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_375_)
    PyJs_anonymous_374_._set_name('anonymous')
    @Js
    def PyJs_anonymous_376_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'defined', 'exports', 'module', 'IObject'])
        var.put('IObject', var.get('require')(Js('./_iobject')))
        var.put('defined', var.get('require')(Js('./_defined')))
        @Js
        def PyJs_anonymous_377_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return var.get('IObject')(var.get('defined')(var.get('it')))
        PyJs_anonymous_377_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_377_)
    PyJs_anonymous_376_._set_name('anonymous')
    @Js
    def PyJs_anonymous_378_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'min', 'exports', 'module', 'toInteger'])
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('min', var.get('Math').get('min'))
        @Js
        def PyJs_anonymous_379_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return (var.get('min')(var.get('toInteger')(var.get('it')), Js(9007199254740991)) if (var.get('it')>Js(0.0)) else Js(0.0))
        PyJs_anonymous_379_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_379_)
    PyJs_anonymous_378_._set_name('anonymous')
    @Js
    def PyJs_anonymous_380_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'defined', 'module', 'exports'])
        var.put('defined', var.get('require')(Js('./_defined')))
        @Js
        def PyJs_anonymous_381_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return var.get('Object')(var.get('defined')(var.get('it')))
        PyJs_anonymous_381_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_381_)
    PyJs_anonymous_380_._set_name('anonymous')
    @Js
    def PyJs_anonymous_382_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'isObject', 'module', 'exports'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        @Js
        def PyJs_anonymous_383_(it, S, this, arguments, var=var):
            var = Scope({'it':it, 'S':S, 'this':this, 'arguments':arguments}, var)
            var.registers(['it', 'fn', 'val', 'S'])
            if var.get('isObject')(var.get('it')).neg():
                return var.get('it')
            pass
            if ((var.get('S') and (var.put('fn', var.get('it').get('toString')).typeof()==Js('function'))) and var.get('isObject')(var.put('val', var.get('fn').callprop('call', var.get('it')))).neg()):
                return var.get('val')
            if ((var.put('fn', var.get('it').get('valueOf')).typeof()==Js('function')) and var.get('isObject')(var.put('val', var.get('fn').callprop('call', var.get('it')))).neg()):
                return var.get('val')
            if ((var.get('S').neg() and (var.put('fn', var.get('it').get('toString')).typeof()==Js('function'))) and var.get('isObject')(var.put('val', var.get('fn').callprop('call', var.get('it')))).neg()):
                return var.get('val')
            PyJsTempException = JsToPyException(var.get('TypeError')(Js("Can't convert object to primitive value")))
            raise PyJsTempException
        PyJs_anonymous_383_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_383_)
    PyJs_anonymous_382_._set_name('anonymous')
    @Js
    def PyJs_anonymous_384_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['dP', 'toInteger', 'arrayFindIndex', 'arrayReduce', 'TYPED_ARRAY', 'gOPN', 'createArrayIncludes', 'VIEW', 'arrayForEach', 'arrayToLocaleString', '$map', 'toPrimitive', 'arraySome', 'toObject', 'arrayEvery', 'ArrayIterators', '$from', 'arrayFilter', 'gOPD', '$setDesc', 'TYPED_CONSTRUCTOR', 'WRONG_LENGTH', 'arrayJoin', 'isObject', '$GOPD', 'addGetter', 'getIterFn', 'arraySlice', 'ITERATOR', 'toIndex', 'wks', 'ArrayProto', 'propertyDesc', 'speciesConstructor', 'DEF_CONSTRUCTOR', 'arrayToString', 'require', 'arrayFind', 'TO_LOCALE_BUG', 'createArrayMethod', 'module', 'global', 'arrayIncludes', 'PROTOTYPE', 'anInstance', 'toAbsoluteIndex', 'arrayCopyWithin', 'exports', 'Iterators', 'ctx', '$getDesc', '$buffer', '$toLocaleString', 'toLength', 'RangeError', 'uid', 'FORCED_SET', 'classof', 'allocate', '$of', '$slice', 'fails', 'arraySort', 'ALL_CONSTRUCTORS', 'arrayIndexOf', '$ArrayBuffer', 'TypeError', 'ARRAY_BUFFER', 'LITTLE_ENDIAN', '$iterators', 'has', '$iterDetect', 'hide', 'proto', 'arrayReduceRight', 'TAG', '$set', '$TypedArrayPrototype$', 'setSpecies', 'toOffset', 'arrayKeys', 'arrayValues', 'fromList', 'isTAIndex', 'LIBRARY', 'speciesFromList', 'validate', 'isArrayIter', 'arrayEntries', '$typed', 'SHARED_BUFFER', 'BYTES_PER_ELEMENT', '$DataView', 'getPrototypeOf', 'create', 'arrayLastIndexOf', 'Uint8Array', '$DP', 'redefineAll', 'arrayFill', '$export'])
        Js('use strict')
        if var.get('require')(Js('./_descriptors')):
            var.put('LIBRARY', var.get('require')(Js('./_library')))
            var.put('global', var.get('require')(Js('./_global')))
            var.put('fails', var.get('require')(Js('./_fails')))
            var.put('$export', var.get('require')(Js('./_export')))
            var.put('$typed', var.get('require')(Js('./_typed')))
            var.put('$buffer', var.get('require')(Js('./_typed-buffer')))
            var.put('ctx', var.get('require')(Js('./_ctx')))
            var.put('anInstance', var.get('require')(Js('./_an-instance')))
            var.put('propertyDesc', var.get('require')(Js('./_property-desc')))
            var.put('hide', var.get('require')(Js('./_hide')))
            var.put('redefineAll', var.get('require')(Js('./_redefine-all')))
            var.put('toInteger', var.get('require')(Js('./_to-integer')))
            var.put('toLength', var.get('require')(Js('./_to-length')))
            var.put('toIndex', var.get('require')(Js('./_to-index')))
            var.put('toAbsoluteIndex', var.get('require')(Js('./_to-absolute-index')))
            var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
            var.put('has', var.get('require')(Js('./_has')))
            var.put('classof', var.get('require')(Js('./_classof')))
            var.put('isObject', var.get('require')(Js('./_is-object')))
            var.put('toObject', var.get('require')(Js('./_to-object')))
            var.put('isArrayIter', var.get('require')(Js('./_is-array-iter')))
            var.put('create', var.get('require')(Js('./_object-create')))
            var.put('getPrototypeOf', var.get('require')(Js('./_object-gpo')))
            var.put('gOPN', var.get('require')(Js('./_object-gopn')).get('f'))
            var.put('getIterFn', var.get('require')(Js('./core.get-iterator-method')))
            var.put('uid', var.get('require')(Js('./_uid')))
            var.put('wks', var.get('require')(Js('./_wks')))
            var.put('createArrayMethod', var.get('require')(Js('./_array-methods')))
            var.put('createArrayIncludes', var.get('require')(Js('./_array-includes')))
            var.put('speciesConstructor', var.get('require')(Js('./_species-constructor')))
            var.put('ArrayIterators', var.get('require')(Js('./es6.array.iterator')))
            var.put('Iterators', var.get('require')(Js('./_iterators')))
            var.put('$iterDetect', var.get('require')(Js('./_iter-detect')))
            var.put('setSpecies', var.get('require')(Js('./_set-species')))
            var.put('arrayFill', var.get('require')(Js('./_array-fill')))
            var.put('arrayCopyWithin', var.get('require')(Js('./_array-copy-within')))
            var.put('$DP', var.get('require')(Js('./_object-dp')))
            var.put('$GOPD', var.get('require')(Js('./_object-gopd')))
            var.put('dP', var.get('$DP').get('f'))
            var.put('gOPD', var.get('$GOPD').get('f'))
            var.put('RangeError', var.get('global').get('RangeError'))
            var.put('TypeError', var.get('global').get('TypeError'))
            var.put('Uint8Array', var.get('global').get('Uint8Array'))
            var.put('ARRAY_BUFFER', Js('ArrayBuffer'))
            var.put('SHARED_BUFFER', (Js('Shared')+var.get('ARRAY_BUFFER')))
            var.put('BYTES_PER_ELEMENT', Js('BYTES_PER_ELEMENT'))
            var.put('PROTOTYPE', Js('prototype'))
            var.put('ArrayProto', var.get('Array').get(var.get('PROTOTYPE')))
            var.put('$ArrayBuffer', var.get('$buffer').get('ArrayBuffer'))
            var.put('$DataView', var.get('$buffer').get('DataView'))
            var.put('arrayForEach', var.get('createArrayMethod')(Js(0.0)))
            var.put('arrayFilter', var.get('createArrayMethod')(Js(2.0)))
            var.put('arraySome', var.get('createArrayMethod')(Js(3.0)))
            var.put('arrayEvery', var.get('createArrayMethod')(Js(4.0)))
            var.put('arrayFind', var.get('createArrayMethod')(Js(5.0)))
            var.put('arrayFindIndex', var.get('createArrayMethod')(Js(6.0)))
            var.put('arrayIncludes', var.get('createArrayIncludes')(Js(True)))
            var.put('arrayIndexOf', var.get('createArrayIncludes')(Js(False)))
            var.put('arrayValues', var.get('ArrayIterators').get('values'))
            var.put('arrayKeys', var.get('ArrayIterators').get('keys'))
            var.put('arrayEntries', var.get('ArrayIterators').get('entries'))
            var.put('arrayLastIndexOf', var.get('ArrayProto').get('lastIndexOf'))
            var.put('arrayReduce', var.get('ArrayProto').get('reduce'))
            var.put('arrayReduceRight', var.get('ArrayProto').get('reduceRight'))
            var.put('arrayJoin', var.get('ArrayProto').get('join'))
            var.put('arraySort', var.get('ArrayProto').get('sort'))
            var.put('arraySlice', var.get('ArrayProto').get('slice'))
            var.put('arrayToString', var.get('ArrayProto').get('toString'))
            var.put('arrayToLocaleString', var.get('ArrayProto').get('toLocaleString'))
            var.put('ITERATOR', var.get('wks')(Js('iterator')))
            var.put('TAG', var.get('wks')(Js('toStringTag')))
            var.put('TYPED_CONSTRUCTOR', var.get('uid')(Js('typed_constructor')))
            var.put('DEF_CONSTRUCTOR', var.get('uid')(Js('def_constructor')))
            var.put('ALL_CONSTRUCTORS', var.get('$typed').get('CONSTR'))
            var.put('TYPED_ARRAY', var.get('$typed').get('TYPED'))
            var.put('VIEW', var.get('$typed').get('VIEW'))
            var.put('WRONG_LENGTH', Js('Wrong length!'))
            @Js
            def PyJs_anonymous_385_(O, length, this, arguments, var=var):
                var = Scope({'O':O, 'length':length, 'this':this, 'arguments':arguments}, var)
                var.registers(['length', 'O'])
                return var.get('allocate')(var.get('speciesConstructor')(var.get('O'), var.get('O').get(var.get('DEF_CONSTRUCTOR'))), var.get('length'))
            PyJs_anonymous_385_._set_name('anonymous')
            var.put('$map', var.get('createArrayMethod')(Js(1.0), PyJs_anonymous_385_))
            @Js
            def PyJs_anonymous_386_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return PyJsStrictEq(var.get('Uint8Array').create(var.get('Uint16Array').create(Js([Js(1.0)])).get('buffer')).get('0'),Js(1.0))
            PyJs_anonymous_386_._set_name('anonymous')
            var.put('LITTLE_ENDIAN', var.get('fails')(PyJs_anonymous_386_))
            @Js
            def PyJs_anonymous_387_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('Uint8Array').create(Js(1.0)).callprop('set', Js({}))
            PyJs_anonymous_387_._set_name('anonymous')
            var.put('FORCED_SET', ((var.get('Uint8Array').neg().neg() and var.get('Uint8Array').get(var.get('PROTOTYPE')).get('set').neg().neg()) and var.get('fails')(PyJs_anonymous_387_)))
            @Js
            def PyJs_toOffset_388_(it, BYTES, this, arguments, var=var):
                var = Scope({'it':it, 'BYTES':BYTES, 'this':this, 'arguments':arguments, 'toOffset':PyJs_toOffset_388_}, var)
                var.registers(['offset', 'it', 'BYTES'])
                var.put('offset', var.get('toInteger')(var.get('it')))
                if ((var.get('offset')<Js(0.0)) or (var.get('offset')%var.get('BYTES'))):
                    PyJsTempException = JsToPyException(var.get('RangeError')(Js('Wrong offset!')))
                    raise PyJsTempException
                return var.get('offset')
            PyJs_toOffset_388_._set_name('toOffset')
            var.put('toOffset', PyJs_toOffset_388_)
            @Js
            def PyJs_validate_389_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments, 'validate':PyJs_validate_389_}, var)
                var.registers(['it'])
                if (var.get('isObject')(var.get('it')) and var.get('it').contains(var.get('TYPED_ARRAY'))):
                    return var.get('it')
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('it')+Js(' is not a typed array!'))))
                raise PyJsTempException
            PyJs_validate_389_._set_name('validate')
            var.put('validate', PyJs_validate_389_)
            @Js
            def PyJs_allocate_390_(C, length, this, arguments, var=var):
                var = Scope({'C':C, 'length':length, 'this':this, 'arguments':arguments, 'allocate':PyJs_allocate_390_}, var)
                var.registers(['length', 'C'])
                if (var.get('isObject')(var.get('C')) and var.get('C').contains(var.get('TYPED_CONSTRUCTOR'))).neg():
                    PyJsTempException = JsToPyException(var.get('TypeError')(Js('It is not a typed array constructor!')))
                    raise PyJsTempException
                return var.get('C').create(var.get('length'))
            PyJs_allocate_390_._set_name('allocate')
            var.put('allocate', PyJs_allocate_390_)
            @Js
            def PyJs_speciesFromList_391_(O, list, this, arguments, var=var):
                var = Scope({'O':O, 'list':list, 'this':this, 'arguments':arguments, 'speciesFromList':PyJs_speciesFromList_391_}, var)
                var.registers(['O', 'list'])
                return var.get('fromList')(var.get('speciesConstructor')(var.get('O'), var.get('O').get(var.get('DEF_CONSTRUCTOR'))), var.get('list'))
            PyJs_speciesFromList_391_._set_name('speciesFromList')
            var.put('speciesFromList', PyJs_speciesFromList_391_)
            @Js
            def PyJs_fromList_392_(C, list, this, arguments, var=var):
                var = Scope({'C':C, 'list':list, 'this':this, 'arguments':arguments, 'fromList':PyJs_fromList_392_}, var)
                var.registers(['C', 'index', 'length', 'result', 'list'])
                var.put('index', Js(0.0))
                var.put('length', var.get('list').get('length'))
                var.put('result', var.get('allocate')(var.get('C'), var.get('length')))
                while (var.get('length')>var.get('index')):
                    var.get('result').put(var.get('index'), var.get('list').get((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))))
                return var.get('result')
            PyJs_fromList_392_._set_name('fromList')
            var.put('fromList', PyJs_fromList_392_)
            @Js
            def PyJs_addGetter_393_(it, key, internal, this, arguments, var=var):
                var = Scope({'it':it, 'key':key, 'internal':internal, 'this':this, 'arguments':arguments, 'addGetter':PyJs_addGetter_393_}, var)
                var.registers(['it', 'internal', 'key'])
                @Js
                def PyJs_get_394_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_394_}, var)
                    var.registers([])
                    return var.get(u"this").get('_d').get(var.get('internal'))
                PyJs_get_394_._set_name('get')
                var.get('dP')(var.get('it'), var.get('key'), Js({'get':PyJs_get_394_}))
            PyJs_addGetter_393_._set_name('addGetter')
            var.put('addGetter', PyJs_addGetter_393_)
            @Js
            def PyJs_InlineNonPyName_395_(source, this, arguments, var=var):
                var = Scope({'source':source, 'this':this, 'arguments':arguments, 'from':PyJs_InlineNonPyName_395_}, var)
                var.registers(['iterator', 'length', 'i', 'source', 'mapfn', 'O', 'result', 'step', 'mapping', 'aLen', 'iterFn', 'values'])
                var.put('O', var.get('toObject')(var.get('source')))
                var.put('aLen', var.get('arguments').get('length'))
                var.put('mapfn', (var.get('arguments').get('1') if (var.get('aLen')>Js(1.0)) else var.get('undefined')))
                var.put('mapping', PyJsStrictNeq(var.get('mapfn'),var.get('undefined')))
                var.put('iterFn', var.get('getIterFn')(var.get('O')))
                pass
                if ((var.get('iterFn')!=var.get('undefined')) and var.get('isArrayIter')(var.get('iterFn')).neg()):
                    #for JS loop
                    PyJsComma(PyJsComma(var.put('iterator', var.get('iterFn').callprop('call', var.get('O'))),var.put('values', Js([]))),var.put('i', Js(0.0)))
                    while var.put('step', var.get('iterator').callprop('next')).get('done').neg():
                        try:
                            var.get('values').callprop('push', var.get('step').get('value'))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.put('O', var.get('values'))
                if (var.get('mapping') and (var.get('aLen')>Js(2.0))):
                    var.put('mapfn', var.get('ctx')(var.get('mapfn'), var.get('arguments').get('2'), Js(2.0)))
                #for JS loop
                PyJsComma(PyJsComma(var.put('i', Js(0.0)),var.put('length', var.get('toLength')(var.get('O').get('length')))),var.put('result', var.get('allocate')(var.get(u"this"), var.get('length'))))
                while (var.get('length')>var.get('i')):
                    try:
                        var.get('result').put(var.get('i'), (var.get('mapfn')(var.get('O').get(var.get('i')), var.get('i')) if var.get('mapping') else var.get('O').get(var.get('i'))))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get('result')
            PyJs_InlineNonPyName_395_._set_name('from')
            var.put('$from', PyJs_InlineNonPyName_395_)
            @Js
            def PyJs_of_396_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'of':PyJs_of_396_}, var)
                var.registers(['index', 'length', 'result'])
                var.put('index', Js(0.0))
                var.put('length', var.get('arguments').get('length'))
                var.put('result', var.get('allocate')(var.get(u"this"), var.get('length')))
                while (var.get('length')>var.get('index')):
                    var.get('result').put(var.get('index'), var.get('arguments').get((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))))
                return var.get('result')
            PyJs_of_396_._set_name('of')
            var.put('$of', PyJs_of_396_)
            @Js
            def PyJs_anonymous_397_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('arrayToLocaleString').callprop('call', var.get('Uint8Array').create(Js(1.0)))
            PyJs_anonymous_397_._set_name('anonymous')
            var.put('TO_LOCALE_BUG', (var.get('Uint8Array').neg().neg() and var.get('fails')(PyJs_anonymous_397_)))
            @Js
            def PyJs_toLocaleString_398_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'toLocaleString':PyJs_toLocaleString_398_}, var)
                var.registers([])
                return var.get('arrayToLocaleString').callprop('apply', (var.get('arraySlice').callprop('call', var.get('validate')(var.get(u"this"))) if var.get('TO_LOCALE_BUG') else var.get('validate')(var.get(u"this"))), var.get('arguments'))
            PyJs_toLocaleString_398_._set_name('toLocaleString')
            var.put('$toLocaleString', PyJs_toLocaleString_398_)
            @Js
            def PyJs_copyWithin_399_(target, start, this, arguments, var=var):
                var = Scope({'target':target, 'start':start, 'this':this, 'arguments':arguments, 'copyWithin':PyJs_copyWithin_399_}, var)
                var.registers(['target', 'start'])
                return var.get('arrayCopyWithin').callprop('call', var.get('validate')(var.get(u"this")), var.get('target'), var.get('start'), (var.get('arguments').get('2') if (var.get('arguments').get('length')>Js(2.0)) else var.get('undefined')))
            PyJs_copyWithin_399_._set_name('copyWithin')
            @Js
            def PyJs_every_400_(callbackfn, this, arguments, var=var):
                var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'every':PyJs_every_400_}, var)
                var.registers(['callbackfn'])
                return var.get('arrayEvery')(var.get('validate')(var.get(u"this")), var.get('callbackfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
            PyJs_every_400_._set_name('every')
            @Js
            def PyJs_fill_401_(value, this, arguments, var=var):
                var = Scope({'value':value, 'this':this, 'arguments':arguments, 'fill':PyJs_fill_401_}, var)
                var.registers(['value'])
                return var.get('arrayFill').callprop('apply', var.get('validate')(var.get(u"this")), var.get('arguments'))
            PyJs_fill_401_._set_name('fill')
            @Js
            def PyJs_filter_402_(callbackfn, this, arguments, var=var):
                var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'filter':PyJs_filter_402_}, var)
                var.registers(['callbackfn'])
                return var.get('speciesFromList')(var.get(u"this"), var.get('arrayFilter')(var.get('validate')(var.get(u"this")), var.get('callbackfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined'))))
            PyJs_filter_402_._set_name('filter')
            @Js
            def PyJs_find_403_(predicate, this, arguments, var=var):
                var = Scope({'predicate':predicate, 'this':this, 'arguments':arguments, 'find':PyJs_find_403_}, var)
                var.registers(['predicate'])
                return var.get('arrayFind')(var.get('validate')(var.get(u"this")), var.get('predicate'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
            PyJs_find_403_._set_name('find')
            @Js
            def PyJs_findIndex_404_(predicate, this, arguments, var=var):
                var = Scope({'predicate':predicate, 'this':this, 'arguments':arguments, 'findIndex':PyJs_findIndex_404_}, var)
                var.registers(['predicate'])
                return var.get('arrayFindIndex')(var.get('validate')(var.get(u"this")), var.get('predicate'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
            PyJs_findIndex_404_._set_name('findIndex')
            @Js
            def PyJs_forEach_405_(callbackfn, this, arguments, var=var):
                var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'forEach':PyJs_forEach_405_}, var)
                var.registers(['callbackfn'])
                var.get('arrayForEach')(var.get('validate')(var.get(u"this")), var.get('callbackfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
            PyJs_forEach_405_._set_name('forEach')
            @Js
            def PyJs_indexOf_406_(searchElement, this, arguments, var=var):
                var = Scope({'searchElement':searchElement, 'this':this, 'arguments':arguments, 'indexOf':PyJs_indexOf_406_}, var)
                var.registers(['searchElement'])
                return var.get('arrayIndexOf')(var.get('validate')(var.get(u"this")), var.get('searchElement'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
            PyJs_indexOf_406_._set_name('indexOf')
            @Js
            def PyJs_includes_407_(searchElement, this, arguments, var=var):
                var = Scope({'searchElement':searchElement, 'this':this, 'arguments':arguments, 'includes':PyJs_includes_407_}, var)
                var.registers(['searchElement'])
                return var.get('arrayIncludes')(var.get('validate')(var.get(u"this")), var.get('searchElement'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
            PyJs_includes_407_._set_name('includes')
            @Js
            def PyJs_join_408_(separator, this, arguments, var=var):
                var = Scope({'separator':separator, 'this':this, 'arguments':arguments, 'join':PyJs_join_408_}, var)
                var.registers(['separator'])
                return var.get('arrayJoin').callprop('apply', var.get('validate')(var.get(u"this")), var.get('arguments'))
            PyJs_join_408_._set_name('join')
            @Js
            def PyJs_lastIndexOf_409_(searchElement, this, arguments, var=var):
                var = Scope({'searchElement':searchElement, 'this':this, 'arguments':arguments, 'lastIndexOf':PyJs_lastIndexOf_409_}, var)
                var.registers(['searchElement'])
                return var.get('arrayLastIndexOf').callprop('apply', var.get('validate')(var.get(u"this")), var.get('arguments'))
            PyJs_lastIndexOf_409_._set_name('lastIndexOf')
            @Js
            def PyJs_map_410_(mapfn, this, arguments, var=var):
                var = Scope({'mapfn':mapfn, 'this':this, 'arguments':arguments, 'map':PyJs_map_410_}, var)
                var.registers(['mapfn'])
                return var.get('$map')(var.get('validate')(var.get(u"this")), var.get('mapfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
            PyJs_map_410_._set_name('map')
            @Js
            def PyJs_reduce_411_(callbackfn, this, arguments, var=var):
                var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'reduce':PyJs_reduce_411_}, var)
                var.registers(['callbackfn'])
                return var.get('arrayReduce').callprop('apply', var.get('validate')(var.get(u"this")), var.get('arguments'))
            PyJs_reduce_411_._set_name('reduce')
            @Js
            def PyJs_reduceRight_412_(callbackfn, this, arguments, var=var):
                var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'reduceRight':PyJs_reduceRight_412_}, var)
                var.registers(['callbackfn'])
                return var.get('arrayReduceRight').callprop('apply', var.get('validate')(var.get(u"this")), var.get('arguments'))
            PyJs_reduceRight_412_._set_name('reduceRight')
            @Js
            def PyJs_reverse_413_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'reverse':PyJs_reverse_413_}, var)
                var.registers(['length', 'index', 'that', 'value', 'middle'])
                var.put('that', var.get(u"this"))
                var.put('length', var.get('validate')(var.get('that')).get('length'))
                var.put('middle', var.get('Math').callprop('floor', (var.get('length')/Js(2.0))))
                var.put('index', Js(0.0))
                pass
                while (var.get('index')<var.get('middle')):
                    var.put('value', var.get('that').get(var.get('index')))
                    var.get('that').put((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1)), var.get('that').get(var.put('length',Js(var.get('length').to_number())-Js(1))))
                    var.get('that').put(var.get('length'), var.get('value'))
                return var.get('that')
            PyJs_reverse_413_._set_name('reverse')
            @Js
            def PyJs_some_414_(callbackfn, this, arguments, var=var):
                var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'some':PyJs_some_414_}, var)
                var.registers(['callbackfn'])
                return var.get('arraySome')(var.get('validate')(var.get(u"this")), var.get('callbackfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
            PyJs_some_414_._set_name('some')
            @Js
            def PyJs_sort_415_(comparefn, this, arguments, var=var):
                var = Scope({'comparefn':comparefn, 'this':this, 'arguments':arguments, 'sort':PyJs_sort_415_}, var)
                var.registers(['comparefn'])
                return var.get('arraySort').callprop('call', var.get('validate')(var.get(u"this")), var.get('comparefn'))
            PyJs_sort_415_._set_name('sort')
            @Js
            def PyJs_subarray_416_(begin, end, this, arguments, var=var):
                var = Scope({'begin':begin, 'end':end, 'this':this, 'arguments':arguments, 'subarray':PyJs_subarray_416_}, var)
                var.registers(['begin', 'length', 'end', 'O', '$begin'])
                var.put('O', var.get('validate')(var.get(u"this")))
                var.put('length', var.get('O').get('length'))
                var.put('$begin', var.get('toAbsoluteIndex')(var.get('begin'), var.get('length')))
                return var.get('speciesConstructor')(var.get('O'), var.get('O').get(var.get('DEF_CONSTRUCTOR'))).create(var.get('O').get('buffer'), (var.get('O').get('byteOffset')+(var.get('$begin')*var.get('O').get('BYTES_PER_ELEMENT'))), var.get('toLength')(((var.get('length') if PyJsStrictEq(var.get('end'),var.get('undefined')) else var.get('toAbsoluteIndex')(var.get('end'), var.get('length')))-var.get('$begin'))))
            PyJs_subarray_416_._set_name('subarray')
            var.put('proto', Js({'copyWithin':PyJs_copyWithin_399_,'every':PyJs_every_400_,'fill':PyJs_fill_401_,'filter':PyJs_filter_402_,'find':PyJs_find_403_,'findIndex':PyJs_findIndex_404_,'forEach':PyJs_forEach_405_,'indexOf':PyJs_indexOf_406_,'includes':PyJs_includes_407_,'join':PyJs_join_408_,'lastIndexOf':PyJs_lastIndexOf_409_,'map':PyJs_map_410_,'reduce':PyJs_reduce_411_,'reduceRight':PyJs_reduceRight_412_,'reverse':PyJs_reverse_413_,'some':PyJs_some_414_,'sort':PyJs_sort_415_,'subarray':PyJs_subarray_416_}))
            @Js
            def PyJs_slice_417_(start, end, this, arguments, var=var):
                var = Scope({'start':start, 'end':end, 'this':this, 'arguments':arguments, 'slice':PyJs_slice_417_}, var)
                var.registers(['end', 'start'])
                return var.get('speciesFromList')(var.get(u"this"), var.get('arraySlice').callprop('call', var.get('validate')(var.get(u"this")), var.get('start'), var.get('end')))
            PyJs_slice_417_._set_name('slice')
            var.put('$slice', PyJs_slice_417_)
            @Js
            def PyJs_set_418_(arrayLike, this, arguments, var=var):
                var = Scope({'arrayLike':arrayLike, 'this':this, 'arguments':arguments, 'set':PyJs_set_418_}, var)
                var.registers(['length', 'src', 'index', 'arrayLike', 'offset', 'len'])
                var.get('validate')(var.get(u"this"))
                var.put('offset', var.get('toOffset')(var.get('arguments').get('1'), Js(1.0)))
                var.put('length', var.get(u"this").get('length'))
                var.put('src', var.get('toObject')(var.get('arrayLike')))
                var.put('len', var.get('toLength')(var.get('src').get('length')))
                var.put('index', Js(0.0))
                if ((var.get('len')+var.get('offset'))>var.get('length')):
                    PyJsTempException = JsToPyException(var.get('RangeError')(var.get('WRONG_LENGTH')))
                    raise PyJsTempException
                while (var.get('index')<var.get('len')):
                    var.get(u"this").put((var.get('offset')+var.get('index')), var.get('src').get((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))))
            PyJs_set_418_._set_name('set')
            var.put('$set', PyJs_set_418_)
            @Js
            def PyJs_entries_419_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'entries':PyJs_entries_419_}, var)
                var.registers([])
                return var.get('arrayEntries').callprop('call', var.get('validate')(var.get(u"this")))
            PyJs_entries_419_._set_name('entries')
            @Js
            def PyJs_keys_420_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'keys':PyJs_keys_420_}, var)
                var.registers([])
                return var.get('arrayKeys').callprop('call', var.get('validate')(var.get(u"this")))
            PyJs_keys_420_._set_name('keys')
            @Js
            def PyJs_values_421_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'values':PyJs_values_421_}, var)
                var.registers([])
                return var.get('arrayValues').callprop('call', var.get('validate')(var.get(u"this")))
            PyJs_values_421_._set_name('values')
            var.put('$iterators', Js({'entries':PyJs_entries_419_,'keys':PyJs_keys_420_,'values':PyJs_values_421_}))
            @Js
            def PyJs_isTAIndex_422_(target, key, this, arguments, var=var):
                var = Scope({'target':target, 'key':key, 'this':this, 'arguments':arguments, 'isTAIndex':PyJs_isTAIndex_422_}, var)
                var.registers(['target', 'key'])
                return ((((var.get('isObject')(var.get('target')) and var.get('target').get(var.get('TYPED_ARRAY'))) and ((Js('undefined') if PyJsStrictEq(var.get('key',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('key')))!=Js('symbol'))) and var.get('target').contains(var.get('key'))) and (var.get('String')((+var.get('key')))==var.get('String')(var.get('key'))))
            PyJs_isTAIndex_422_._set_name('isTAIndex')
            var.put('isTAIndex', PyJs_isTAIndex_422_)
            @Js
            def PyJs_getOwnPropertyDescriptor_423_(target, key, this, arguments, var=var):
                var = Scope({'target':target, 'key':key, 'this':this, 'arguments':arguments, 'getOwnPropertyDescriptor':PyJs_getOwnPropertyDescriptor_423_}, var)
                var.registers(['target', 'key'])
                return (var.get('propertyDesc')(Js(2.0), var.get('target').get(var.get('key'))) if var.get('isTAIndex')(var.get('target'), var.put('key', var.get('toPrimitive')(var.get('key'), Js(True)))) else var.get('gOPD')(var.get('target'), var.get('key')))
            PyJs_getOwnPropertyDescriptor_423_._set_name('getOwnPropertyDescriptor')
            var.put('$getDesc', PyJs_getOwnPropertyDescriptor_423_)
            @Js
            def PyJs_defineProperty_424_(target, key, desc, this, arguments, var=var):
                var = Scope({'target':target, 'key':key, 'desc':desc, 'this':this, 'arguments':arguments, 'defineProperty':PyJs_defineProperty_424_}, var)
                var.registers(['target', 'desc', 'key'])
                def PyJs_LONG_425_(var=var):
                    return ((((((var.get('isTAIndex')(var.get('target'), var.put('key', var.get('toPrimitive')(var.get('key'), Js(True)))) and var.get('isObject')(var.get('desc'))) and var.get('has')(var.get('desc'), Js('value'))) and var.get('has')(var.get('desc'), Js('get')).neg()) and var.get('has')(var.get('desc'), Js('set')).neg()) and var.get('desc').get('configurable').neg()) and (var.get('has')(var.get('desc'), Js('writable')).neg() or var.get('desc').get('writable')))
                if (PyJs_LONG_425_() and (var.get('has')(var.get('desc'), Js('enumerable')).neg() or var.get('desc').get('enumerable'))):
                    var.get('target').put(var.get('key'), var.get('desc').get('value'))
                    return var.get('target')
                return var.get('dP')(var.get('target'), var.get('key'), var.get('desc'))
            PyJs_defineProperty_424_._set_name('defineProperty')
            var.put('$setDesc', PyJs_defineProperty_424_)
            if var.get('ALL_CONSTRUCTORS').neg():
                var.get('$GOPD').put('f', var.get('$getDesc'))
                var.get('$DP').put('f', var.get('$setDesc'))
            var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('ALL_CONSTRUCTORS').neg())), Js('Object'), Js({'getOwnPropertyDescriptor':var.get('$getDesc'),'defineProperty':var.get('$setDesc')}))
            @Js
            def PyJs_anonymous_426_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('arrayToString').callprop('call', Js({}))
            PyJs_anonymous_426_._set_name('anonymous')
            if var.get('fails')(PyJs_anonymous_426_):
                @Js
                def PyJs_toString_427_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'toString':PyJs_toString_427_}, var)
                    var.registers([])
                    return var.get('arrayJoin').callprop('call', var.get(u"this"))
                PyJs_toString_427_._set_name('toString')
                var.put('arrayToString', var.put('arrayToLocaleString', PyJs_toString_427_))
            var.put('$TypedArrayPrototype$', var.get('redefineAll')(Js({}), var.get('proto')))
            var.get('redefineAll')(var.get('$TypedArrayPrototype$'), var.get('$iterators'))
            var.get('hide')(var.get('$TypedArrayPrototype$'), var.get('ITERATOR'), var.get('$iterators').get('values'))
            @Js
            def PyJs_constructor_428_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'constructor':PyJs_constructor_428_}, var)
                var.registers([])
                pass
            PyJs_constructor_428_._set_name('constructor')
            var.get('redefineAll')(var.get('$TypedArrayPrototype$'), Js({'slice':var.get('$slice'),'set':var.get('$set'),'constructor':PyJs_constructor_428_,'toString':var.get('arrayToString'),'toLocaleString':var.get('$toLocaleString')}))
            var.get('addGetter')(var.get('$TypedArrayPrototype$'), Js('buffer'), Js('b'))
            var.get('addGetter')(var.get('$TypedArrayPrototype$'), Js('byteOffset'), Js('o'))
            var.get('addGetter')(var.get('$TypedArrayPrototype$'), Js('byteLength'), Js('l'))
            var.get('addGetter')(var.get('$TypedArrayPrototype$'), Js('length'), Js('e'))
            @Js
            def PyJs_get_429_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_429_}, var)
                var.registers([])
                return var.get(u"this").get(var.get('TYPED_ARRAY'))
            PyJs_get_429_._set_name('get')
            var.get('dP')(var.get('$TypedArrayPrototype$'), var.get('TAG'), Js({'get':PyJs_get_429_}))
            @Js
            def PyJs_anonymous_430_(KEY, BYTES, wrapper, CLAMPED, this, arguments, var=var):
                var = Scope({'KEY':KEY, 'BYTES':BYTES, 'wrapper':wrapper, 'CLAMPED':CLAMPED, 'this':this, 'arguments':arguments}, var)
                var.registers(['KEY', '$iterator', 'TypedArrayPrototype', 'O', 'Base', 'SETTER', '$nativeIterator', 'TypedArray', 'wrapper', 'FORCED', 'CLAMPED', 'NAME', 'TAC', 'GETTER', 'getter', 'BYTES', 'setter', 'addElement', 'CORRECT_ITER_NAME'])
                var.put('CLAMPED', var.get('CLAMPED').neg().neg())
                var.put('NAME', ((var.get('KEY')+(Js('Clamped') if var.get('CLAMPED') else Js('')))+Js('Array')))
                var.put('GETTER', (Js('get')+var.get('KEY')))
                var.put('SETTER', (Js('set')+var.get('KEY')))
                var.put('TypedArray', var.get('global').get(var.get('NAME')))
                var.put('Base', (var.get('TypedArray') or Js({})))
                var.put('TAC', (var.get('TypedArray') and var.get('getPrototypeOf')(var.get('TypedArray'))))
                var.put('FORCED', (var.get('TypedArray').neg() or var.get('$typed').get('ABV').neg()))
                var.put('O', Js({}))
                var.put('TypedArrayPrototype', (var.get('TypedArray') and var.get('TypedArray').get(var.get('PROTOTYPE'))))
                @Js
                def PyJs_getter_431_(that, index, this, arguments, var=var):
                    var = Scope({'that':that, 'index':index, 'this':this, 'arguments':arguments, 'getter':PyJs_getter_431_}, var)
                    var.registers(['index', 'data', 'that'])
                    var.put('data', var.get('that').get('_d'))
                    return var.get('data').get('v').callprop(var.get('GETTER'), ((var.get('index')*var.get('BYTES'))+var.get('data').get('o')), var.get('LITTLE_ENDIAN'))
                PyJs_getter_431_._set_name('getter')
                var.put('getter', PyJs_getter_431_)
                @Js
                def PyJs_setter_432_(that, index, value, this, arguments, var=var):
                    var = Scope({'that':that, 'index':index, 'value':value, 'this':this, 'arguments':arguments, 'setter':PyJs_setter_432_}, var)
                    var.registers(['index', 'value', 'data', 'that'])
                    var.put('data', var.get('that').get('_d'))
                    if var.get('CLAMPED'):
                        var.put('value', (Js(0.0) if (var.put('value', var.get('Math').callprop('round', var.get('value')))<Js(0.0)) else (Js(255) if (var.get('value')>Js(255)) else (var.get('value')&Js(255)))))
                    var.get('data').get('v').callprop(var.get('SETTER'), ((var.get('index')*var.get('BYTES'))+var.get('data').get('o')), var.get('value'), var.get('LITTLE_ENDIAN'))
                PyJs_setter_432_._set_name('setter')
                var.put('setter', PyJs_setter_432_)
                @Js
                def PyJs_addElement_433_(that, index, this, arguments, var=var):
                    var = Scope({'that':that, 'index':index, 'this':this, 'arguments':arguments, 'addElement':PyJs_addElement_433_}, var)
                    var.registers(['index', 'that'])
                    @Js
                    def PyJs_get_434_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_434_}, var)
                        var.registers([])
                        return var.get('getter')(var.get(u"this"), var.get('index'))
                    PyJs_get_434_._set_name('get')
                    @Js
                    def PyJs_set_435_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments, 'set':PyJs_set_435_}, var)
                        var.registers(['value'])
                        return var.get('setter')(var.get(u"this"), var.get('index'), var.get('value'))
                    PyJs_set_435_._set_name('set')
                    var.get('dP')(var.get('that'), var.get('index'), Js({'get':PyJs_get_434_,'set':PyJs_set_435_,'enumerable':Js(True)}))
                PyJs_addElement_433_._set_name('addElement')
                var.put('addElement', PyJs_addElement_433_)
                if var.get('FORCED'):
                    @Js
                    def PyJs_anonymous_436_(that, data, PyJsArg_246f6666736574_, PyJsArg_246c656e677468_, this, arguments, var=var):
                        var = Scope({'that':that, 'data':data, '$offset':PyJsArg_246f6666736574_, '$length':PyJsArg_246c656e677468_, 'this':this, 'arguments':arguments}, var)
                        var.registers(['buffer', '$len', 'index', 'length', '$offset', '$length', 'that', 'byteLength', 'data', 'offset', 'klass'])
                        var.get('anInstance')(var.get('that'), var.get('TypedArray'), var.get('NAME'), Js('_d'))
                        var.put('index', Js(0.0))
                        var.put('offset', Js(0.0))
                        pass
                        if var.get('isObject')(var.get('data')).neg():
                            var.put('length', var.get('toIndex')(var.get('data')))
                            var.put('byteLength', (var.get('length')*var.get('BYTES')))
                            var.put('buffer', var.get('$ArrayBuffer').create(var.get('byteLength')))
                        else:
                            if ((var.get('data').instanceof(var.get('$ArrayBuffer')) or (var.put('klass', var.get('classof')(var.get('data')))==var.get('ARRAY_BUFFER'))) or (var.get('klass')==var.get('SHARED_BUFFER'))):
                                var.put('buffer', var.get('data'))
                                var.put('offset', var.get('toOffset')(var.get('$offset'), var.get('BYTES')))
                                var.put('$len', var.get('data').get('byteLength'))
                                if PyJsStrictEq(var.get('$length'),var.get('undefined')):
                                    if (var.get('$len')%var.get('BYTES')):
                                        PyJsTempException = JsToPyException(var.get('RangeError')(var.get('WRONG_LENGTH')))
                                        raise PyJsTempException
                                    var.put('byteLength', (var.get('$len')-var.get('offset')))
                                    if (var.get('byteLength')<Js(0.0)):
                                        PyJsTempException = JsToPyException(var.get('RangeError')(var.get('WRONG_LENGTH')))
                                        raise PyJsTempException
                                else:
                                    var.put('byteLength', (var.get('toLength')(var.get('$length'))*var.get('BYTES')))
                                    if ((var.get('byteLength')+var.get('offset'))>var.get('$len')):
                                        PyJsTempException = JsToPyException(var.get('RangeError')(var.get('WRONG_LENGTH')))
                                        raise PyJsTempException
                                var.put('length', (var.get('byteLength')/var.get('BYTES')))
                            else:
                                if var.get('data').contains(var.get('TYPED_ARRAY')):
                                    return var.get('fromList')(var.get('TypedArray'), var.get('data'))
                                else:
                                    return var.get('$from').callprop('call', var.get('TypedArray'), var.get('data'))
                        var.get('hide')(var.get('that'), Js('_d'), Js({'b':var.get('buffer'),'o':var.get('offset'),'l':var.get('byteLength'),'e':var.get('length'),'v':var.get('$DataView').create(var.get('buffer'))}))
                        while (var.get('index')<var.get('length')):
                            var.get('addElement')(var.get('that'), (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1)))
                    PyJs_anonymous_436_._set_name('anonymous')
                    var.put('TypedArray', var.get('wrapper')(PyJs_anonymous_436_))
                    var.put('TypedArrayPrototype', var.get('TypedArray').put(var.get('PROTOTYPE'), var.get('create')(var.get('$TypedArrayPrototype$'))))
                    var.get('hide')(var.get('TypedArrayPrototype'), Js('constructor'), var.get('TypedArray'))
                else:
                    @Js
                    def PyJs_anonymous_437_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get('TypedArray')(Js(1.0))
                    PyJs_anonymous_437_._set_name('anonymous')
                    @Js
                    def PyJs_anonymous_438_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get('TypedArray').create((-Js(1.0)))
                    PyJs_anonymous_438_._set_name('anonymous')
                    @Js
                    def PyJs_anonymous_439_(iter, this, arguments, var=var):
                        var = Scope({'iter':iter, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iter'])
                        var.get('TypedArray').create()
                        var.get('TypedArray').create(var.get(u"null"))
                        var.get('TypedArray').create(Js(1.5))
                        var.get('TypedArray').create(var.get('iter'))
                    PyJs_anonymous_439_._set_name('anonymous')
                    if ((var.get('fails')(PyJs_anonymous_437_).neg() or var.get('fails')(PyJs_anonymous_438_).neg()) or var.get('$iterDetect')(PyJs_anonymous_439_, Js(True)).neg()):
                        @Js
                        def PyJs_anonymous_440_(that, data, PyJsArg_246f6666736574_, PyJsArg_246c656e677468_, this, arguments, var=var):
                            var = Scope({'that':that, 'data':data, '$offset':PyJsArg_246f6666736574_, '$length':PyJsArg_246c656e677468_, 'this':this, 'arguments':arguments}, var)
                            var.registers(['$length', '$offset', 'that', 'data', 'klass'])
                            var.get('anInstance')(var.get('that'), var.get('TypedArray'), var.get('NAME'))
                            pass
                            if var.get('isObject')(var.get('data')).neg():
                                return var.get('Base').create(var.get('toIndex')(var.get('data')))
                            if ((var.get('data').instanceof(var.get('$ArrayBuffer')) or (var.put('klass', var.get('classof')(var.get('data')))==var.get('ARRAY_BUFFER'))) or (var.get('klass')==var.get('SHARED_BUFFER'))):
                                return (var.get('Base').create(var.get('data'), var.get('toOffset')(var.get('$offset'), var.get('BYTES')), var.get('$length')) if PyJsStrictNeq(var.get('$length'),var.get('undefined')) else (var.get('Base').create(var.get('data'), var.get('toOffset')(var.get('$offset'), var.get('BYTES'))) if PyJsStrictNeq(var.get('$offset'),var.get('undefined')) else var.get('Base').create(var.get('data'))))
                            if var.get('data').contains(var.get('TYPED_ARRAY')):
                                return var.get('fromList')(var.get('TypedArray'), var.get('data'))
                            return var.get('$from').callprop('call', var.get('TypedArray'), var.get('data'))
                        PyJs_anonymous_440_._set_name('anonymous')
                        var.put('TypedArray', var.get('wrapper')(PyJs_anonymous_440_))
                        @Js
                        def PyJs_anonymous_441_(key, this, arguments, var=var):
                            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                            var.registers(['key'])
                            if var.get('TypedArray').contains(var.get('key')).neg():
                                var.get('hide')(var.get('TypedArray'), var.get('key'), var.get('Base').get(var.get('key')))
                        PyJs_anonymous_441_._set_name('anonymous')
                        var.get('arrayForEach')((var.get('gOPN')(var.get('Base')).callprop('concat', var.get('gOPN')(var.get('TAC'))) if PyJsStrictNeq(var.get('TAC'),var.get('Function').get('prototype')) else var.get('gOPN')(var.get('Base'))), PyJs_anonymous_441_)
                        var.get('TypedArray').put(var.get('PROTOTYPE'), var.get('TypedArrayPrototype'))
                        if var.get('LIBRARY').neg():
                            var.get('TypedArrayPrototype').put('constructor', var.get('TypedArray'))
                var.put('$nativeIterator', var.get('TypedArrayPrototype').get(var.get('ITERATOR')))
                var.put('CORRECT_ITER_NAME', (var.get('$nativeIterator').neg().neg() and ((var.get('$nativeIterator').get('name')==Js('values')) or (var.get('$nativeIterator').get('name')==var.get('undefined')))))
                var.put('$iterator', var.get('$iterators').get('values'))
                var.get('hide')(var.get('TypedArray'), var.get('TYPED_CONSTRUCTOR'), Js(True))
                var.get('hide')(var.get('TypedArrayPrototype'), var.get('TYPED_ARRAY'), var.get('NAME'))
                var.get('hide')(var.get('TypedArrayPrototype'), var.get('VIEW'), Js(True))
                var.get('hide')(var.get('TypedArrayPrototype'), var.get('DEF_CONSTRUCTOR'), var.get('TypedArray'))
                if ((var.get('TypedArray').create(Js(1.0)).get(var.get('TAG'))!=var.get('NAME')) if var.get('CLAMPED') else var.get('TypedArrayPrototype').contains(var.get('TAG')).neg()):
                    @Js
                    def PyJs_get_442_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_442_}, var)
                        var.registers([])
                        return var.get('NAME')
                    PyJs_get_442_._set_name('get')
                    var.get('dP')(var.get('TypedArrayPrototype'), var.get('TAG'), Js({'get':PyJs_get_442_}))
                var.get('O').put(var.get('NAME'), var.get('TypedArray'))
                var.get('$export')(((var.get('$export').get('G')+var.get('$export').get('W'))+(var.get('$export').get('F')*(var.get('TypedArray')!=var.get('Base')))), var.get('O'))
                var.get('$export')(var.get('$export').get('S'), var.get('NAME'), Js({'BYTES_PER_ELEMENT':var.get('BYTES')}))
                @Js
                def PyJs_anonymous_443_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get('Base').get('of').callprop('call', var.get('TypedArray'), Js(1.0))
                PyJs_anonymous_443_._set_name('anonymous')
                var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('fails')(PyJs_anonymous_443_))), var.get('NAME'), Js({'from':var.get('$from'),'of':var.get('$of')}))
                if var.get('TypedArrayPrototype').contains(var.get('BYTES_PER_ELEMENT')).neg():
                    var.get('hide')(var.get('TypedArrayPrototype'), var.get('BYTES_PER_ELEMENT'), var.get('BYTES'))
                var.get('$export')(var.get('$export').get('P'), var.get('NAME'), var.get('proto'))
                var.get('setSpecies')(var.get('NAME'))
                var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('FORCED_SET'))), var.get('NAME'), Js({'set':var.get('$set')}))
                var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('CORRECT_ITER_NAME').neg())), var.get('NAME'), var.get('$iterators'))
                if (var.get('LIBRARY').neg() and (var.get('TypedArrayPrototype').get('toString')!=var.get('arrayToString'))):
                    var.get('TypedArrayPrototype').put('toString', var.get('arrayToString'))
                @Js
                def PyJs_anonymous_444_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get('TypedArray').create(Js(1.0)).callprop('slice')
                PyJs_anonymous_444_._set_name('anonymous')
                var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('fails')(PyJs_anonymous_444_))), var.get('NAME'), Js({'slice':var.get('$slice')}))
                @Js
                def PyJs_anonymous_445_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return (Js([Js(1.0), Js(2.0)]).callprop('toLocaleString')!=var.get('TypedArray').create(Js([Js(1.0), Js(2.0)])).callprop('toLocaleString'))
                PyJs_anonymous_445_._set_name('anonymous')
                @Js
                def PyJs_anonymous_446_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get('TypedArrayPrototype').get('toLocaleString').callprop('call', Js([Js(1.0), Js(2.0)]))
                PyJs_anonymous_446_._set_name('anonymous')
                var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*(var.get('fails')(PyJs_anonymous_445_) or var.get('fails')(PyJs_anonymous_446_).neg()))), var.get('NAME'), Js({'toLocaleString':var.get('$toLocaleString')}))
                var.get('Iterators').put(var.get('NAME'), (var.get('$nativeIterator') if var.get('CORRECT_ITER_NAME') else var.get('$iterator')))
                if (var.get('LIBRARY').neg() and var.get('CORRECT_ITER_NAME').neg()):
                    var.get('hide')(var.get('TypedArrayPrototype'), var.get('ITERATOR'), var.get('$iterator'))
            PyJs_anonymous_430_._set_name('anonymous')
            var.get('module').put('exports', PyJs_anonymous_430_)
        else:
            @Js
            def PyJs_anonymous_447_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                pass
            PyJs_anonymous_447_._set_name('anonymous')
            var.get('module').put('exports', PyJs_anonymous_447_)
    PyJs_anonymous_384_._set_name('anonymous')
    @Js
    def PyJs_anonymous_448_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['hide', 'DATA_VIEW', 'packI8', 'DESCRIPTORS', '$BUFFER', 'BUFFER', 'view', 'set', 'toIndex', 'dP', 'toInteger', 'key', 'setToStringTag', 'toLength', 'RangeError', 'packF32', '$OFFSET', 'gOPN', 'LIBRARY', 'require', 'WRONG_INDEX', 'get', 'Math', 'BaseBuffer', 'LN2', '$typed', 'abs', 'module', '$DataView', 'fails', 'global', 'pow', 'packF64', 'log', 'keys', 'unpackIEEE754', 'PROTOTYPE', '$setInt8', 'redefineAll', 'anInstance', 'Infinity', 'floor', 'packIEEE754', 'arrayFill', 'unpackI32', '$ArrayBuffer', '$LENGTH', 'packI32', 'exports', 'ArrayBufferProto', 'j', 'BYTE_LENGTH', 'ARRAY_BUFFER', 'BYTE_OFFSET', 'WRONG_LENGTH', 'addGetter', 'packI16'])
        @Js
        def PyJsHoisted_packIEEE754_(value, mLen, nBytes, this, arguments, var=var):
            var = Scope({'value':value, 'mLen':mLen, 'nBytes':nBytes, 'this':this, 'arguments':arguments}, var)
            var.registers(['buffer', 'rt', 'mLen', 'i', 'eLen', 'eBias', 'm', 'e', 'nBytes', 'eMax', 'value', 'c', 's'])
            var.put('buffer', var.get('Array').create(var.get('nBytes')))
            var.put('eLen', (((var.get('nBytes')*Js(8.0))-var.get('mLen'))-Js(1.0)))
            var.put('eMax', ((Js(1.0)<<var.get('eLen'))-Js(1.0)))
            var.put('eBias', (var.get('eMax')>>Js(1.0)))
            var.put('rt', ((var.get('pow')(Js(2.0), (-Js(24.0)))-var.get('pow')(Js(2.0), (-Js(77.0)))) if PyJsStrictEq(var.get('mLen'),Js(23.0)) else Js(0.0)))
            var.put('i', Js(0.0))
            var.put('s', (Js(1.0) if ((var.get('value')<Js(0.0)) or (PyJsStrictEq(var.get('value'),Js(0.0)) and ((Js(1.0)/var.get('value'))<Js(0.0)))) else Js(0.0)))
            pass
            var.put('value', var.get('abs')(var.get('value')))
            if ((var.get('value')!=var.get('value')) or PyJsStrictEq(var.get('value'),var.get('Infinity'))):
                var.put('m', (Js(1.0) if (var.get('value')!=var.get('value')) else Js(0.0)))
                var.put('e', var.get('eMax'))
            else:
                var.put('e', var.get('floor')((var.get('log')(var.get('value'))/var.get('LN2'))))
                if ((var.get('value')*var.put('c', var.get('pow')(Js(2.0), (-var.get('e')))))<Js(1.0)):
                    (var.put('e',Js(var.get('e').to_number())-Js(1))+Js(1))
                    var.put('c', Js(2.0), '*')
                if ((var.get('e')+var.get('eBias'))>=Js(1.0)):
                    var.put('value', (var.get('rt')/var.get('c')), '+')
                else:
                    var.put('value', (var.get('rt')*var.get('pow')(Js(2.0), (Js(1.0)-var.get('eBias')))), '+')
                if ((var.get('value')*var.get('c'))>=Js(2.0)):
                    (var.put('e',Js(var.get('e').to_number())+Js(1))-Js(1))
                    var.put('c', Js(2.0), '/')
                if ((var.get('e')+var.get('eBias'))>=var.get('eMax')):
                    var.put('m', Js(0.0))
                    var.put('e', var.get('eMax'))
                else:
                    if ((var.get('e')+var.get('eBias'))>=Js(1.0)):
                        var.put('m', (((var.get('value')*var.get('c'))-Js(1.0))*var.get('pow')(Js(2.0), var.get('mLen'))))
                        var.put('e', (var.get('e')+var.get('eBias')))
                    else:
                        var.put('m', ((var.get('value')*var.get('pow')(Js(2.0), (var.get('eBias')-Js(1.0))))*var.get('pow')(Js(2.0), var.get('mLen'))))
                        var.put('e', Js(0.0))
            #for JS loop
            
            while (var.get('mLen')>=Js(8.0)):
                try:
                    pass
                finally:
                        PyJsComma(PyJsComma(var.get('buffer').put((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)), (var.get('m')&Js(255.0))),var.put('m', Js(256.0), '/')),var.put('mLen', Js(8.0), '-'))
            var.put('e', ((var.get('e')<<var.get('mLen'))|var.get('m')))
            var.put('eLen', var.get('mLen'), '+')
            #for JS loop
            
            while (var.get('eLen')>Js(0.0)):
                try:
                    pass
                finally:
                        PyJsComma(PyJsComma(var.get('buffer').put((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)), (var.get('e')&Js(255.0))),var.put('e', Js(256.0), '/')),var.put('eLen', Js(8.0), '-'))
            var.get('buffer').put(var.put('i',Js(var.get('i').to_number())-Js(1)), (var.get('s')*Js(128.0)), '|')
            return var.get('buffer')
        PyJsHoisted_packIEEE754_.func_name = 'packIEEE754'
        var.put('packIEEE754', PyJsHoisted_packIEEE754_)
        @Js
        def PyJsHoisted_unpackIEEE754_(buffer, mLen, nBytes, this, arguments, var=var):
            var = Scope({'buffer':buffer, 'mLen':mLen, 'nBytes':nBytes, 'this':this, 'arguments':arguments}, var)
            var.registers(['nBits', 'buffer', 'mLen', 'i', 'eLen', 'eBias', 'm', 'e', 'nBytes', 'eMax', 's'])
            var.put('eLen', (((var.get('nBytes')*Js(8.0))-var.get('mLen'))-Js(1.0)))
            var.put('eMax', ((Js(1.0)<<var.get('eLen'))-Js(1.0)))
            var.put('eBias', (var.get('eMax')>>Js(1.0)))
            var.put('nBits', (var.get('eLen')-Js(7.0)))
            var.put('i', (var.get('nBytes')-Js(1.0)))
            var.put('s', var.get('buffer').get((var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))))
            var.put('e', (var.get('s')&Js(127.0)))
            pass
            var.put('s', Js(7.0), '>>')
            #for JS loop
            
            while (var.get('nBits')>Js(0.0)):
                try:
                    pass
                finally:
                        PyJsComma(PyJsComma(var.put('e', ((var.get('e')*Js(256.0))+var.get('buffer').get(var.get('i')))),(var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))),var.put('nBits', Js(8.0), '-'))
            var.put('m', (var.get('e')&((Js(1.0)<<(-var.get('nBits')))-Js(1.0))))
            var.put('e', (-var.get('nBits')), '>>')
            var.put('nBits', var.get('mLen'), '+')
            #for JS loop
            
            while (var.get('nBits')>Js(0.0)):
                try:
                    pass
                finally:
                        PyJsComma(PyJsComma(var.put('m', ((var.get('m')*Js(256.0))+var.get('buffer').get(var.get('i')))),(var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))),var.put('nBits', Js(8.0), '-'))
            if PyJsStrictEq(var.get('e'),Js(0.0)):
                var.put('e', (Js(1.0)-var.get('eBias')))
            else:
                if PyJsStrictEq(var.get('e'),var.get('eMax')):
                    return (var.get('NaN') if var.get('m') else ((-var.get('Infinity')) if var.get('s') else var.get('Infinity')))
                else:
                    var.put('m', (var.get('m')+var.get('pow')(Js(2.0), var.get('mLen'))))
                    var.put('e', (var.get('e')-var.get('eBias')))
            return ((((-Js(1.0)) if var.get('s') else Js(1.0))*var.get('m'))*var.get('pow')(Js(2.0), (var.get('e')-var.get('mLen'))))
        PyJsHoisted_unpackIEEE754_.func_name = 'unpackIEEE754'
        var.put('unpackIEEE754', PyJsHoisted_unpackIEEE754_)
        @Js
        def PyJsHoisted_unpackI32_(bytes, this, arguments, var=var):
            var = Scope({'bytes':bytes, 'this':this, 'arguments':arguments}, var)
            var.registers(['bytes'])
            return ((((var.get('bytes').get('3')<<Js(24.0))|(var.get('bytes').get('2')<<Js(16.0)))|(var.get('bytes').get('1')<<Js(8.0)))|var.get('bytes').get('0'))
        PyJsHoisted_unpackI32_.func_name = 'unpackI32'
        var.put('unpackI32', PyJsHoisted_unpackI32_)
        @Js
        def PyJsHoisted_packI8_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return Js([(var.get('it')&Js(255))])
        PyJsHoisted_packI8_.func_name = 'packI8'
        var.put('packI8', PyJsHoisted_packI8_)
        @Js
        def PyJsHoisted_packI16_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return Js([(var.get('it')&Js(255)), ((var.get('it')>>Js(8.0))&Js(255))])
        PyJsHoisted_packI16_.func_name = 'packI16'
        var.put('packI16', PyJsHoisted_packI16_)
        @Js
        def PyJsHoisted_packI32_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return Js([(var.get('it')&Js(255)), ((var.get('it')>>Js(8.0))&Js(255)), ((var.get('it')>>Js(16.0))&Js(255)), ((var.get('it')>>Js(24.0))&Js(255))])
        PyJsHoisted_packI32_.func_name = 'packI32'
        var.put('packI32', PyJsHoisted_packI32_)
        @Js
        def PyJsHoisted_packF64_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return var.get('packIEEE754')(var.get('it'), Js(52.0), Js(8.0))
        PyJsHoisted_packF64_.func_name = 'packF64'
        var.put('packF64', PyJsHoisted_packF64_)
        @Js
        def PyJsHoisted_packF32_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return var.get('packIEEE754')(var.get('it'), Js(23.0), Js(4.0))
        PyJsHoisted_packF32_.func_name = 'packF32'
        var.put('packF32', PyJsHoisted_packF32_)
        @Js
        def PyJsHoisted_addGetter_(C, key, internal, this, arguments, var=var):
            var = Scope({'C':C, 'key':key, 'internal':internal, 'this':this, 'arguments':arguments}, var)
            var.registers(['C', 'internal', 'key'])
            @Js
            def PyJs_get_449_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_449_}, var)
                var.registers([])
                return var.get(u"this").get(var.get('internal'))
            PyJs_get_449_._set_name('get')
            var.get('dP')(var.get('C').get(var.get('PROTOTYPE')), var.get('key'), Js({'get':PyJs_get_449_}))
        PyJsHoisted_addGetter_.func_name = 'addGetter'
        var.put('addGetter', PyJsHoisted_addGetter_)
        @Js
        def PyJsHoisted_get_(view, bytes, index, isLittleEndian, this, arguments, var=var):
            var = Scope({'view':view, 'bytes':bytes, 'index':index, 'isLittleEndian':isLittleEndian, 'this':this, 'arguments':arguments}, var)
            var.registers(['index', 'isLittleEndian', 'start', 'numIndex', 'store', 'intIndex', 'view', 'bytes', 'pack'])
            var.put('numIndex', (+var.get('index')))
            var.put('intIndex', var.get('toIndex')(var.get('numIndex')))
            if ((var.get('intIndex')+var.get('bytes'))>var.get('view').get(var.get('$LENGTH'))):
                PyJsTempException = JsToPyException(var.get('RangeError')(var.get('WRONG_INDEX')))
                raise PyJsTempException
            var.put('store', var.get('view').get(var.get('$BUFFER')).get('_b'))
            var.put('start', (var.get('intIndex')+var.get('view').get(var.get('$OFFSET'))))
            var.put('pack', var.get('store').callprop('slice', var.get('start'), (var.get('start')+var.get('bytes'))))
            return (var.get('pack') if var.get('isLittleEndian') else var.get('pack').callprop('reverse'))
        PyJsHoisted_get_.func_name = 'get'
        var.put('get', PyJsHoisted_get_)
        @Js
        def PyJsHoisted_set_(view, bytes, index, conversion, value, isLittleEndian, this, arguments, var=var):
            var = Scope({'view':view, 'bytes':bytes, 'index':index, 'conversion':conversion, 'value':value, 'isLittleEndian':isLittleEndian, 'this':this, 'arguments':arguments}, var)
            var.registers(['index', 'conversion', 'i', 'isLittleEndian', 'start', 'numIndex', 'store', 'intIndex', 'view', 'bytes', 'value', 'pack'])
            var.put('numIndex', (+var.get('index')))
            var.put('intIndex', var.get('toIndex')(var.get('numIndex')))
            if ((var.get('intIndex')+var.get('bytes'))>var.get('view').get(var.get('$LENGTH'))):
                PyJsTempException = JsToPyException(var.get('RangeError')(var.get('WRONG_INDEX')))
                raise PyJsTempException
            var.put('store', var.get('view').get(var.get('$BUFFER')).get('_b'))
            var.put('start', (var.get('intIndex')+var.get('view').get(var.get('$OFFSET'))))
            var.put('pack', var.get('conversion')((+var.get('value'))))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('bytes')):
                try:
                    var.get('store').put((var.get('start')+var.get('i')), var.get('pack').get((var.get('i') if var.get('isLittleEndian') else ((var.get('bytes')-var.get('i'))-Js(1.0)))))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        PyJsHoisted_set_.func_name = 'set'
        var.put('set', PyJsHoisted_set_)
        Js('use strict')
        var.put('global', var.get('require')(Js('./_global')))
        var.put('DESCRIPTORS', var.get('require')(Js('./_descriptors')))
        var.put('LIBRARY', var.get('require')(Js('./_library')))
        var.put('$typed', var.get('require')(Js('./_typed')))
        var.put('hide', var.get('require')(Js('./_hide')))
        var.put('redefineAll', var.get('require')(Js('./_redefine-all')))
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('anInstance', var.get('require')(Js('./_an-instance')))
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('toIndex', var.get('require')(Js('./_to-index')))
        var.put('gOPN', var.get('require')(Js('./_object-gopn')).get('f'))
        var.put('dP', var.get('require')(Js('./_object-dp')).get('f'))
        var.put('arrayFill', var.get('require')(Js('./_array-fill')))
        var.put('setToStringTag', var.get('require')(Js('./_set-to-string-tag')))
        var.put('ARRAY_BUFFER', Js('ArrayBuffer'))
        var.put('DATA_VIEW', Js('DataView'))
        var.put('PROTOTYPE', Js('prototype'))
        var.put('WRONG_LENGTH', Js('Wrong length!'))
        var.put('WRONG_INDEX', Js('Wrong index!'))
        var.put('$ArrayBuffer', var.get('global').get(var.get('ARRAY_BUFFER')))
        var.put('$DataView', var.get('global').get(var.get('DATA_VIEW')))
        var.put('Math', var.get('global').get('Math'))
        var.put('RangeError', var.get('global').get('RangeError'))
        var.put('Infinity', var.get('global').get('Infinity'))
        var.put('BaseBuffer', var.get('$ArrayBuffer'))
        var.put('abs', var.get('Math').get('abs'))
        var.put('pow', var.get('Math').get('pow'))
        var.put('floor', var.get('Math').get('floor'))
        var.put('log', var.get('Math').get('log'))
        var.put('LN2', var.get('Math').get('LN2'))
        var.put('BUFFER', Js('buffer'))
        var.put('BYTE_LENGTH', Js('byteLength'))
        var.put('BYTE_OFFSET', Js('byteOffset'))
        var.put('$BUFFER', (Js('_b') if var.get('DESCRIPTORS') else var.get('BUFFER')))
        var.put('$LENGTH', (Js('_l') if var.get('DESCRIPTORS') else var.get('BYTE_LENGTH')))
        var.put('$OFFSET', (Js('_o') if var.get('DESCRIPTORS') else var.get('BYTE_OFFSET')))
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        if var.get('$typed').get('ABV').neg():
            @Js
            def PyJs_ArrayBuffer_450_(length, this, arguments, var=var):
                var = Scope({'length':length, 'this':this, 'arguments':arguments, 'ArrayBuffer':PyJs_ArrayBuffer_450_}, var)
                var.registers(['length', 'byteLength'])
                var.get('anInstance')(var.get(u"this"), var.get('$ArrayBuffer'), var.get('ARRAY_BUFFER'))
                var.put('byteLength', var.get('toIndex')(var.get('length')))
                var.get(u"this").put('_b', var.get('arrayFill').callprop('call', var.get('Array').create(var.get('byteLength')), Js(0.0)))
                var.get(u"this").put(var.get('$LENGTH'), var.get('byteLength'))
            PyJs_ArrayBuffer_450_._set_name('ArrayBuffer')
            var.put('$ArrayBuffer', PyJs_ArrayBuffer_450_)
            @Js
            def PyJs_DataView_451_(buffer, byteOffset, byteLength, this, arguments, var=var):
                var = Scope({'buffer':buffer, 'byteOffset':byteOffset, 'byteLength':byteLength, 'this':this, 'arguments':arguments, 'DataView':PyJs_DataView_451_}, var)
                var.registers(['buffer', 'byteOffset', 'byteLength', 'bufferLength', 'offset'])
                var.get('anInstance')(var.get(u"this"), var.get('$DataView'), var.get('DATA_VIEW'))
                var.get('anInstance')(var.get('buffer'), var.get('$ArrayBuffer'), var.get('DATA_VIEW'))
                var.put('bufferLength', var.get('buffer').get(var.get('$LENGTH')))
                var.put('offset', var.get('toInteger')(var.get('byteOffset')))
                if ((var.get('offset')<Js(0.0)) or (var.get('offset')>var.get('bufferLength'))):
                    PyJsTempException = JsToPyException(var.get('RangeError')(Js('Wrong offset!')))
                    raise PyJsTempException
                var.put('byteLength', ((var.get('bufferLength')-var.get('offset')) if PyJsStrictEq(var.get('byteLength'),var.get('undefined')) else var.get('toLength')(var.get('byteLength'))))
                if ((var.get('offset')+var.get('byteLength'))>var.get('bufferLength')):
                    PyJsTempException = JsToPyException(var.get('RangeError')(var.get('WRONG_LENGTH')))
                    raise PyJsTempException
                var.get(u"this").put(var.get('$BUFFER'), var.get('buffer'))
                var.get(u"this").put(var.get('$OFFSET'), var.get('offset'))
                var.get(u"this").put(var.get('$LENGTH'), var.get('byteLength'))
            PyJs_DataView_451_._set_name('DataView')
            var.put('$DataView', PyJs_DataView_451_)
            if var.get('DESCRIPTORS'):
                var.get('addGetter')(var.get('$ArrayBuffer'), var.get('BYTE_LENGTH'), Js('_l'))
                var.get('addGetter')(var.get('$DataView'), var.get('BUFFER'), Js('_b'))
                var.get('addGetter')(var.get('$DataView'), var.get('BYTE_LENGTH'), Js('_l'))
                var.get('addGetter')(var.get('$DataView'), var.get('BYTE_OFFSET'), Js('_o'))
            def PyJs_LONG_468_(var=var):
                @Js
                def PyJs_getInt8_452_(byteOffset, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'this':this, 'arguments':arguments, 'getInt8':PyJs_getInt8_452_}, var)
                    var.registers(['byteOffset'])
                    return ((var.get('get')(var.get(u"this"), Js(1.0), var.get('byteOffset')).get('0')<<Js(24.0))>>Js(24.0))
                PyJs_getInt8_452_._set_name('getInt8')
                @Js
                def PyJs_getUint8_453_(byteOffset, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'this':this, 'arguments':arguments, 'getUint8':PyJs_getUint8_453_}, var)
                    var.registers(['byteOffset'])
                    return var.get('get')(var.get(u"this"), Js(1.0), var.get('byteOffset')).get('0')
                PyJs_getUint8_453_._set_name('getUint8')
                @Js
                def PyJs_getInt16_454_(byteOffset, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'this':this, 'arguments':arguments, 'getInt16':PyJs_getInt16_454_}, var)
                    var.registers(['byteOffset', 'bytes'])
                    var.put('bytes', var.get('get')(var.get(u"this"), Js(2.0), var.get('byteOffset'), var.get('arguments').get('1')))
                    return ((((var.get('bytes').get('1')<<Js(8.0))|var.get('bytes').get('0'))<<Js(16.0))>>Js(16.0))
                PyJs_getInt16_454_._set_name('getInt16')
                @Js
                def PyJs_getUint16_455_(byteOffset, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'this':this, 'arguments':arguments, 'getUint16':PyJs_getUint16_455_}, var)
                    var.registers(['byteOffset', 'bytes'])
                    var.put('bytes', var.get('get')(var.get(u"this"), Js(2.0), var.get('byteOffset'), var.get('arguments').get('1')))
                    return ((var.get('bytes').get('1')<<Js(8.0))|var.get('bytes').get('0'))
                PyJs_getUint16_455_._set_name('getUint16')
                @Js
                def PyJs_getInt32_456_(byteOffset, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'this':this, 'arguments':arguments, 'getInt32':PyJs_getInt32_456_}, var)
                    var.registers(['byteOffset'])
                    return var.get('unpackI32')(var.get('get')(var.get(u"this"), Js(4.0), var.get('byteOffset'), var.get('arguments').get('1')))
                PyJs_getInt32_456_._set_name('getInt32')
                @Js
                def PyJs_getUint32_457_(byteOffset, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'this':this, 'arguments':arguments, 'getUint32':PyJs_getUint32_457_}, var)
                    var.registers(['byteOffset'])
                    return PyJsBshift(var.get('unpackI32')(var.get('get')(var.get(u"this"), Js(4.0), var.get('byteOffset'), var.get('arguments').get('1'))),Js(0.0))
                PyJs_getUint32_457_._set_name('getUint32')
                @Js
                def PyJs_getFloat32_458_(byteOffset, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'this':this, 'arguments':arguments, 'getFloat32':PyJs_getFloat32_458_}, var)
                    var.registers(['byteOffset'])
                    return var.get('unpackIEEE754')(var.get('get')(var.get(u"this"), Js(4.0), var.get('byteOffset'), var.get('arguments').get('1')), Js(23.0), Js(4.0))
                PyJs_getFloat32_458_._set_name('getFloat32')
                @Js
                def PyJs_getFloat64_459_(byteOffset, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'this':this, 'arguments':arguments, 'getFloat64':PyJs_getFloat64_459_}, var)
                    var.registers(['byteOffset'])
                    return var.get('unpackIEEE754')(var.get('get')(var.get(u"this"), Js(8.0), var.get('byteOffset'), var.get('arguments').get('1')), Js(52.0), Js(8.0))
                PyJs_getFloat64_459_._set_name('getFloat64')
                @Js
                def PyJs_setInt8_460_(byteOffset, value, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'value':value, 'this':this, 'arguments':arguments, 'setInt8':PyJs_setInt8_460_}, var)
                    var.registers(['byteOffset', 'value'])
                    var.get('set')(var.get(u"this"), Js(1.0), var.get('byteOffset'), var.get('packI8'), var.get('value'))
                PyJs_setInt8_460_._set_name('setInt8')
                @Js
                def PyJs_setUint8_461_(byteOffset, value, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'value':value, 'this':this, 'arguments':arguments, 'setUint8':PyJs_setUint8_461_}, var)
                    var.registers(['byteOffset', 'value'])
                    var.get('set')(var.get(u"this"), Js(1.0), var.get('byteOffset'), var.get('packI8'), var.get('value'))
                PyJs_setUint8_461_._set_name('setUint8')
                @Js
                def PyJs_setInt16_462_(byteOffset, value, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'value':value, 'this':this, 'arguments':arguments, 'setInt16':PyJs_setInt16_462_}, var)
                    var.registers(['byteOffset', 'value'])
                    var.get('set')(var.get(u"this"), Js(2.0), var.get('byteOffset'), var.get('packI16'), var.get('value'), var.get('arguments').get('2'))
                PyJs_setInt16_462_._set_name('setInt16')
                @Js
                def PyJs_setUint16_463_(byteOffset, value, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'value':value, 'this':this, 'arguments':arguments, 'setUint16':PyJs_setUint16_463_}, var)
                    var.registers(['byteOffset', 'value'])
                    var.get('set')(var.get(u"this"), Js(2.0), var.get('byteOffset'), var.get('packI16'), var.get('value'), var.get('arguments').get('2'))
                PyJs_setUint16_463_._set_name('setUint16')
                @Js
                def PyJs_setInt32_464_(byteOffset, value, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'value':value, 'this':this, 'arguments':arguments, 'setInt32':PyJs_setInt32_464_}, var)
                    var.registers(['byteOffset', 'value'])
                    var.get('set')(var.get(u"this"), Js(4.0), var.get('byteOffset'), var.get('packI32'), var.get('value'), var.get('arguments').get('2'))
                PyJs_setInt32_464_._set_name('setInt32')
                @Js
                def PyJs_setUint32_465_(byteOffset, value, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'value':value, 'this':this, 'arguments':arguments, 'setUint32':PyJs_setUint32_465_}, var)
                    var.registers(['byteOffset', 'value'])
                    var.get('set')(var.get(u"this"), Js(4.0), var.get('byteOffset'), var.get('packI32'), var.get('value'), var.get('arguments').get('2'))
                PyJs_setUint32_465_._set_name('setUint32')
                @Js
                def PyJs_setFloat32_466_(byteOffset, value, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'value':value, 'this':this, 'arguments':arguments, 'setFloat32':PyJs_setFloat32_466_}, var)
                    var.registers(['byteOffset', 'value'])
                    var.get('set')(var.get(u"this"), Js(4.0), var.get('byteOffset'), var.get('packF32'), var.get('value'), var.get('arguments').get('2'))
                PyJs_setFloat32_466_._set_name('setFloat32')
                @Js
                def PyJs_setFloat64_467_(byteOffset, value, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'value':value, 'this':this, 'arguments':arguments, 'setFloat64':PyJs_setFloat64_467_}, var)
                    var.registers(['byteOffset', 'value'])
                    var.get('set')(var.get(u"this"), Js(8.0), var.get('byteOffset'), var.get('packF64'), var.get('value'), var.get('arguments').get('2'))
                PyJs_setFloat64_467_._set_name('setFloat64')
                return var.get('redefineAll')(var.get('$DataView').get(var.get('PROTOTYPE')), Js({'getInt8':PyJs_getInt8_452_,'getUint8':PyJs_getUint8_453_,'getInt16':PyJs_getInt16_454_,'getUint16':PyJs_getUint16_455_,'getInt32':PyJs_getInt32_456_,'getUint32':PyJs_getUint32_457_,'getFloat32':PyJs_getFloat32_458_,'getFloat64':PyJs_getFloat64_459_,'setInt8':PyJs_setInt8_460_,'setUint8':PyJs_setUint8_461_,'setInt16':PyJs_setInt16_462_,'setUint16':PyJs_setUint16_463_,'setInt32':PyJs_setInt32_464_,'setUint32':PyJs_setUint32_465_,'setFloat32':PyJs_setFloat32_466_,'setFloat64':PyJs_setFloat64_467_}))
            PyJs_LONG_468_()
        else:
            @Js
            def PyJs_anonymous_469_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('$ArrayBuffer')(Js(1.0))
            PyJs_anonymous_469_._set_name('anonymous')
            @Js
            def PyJs_anonymous_470_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('$ArrayBuffer').create((-Js(1.0)))
            PyJs_anonymous_470_._set_name('anonymous')
            @Js
            def PyJs_anonymous_471_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('$ArrayBuffer').create()
                var.get('$ArrayBuffer').create(Js(1.5))
                var.get('$ArrayBuffer').create(var.get('NaN'))
                return (var.get('$ArrayBuffer').get('name')!=var.get('ARRAY_BUFFER'))
            PyJs_anonymous_471_._set_name('anonymous')
            if ((var.get('fails')(PyJs_anonymous_469_).neg() or var.get('fails')(PyJs_anonymous_470_).neg()) or var.get('fails')(PyJs_anonymous_471_)):
                @Js
                def PyJs_ArrayBuffer_472_(length, this, arguments, var=var):
                    var = Scope({'length':length, 'this':this, 'arguments':arguments, 'ArrayBuffer':PyJs_ArrayBuffer_472_}, var)
                    var.registers(['length'])
                    var.get('anInstance')(var.get(u"this"), var.get('$ArrayBuffer'))
                    return var.get('BaseBuffer').create(var.get('toIndex')(var.get('length')))
                PyJs_ArrayBuffer_472_._set_name('ArrayBuffer')
                var.put('$ArrayBuffer', PyJs_ArrayBuffer_472_)
                var.put('ArrayBufferProto', var.get('$ArrayBuffer').put(var.get('PROTOTYPE'), var.get('BaseBuffer').get(var.get('PROTOTYPE'))))
                #for JS loop
                var.put('keys', var.get('gOPN')(var.get('BaseBuffer')))
                var.put('j', Js(0.0))
                while (var.get('keys').get('length')>var.get('j')):
                    if var.get('$ArrayBuffer').contains(var.put('key', var.get('keys').get((var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))))).neg():
                        var.get('hide')(var.get('$ArrayBuffer'), var.get('key'), var.get('BaseBuffer').get(var.get('key')))
                
                if var.get('LIBRARY').neg():
                    var.get('ArrayBufferProto').put('constructor', var.get('$ArrayBuffer'))
            var.put('view', var.get('$DataView').create(var.get('$ArrayBuffer').create(Js(2.0))))
            var.put('$setInt8', var.get('$DataView').get(var.get('PROTOTYPE')).get('setInt8'))
            var.get('view').callprop('setInt8', Js(0.0), Js(2147483648.0))
            var.get('view').callprop('setInt8', Js(1.0), Js(2147483649.0))
            if (var.get('view').callprop('getInt8', Js(0.0)) or var.get('view').callprop('getInt8', Js(1.0)).neg()):
                @Js
                def PyJs_setInt8_473_(byteOffset, value, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'value':value, 'this':this, 'arguments':arguments, 'setInt8':PyJs_setInt8_473_}, var)
                    var.registers(['byteOffset', 'value'])
                    var.get('$setInt8').callprop('call', var.get(u"this"), var.get('byteOffset'), ((var.get('value')<<Js(24.0))>>Js(24.0)))
                PyJs_setInt8_473_._set_name('setInt8')
                @Js
                def PyJs_setUint8_474_(byteOffset, value, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'value':value, 'this':this, 'arguments':arguments, 'setUint8':PyJs_setUint8_474_}, var)
                    var.registers(['byteOffset', 'value'])
                    var.get('$setInt8').callprop('call', var.get(u"this"), var.get('byteOffset'), ((var.get('value')<<Js(24.0))>>Js(24.0)))
                PyJs_setUint8_474_._set_name('setUint8')
                var.get('redefineAll')(var.get('$DataView').get(var.get('PROTOTYPE')), Js({'setInt8':PyJs_setInt8_473_,'setUint8':PyJs_setUint8_474_}), Js(True))
        var.get('setToStringTag')(var.get('$ArrayBuffer'), var.get('ARRAY_BUFFER'))
        var.get('setToStringTag')(var.get('$DataView'), var.get('DATA_VIEW'))
        var.get('hide')(var.get('$DataView').get(var.get('PROTOTYPE')), var.get('$typed').get('VIEW'), Js(True))
        var.get('exports').put(var.get('ARRAY_BUFFER'), var.get('$ArrayBuffer'))
        var.get('exports').put(var.get('DATA_VIEW'), var.get('$DataView'))
    PyJs_anonymous_448_._set_name('anonymous')
    @Js
    def PyJs_anonymous_475_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'ABV', 'hide', 'TypedArrayConstructors', 'i', 'VIEW', 'Typed', 'CONSTR', 'uid', 'TYPED', 'module', 'exports', 'global', 'l'])
        var.put('global', var.get('require')(Js('./_global')))
        var.put('hide', var.get('require')(Js('./_hide')))
        var.put('uid', var.get('require')(Js('./_uid')))
        var.put('TYPED', var.get('uid')(Js('typed_array')))
        var.put('VIEW', var.get('uid')(Js('view')))
        var.put('ABV', (var.get('global').get('ArrayBuffer') and var.get('global').get('DataView')).neg().neg())
        var.put('CONSTR', var.get('ABV'))
        var.put('i', Js(0.0))
        var.put('l', Js(9.0))
        pass
        var.put('TypedArrayConstructors', Js('Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array').callprop('split', Js(',')))
        while (var.get('i')<var.get('l')):
            if var.put('Typed', var.get('global').get(var.get('TypedArrayConstructors').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))):
                var.get('hide')(var.get('Typed').get('prototype'), var.get('TYPED'), Js(True))
                var.get('hide')(var.get('Typed').get('prototype'), var.get('VIEW'), Js(True))
            else:
                var.put('CONSTR', Js(False))
        var.get('module').put('exports', Js({'ABV':var.get('ABV'),'CONSTR':var.get('CONSTR'),'TYPED':var.get('TYPED'),'VIEW':var.get('VIEW')}))
    PyJs_anonymous_475_._set_name('anonymous')
    @Js
    def PyJs_anonymous_476_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'exports', 'module', 'id', 'px'])
        var.put('id', Js(0.0))
        var.put('px', var.get('Math').callprop('random'))
        @Js
        def PyJs_anonymous_477_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
            var.registers(['key'])
            return Js('Symbol(').callprop('concat', (Js('') if PyJsStrictEq(var.get('key'),var.get('undefined')) else var.get('key')), Js(')_'), (var.put('id',Js(var.get('id').to_number())+Js(1))+var.get('px')).callprop('toString', Js(36.0)))
        PyJs_anonymous_477_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_477_)
    PyJs_anonymous_476_._set_name('anonymous')
    @Js
    def PyJs_anonymous_478_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'exports', 'module', 'global', 'navigator'])
        var.put('global', var.get('require')(Js('./_global')))
        var.put('navigator', var.get('global').get('navigator'))
        var.get('module').put('exports', ((var.get('navigator') and var.get('navigator').get('userAgent')) or Js('')))
    PyJs_anonymous_478_._set_name('anonymous')
    @Js
    def PyJs_anonymous_479_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'isObject', 'module', 'exports'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        @Js
        def PyJs_anonymous_480_(it, TYPE, this, arguments, var=var):
            var = Scope({'it':it, 'TYPE':TYPE, 'this':this, 'arguments':arguments}, var)
            var.registers(['it', 'TYPE'])
            if (var.get('isObject')(var.get('it')).neg() or PyJsStrictNeq(var.get('it').get('_t'),var.get('TYPE'))):
                PyJsTempException = JsToPyException(var.get('TypeError')(((Js('Incompatible receiver, ')+var.get('TYPE'))+Js(' required!'))))
                raise PyJsTempException
            return var.get('it')
        PyJs_anonymous_480_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_480_)
    PyJs_anonymous_479_._set_name('anonymous')
    @Js
    def PyJs_anonymous_481_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['core', 'require', 'LIBRARY', 'exports', 'module', 'wksExt', 'defineProperty', 'global'])
        var.put('global', var.get('require')(Js('./_global')))
        var.put('core', var.get('require')(Js('./_core')))
        var.put('LIBRARY', var.get('require')(Js('./_library')))
        var.put('wksExt', var.get('require')(Js('./_wks-ext')))
        var.put('defineProperty', var.get('require')(Js('./_object-dp')).get('f'))
        @Js
        def PyJs_anonymous_482_(name, this, arguments, var=var):
            var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
            var.registers(['name', '$Symbol'])
            var.put('$Symbol', (var.get('core').get('Symbol') or var.get('core').put('Symbol', (Js({}) if var.get('LIBRARY') else (var.get('global').get('Symbol') or Js({}))))))
            if ((var.get('name').callprop('charAt', Js(0.0))!=Js('_')) and var.get('$Symbol').contains(var.get('name')).neg()):
                var.get('defineProperty')(var.get('$Symbol'), var.get('name'), Js({'value':var.get('wksExt').callprop('f', var.get('name'))}))
        PyJs_anonymous_482_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_482_)
    PyJs_anonymous_481_._set_name('anonymous')
    @Js
    def PyJs_anonymous_483_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('exports').put('f', var.get('require')(Js('./_wks')))
    PyJs_anonymous_483_._set_name('anonymous')
    @Js
    def PyJs_anonymous_484_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'USE_SYMBOL', 'exports', 'store', 'uid', 'module', '$exports', '_Symbol'])
        var.put('store', var.get('require')(Js('./_shared'))(Js('wks')))
        var.put('uid', var.get('require')(Js('./_uid')))
        var.put('_Symbol', var.get('require')(Js('./_global')).get('Symbol'))
        var.put('USE_SYMBOL', (var.get('_Symbol',throw=False).typeof()==Js('function')))
        @Js
        def PyJs_anonymous_485_(name, this, arguments, var=var):
            var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
            var.registers(['name'])
            return (var.get('store').get(var.get('name')) or var.get('store').put(var.get('name'), ((var.get('USE_SYMBOL') and var.get('_Symbol').get(var.get('name'))) or (var.get('_Symbol') if var.get('USE_SYMBOL') else var.get('uid'))((Js('Symbol.')+var.get('name'))))))
        PyJs_anonymous_485_._set_name('anonymous')
        var.put('$exports', var.get('module').put('exports', PyJs_anonymous_485_))
        var.get('$exports').put('store', var.get('store'))
    PyJs_anonymous_484_._set_name('anonymous')
    @Js
    def PyJs_anonymous_486_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'classof', 'ITERATOR', 'exports', 'module', 'Iterators'])
        var.put('classof', var.get('require')(Js('./_classof')))
        var.put('ITERATOR', var.get('require')(Js('./_wks'))(Js('iterator')))
        var.put('Iterators', var.get('require')(Js('./_iterators')))
        @Js
        def PyJs_anonymous_487_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            if (var.get('it')!=var.get('undefined')):
                return ((var.get('it').get(var.get('ITERATOR')) or var.get('it').get('@@iterator')) or var.get('Iterators').get(var.get('classof')(var.get('it'))))
        PyJs_anonymous_487_._set_name('anonymous')
        var.get('module').put('exports', var.get('require')(Js('./_core')).put('getIteratorMethod', PyJs_anonymous_487_))
    PyJs_anonymous_486_._set_name('anonymous')
    @Js
    def PyJs_anonymous_488_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$export', 'exports', 'module', '$re'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$re', var.get('require')(Js('./_replacer'))(JsRegExp('/[\\\\^$*+?.()|[\\]{}]/g'), Js('\\$&')))
        @Js
        def PyJs_escape_489_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'escape':PyJs_escape_489_}, var)
            var.registers(['it'])
            return var.get('$re')(var.get('it'))
        PyJs_escape_489_._set_name('escape')
        var.get('$export')(var.get('$export').get('S'), Js('RegExp'), Js({'escape':PyJs_escape_489_}))
    PyJs_anonymous_488_._set_name('anonymous')
    @Js
    def PyJs_anonymous_490_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('P'), Js('Array'), Js({'copyWithin':var.get('require')(Js('./_array-copy-within'))}))
        var.get('require')(Js('./_add-to-unscopables'))(Js('copyWithin'))
    PyJs_anonymous_490_._set_name('anonymous')
    @Js
    def PyJs_anonymous_491_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$export', 'exports', 'module', '$every'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$every', var.get('require')(Js('./_array-methods'))(Js(4.0)))
        @Js
        def PyJs_every_492_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'every':PyJs_every_492_}, var)
            var.registers(['callbackfn'])
            return var.get('$every')(var.get(u"this"), var.get('callbackfn'), var.get('arguments').get('1'))
        PyJs_every_492_._set_name('every')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_strict-method'))(Js([]).get('every'), Js(True)).neg())), Js('Array'), Js({'every':PyJs_every_492_}))
    PyJs_anonymous_491_._set_name('anonymous')
    @Js
    def PyJs_anonymous_493_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('P'), Js('Array'), Js({'fill':var.get('require')(Js('./_array-fill'))}))
        var.get('require')(Js('./_add-to-unscopables'))(Js('fill'))
    PyJs_anonymous_493_._set_name('anonymous')
    @Js
    def PyJs_anonymous_494_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$export', 'exports', 'module', '$filter'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$filter', var.get('require')(Js('./_array-methods'))(Js(2.0)))
        @Js
        def PyJs_filter_495_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'filter':PyJs_filter_495_}, var)
            var.registers(['callbackfn'])
            return var.get('$filter')(var.get(u"this"), var.get('callbackfn'), var.get('arguments').get('1'))
        PyJs_filter_495_._set_name('filter')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_strict-method'))(Js([]).get('filter'), Js(True)).neg())), Js('Array'), Js({'filter':PyJs_filter_495_}))
    PyJs_anonymous_494_._set_name('anonymous')
    @Js
    def PyJs_anonymous_496_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'KEY', '$export', 'forced', 'exports', 'module', '$find'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$find', var.get('require')(Js('./_array-methods'))(Js(6.0)))
        var.put('KEY', Js('findIndex'))
        var.put('forced', Js(True))
        if Js([]).contains(var.get('KEY')):
            @Js
            def PyJs_anonymous_497_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.put('forced', Js(False))
            PyJs_anonymous_497_._set_name('anonymous')
            var.get('Array')(Js(1.0)).callprop(var.get('KEY'), PyJs_anonymous_497_)
        @Js
        def PyJs_findIndex_498_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'findIndex':PyJs_findIndex_498_}, var)
            var.registers(['callbackfn'])
            return var.get('$find')(var.get(u"this"), var.get('callbackfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
        PyJs_findIndex_498_._set_name('findIndex')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('forced'))), Js('Array'), Js({'findIndex':PyJs_findIndex_498_}))
        var.get('require')(Js('./_add-to-unscopables'))(var.get('KEY'))
    PyJs_anonymous_496_._set_name('anonymous')
    @Js
    def PyJs_anonymous_499_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'KEY', '$export', 'forced', 'exports', 'module', '$find'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$find', var.get('require')(Js('./_array-methods'))(Js(5.0)))
        var.put('KEY', Js('find'))
        var.put('forced', Js(True))
        if Js([]).contains(var.get('KEY')):
            @Js
            def PyJs_anonymous_500_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.put('forced', Js(False))
            PyJs_anonymous_500_._set_name('anonymous')
            var.get('Array')(Js(1.0)).callprop(var.get('KEY'), PyJs_anonymous_500_)
        @Js
        def PyJs_find_501_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'find':PyJs_find_501_}, var)
            var.registers(['callbackfn'])
            return var.get('$find')(var.get(u"this"), var.get('callbackfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
        PyJs_find_501_._set_name('find')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('forced'))), Js('Array'), Js({'find':PyJs_find_501_}))
        var.get('require')(Js('./_add-to-unscopables'))(var.get('KEY'))
    PyJs_anonymous_499_._set_name('anonymous')
    @Js
    def PyJs_anonymous_502_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$forEach', 'STRICT', '$export', 'exports', 'module'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$forEach', var.get('require')(Js('./_array-methods'))(Js(0.0)))
        var.put('STRICT', var.get('require')(Js('./_strict-method'))(Js([]).get('forEach'), Js(True)))
        @Js
        def PyJs_forEach_503_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'forEach':PyJs_forEach_503_}, var)
            var.registers(['callbackfn'])
            return var.get('$forEach')(var.get(u"this"), var.get('callbackfn'), var.get('arguments').get('1'))
        PyJs_forEach_503_._set_name('forEach')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('STRICT').neg())), Js('Array'), Js({'forEach':PyJs_forEach_503_}))
    PyJs_anonymous_502_._set_name('anonymous')
    @Js
    def PyJs_anonymous_504_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'getIterFn', 'toLength', 'isArrayIter', 'toObject', '$export', 'call', 'exports', 'module', 'ctx', 'createProperty'])
        Js('use strict')
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('call', var.get('require')(Js('./_iter-call')))
        var.put('isArrayIter', var.get('require')(Js('./_is-array-iter')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('createProperty', var.get('require')(Js('./_create-property')))
        var.put('getIterFn', var.get('require')(Js('./core.get-iterator-method')))
        @Js
        def PyJs_anonymous_505_(iter, this, arguments, var=var):
            var = Scope({'iter':iter, 'this':this, 'arguments':arguments}, var)
            var.registers(['iter'])
            var.get('Array').callprop('from', var.get('iter'))
        PyJs_anonymous_505_._set_name('anonymous')
        @Js
        def PyJs_InlineNonPyName_506_(arrayLike, this, arguments, var=var):
            var = Scope({'arrayLike':arrayLike, 'this':this, 'arguments':arguments, 'from':PyJs_InlineNonPyName_506_}, var)
            var.registers(['C', 'iterator', 'index', 'length', 'mapfn', 'O', 'result', 'arrayLike', 'step', 'mapping', 'aLen', 'iterFn'])
            var.put('O', var.get('toObject')(var.get('arrayLike')))
            var.put('C', (var.get(u"this") if (var.get(u"this",throw=False).typeof()==Js('function')) else var.get('Array')))
            var.put('aLen', var.get('arguments').get('length'))
            var.put('mapfn', (var.get('arguments').get('1') if (var.get('aLen')>Js(1.0)) else var.get('undefined')))
            var.put('mapping', PyJsStrictNeq(var.get('mapfn'),var.get('undefined')))
            var.put('index', Js(0.0))
            var.put('iterFn', var.get('getIterFn')(var.get('O')))
            pass
            if var.get('mapping'):
                var.put('mapfn', var.get('ctx')(var.get('mapfn'), (var.get('arguments').get('2') if (var.get('aLen')>Js(2.0)) else var.get('undefined')), Js(2.0)))
            if ((var.get('iterFn')!=var.get('undefined')) and ((var.get('C')==var.get('Array')) and var.get('isArrayIter')(var.get('iterFn'))).neg()):
                #for JS loop
                PyJsComma(var.put('iterator', var.get('iterFn').callprop('call', var.get('O'))),var.put('result', var.get('C').create()))
                while var.put('step', var.get('iterator').callprop('next')).get('done').neg():
                    try:
                        var.get('createProperty')(var.get('result'), var.get('index'), (var.get('call')(var.get('iterator'), var.get('mapfn'), Js([var.get('step').get('value'), var.get('index')]), Js(True)) if var.get('mapping') else var.get('step').get('value')))
                    finally:
                            (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
            else:
                var.put('length', var.get('toLength')(var.get('O').get('length')))
                #for JS loop
                var.put('result', var.get('C').create(var.get('length')))
                while (var.get('length')>var.get('index')):
                    try:
                        var.get('createProperty')(var.get('result'), var.get('index'), (var.get('mapfn')(var.get('O').get(var.get('index')), var.get('index')) if var.get('mapping') else var.get('O').get(var.get('index'))))
                    finally:
                            (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
            var.get('result').put('length', var.get('index'))
            return var.get('result')
        PyJs_InlineNonPyName_506_._set_name('from')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('require')(Js('./_iter-detect'))(PyJs_anonymous_505_).neg())), Js('Array'), Js({'from':PyJs_InlineNonPyName_506_}))
    PyJs_anonymous_504_._set_name('anonymous')
    @Js
    def PyJs_anonymous_507_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$indexOf', 'require', '$export', 'exports', 'module', 'NEGATIVE_ZERO', '$native'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$indexOf', var.get('require')(Js('./_array-includes'))(Js(False)))
        var.put('$native', Js([]).get('indexOf'))
        var.put('NEGATIVE_ZERO', (var.get('$native').neg().neg() and ((Js(1.0)/Js([Js(1.0)]).callprop('indexOf', Js(1.0), (-Js(0.0))))<Js(0.0))))
        @Js
        def PyJs_indexOf_508_(searchElement, this, arguments, var=var):
            var = Scope({'searchElement':searchElement, 'this':this, 'arguments':arguments, 'indexOf':PyJs_indexOf_508_}, var)
            var.registers(['searchElement'])
            return ((var.get('$native').callprop('apply', var.get(u"this"), var.get('arguments')) or Js(0.0)) if var.get('NEGATIVE_ZERO') else var.get('$indexOf')(var.get(u"this"), var.get('searchElement'), var.get('arguments').get('1')))
        PyJs_indexOf_508_._set_name('indexOf')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*(var.get('NEGATIVE_ZERO') or var.get('require')(Js('./_strict-method'))(var.get('$native')).neg()))), Js('Array'), Js({'indexOf':PyJs_indexOf_508_}))
    PyJs_anonymous_507_._set_name('anonymous')
    @Js
    def PyJs_anonymous_509_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Array'), Js({'isArray':var.get('require')(Js('./_is-array'))}))
    PyJs_anonymous_509_._set_name('anonymous')
    @Js
    def PyJs_anonymous_510_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toIObject', 'exports', 'module', 'step', 'Iterators', 'addToUnscopables'])
        Js('use strict')
        var.put('addToUnscopables', var.get('require')(Js('./_add-to-unscopables')))
        var.put('step', var.get('require')(Js('./_iter-step')))
        var.put('Iterators', var.get('require')(Js('./_iterators')))
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        @Js
        def PyJs_anonymous_511_(iterated, kind, this, arguments, var=var):
            var = Scope({'iterated':iterated, 'kind':kind, 'this':this, 'arguments':arguments}, var)
            var.registers(['iterated', 'kind'])
            var.get(u"this").put('_t', var.get('toIObject')(var.get('iterated')))
            var.get(u"this").put('_i', Js(0.0))
            var.get(u"this").put('_k', var.get('kind'))
        PyJs_anonymous_511_._set_name('anonymous')
        @Js
        def PyJs_anonymous_512_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['index', 'O', 'kind'])
            var.put('O', var.get(u"this").get('_t'))
            var.put('kind', var.get(u"this").get('_k'))
            var.put('index', (var.get(u"this").put('_i',Js(var.get(u"this").get('_i').to_number())+Js(1))-Js(1)))
            if (var.get('O').neg() or (var.get('index')>=var.get('O').get('length'))):
                var.get(u"this").put('_t', var.get('undefined'))
                return var.get('step')(Js(1.0))
            if (var.get('kind')==Js('keys')):
                return var.get('step')(Js(0.0), var.get('index'))
            if (var.get('kind')==Js('values')):
                return var.get('step')(Js(0.0), var.get('O').get(var.get('index')))
            return var.get('step')(Js(0.0), Js([var.get('index'), var.get('O').get(var.get('index'))]))
        PyJs_anonymous_512_._set_name('anonymous')
        var.get('module').put('exports', var.get('require')(Js('./_iter-define'))(var.get('Array'), Js('Array'), PyJs_anonymous_511_, PyJs_anonymous_512_, Js('values')))
        var.get('Iterators').put('Arguments', var.get('Iterators').get('Array'))
        var.get('addToUnscopables')(Js('keys'))
        var.get('addToUnscopables')(Js('values'))
        var.get('addToUnscopables')(Js('entries'))
    PyJs_anonymous_510_._set_name('anonymous')
    @Js
    def PyJs_anonymous_513_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toIObject', '$export', 'exports', 'module', 'arrayJoin'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('arrayJoin', Js([]).get('join'))
        @Js
        def PyJs_join_514_(separator, this, arguments, var=var):
            var = Scope({'separator':separator, 'this':this, 'arguments':arguments, 'join':PyJs_join_514_}, var)
            var.registers(['separator'])
            return var.get('arrayJoin').callprop('call', var.get('toIObject')(var.get(u"this")), (Js(',') if PyJsStrictEq(var.get('separator'),var.get('undefined')) else var.get('separator')))
        PyJs_join_514_._set_name('join')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*((var.get('require')(Js('./_iobject'))!=var.get('Object')) or var.get('require')(Js('./_strict-method'))(var.get('arrayJoin')).neg()))), Js('Array'), Js({'join':PyJs_join_514_}))
    PyJs_anonymous_513_._set_name('anonymous')
    @Js
    def PyJs_anonymous_515_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toLength', 'toIObject', '$export', 'exports', 'module', 'NEGATIVE_ZERO', 'toInteger', '$native'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('$native', Js([]).get('lastIndexOf'))
        var.put('NEGATIVE_ZERO', (var.get('$native').neg().neg() and ((Js(1.0)/Js([Js(1.0)]).callprop('lastIndexOf', Js(1.0), (-Js(0.0))))<Js(0.0))))
        @Js
        def PyJs_lastIndexOf_516_(searchElement, this, arguments, var=var):
            var = Scope({'searchElement':searchElement, 'this':this, 'arguments':arguments, 'lastIndexOf':PyJs_lastIndexOf_516_}, var)
            var.registers(['length', 'O', 'searchElement', 'index'])
            if var.get('NEGATIVE_ZERO'):
                return (var.get('$native').callprop('apply', var.get(u"this"), var.get('arguments')) or Js(0.0))
            var.put('O', var.get('toIObject')(var.get(u"this")))
            var.put('length', var.get('toLength')(var.get('O').get('length')))
            var.put('index', (var.get('length')-Js(1.0)))
            if (var.get('arguments').get('length')>Js(1.0)):
                var.put('index', var.get('Math').callprop('min', var.get('index'), var.get('toInteger')(var.get('arguments').get('1'))))
            if (var.get('index')<Js(0.0)):
                var.put('index', (var.get('length')+var.get('index')))
            #for JS loop
            
            while (var.get('index')>=Js(0.0)):
                try:
                    if var.get('O').contains(var.get('index')):
                        if PyJsStrictEq(var.get('O').get(var.get('index')),var.get('searchElement')):
                            return (var.get('index') or Js(0.0))
                finally:
                        (var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1))
            return (-Js(1.0))
        PyJs_lastIndexOf_516_._set_name('lastIndexOf')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*(var.get('NEGATIVE_ZERO') or var.get('require')(Js('./_strict-method'))(var.get('$native')).neg()))), Js('Array'), Js({'lastIndexOf':PyJs_lastIndexOf_516_}))
    PyJs_anonymous_515_._set_name('anonymous')
    @Js
    def PyJs_anonymous_517_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$map', '$export', 'exports', 'module'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$map', var.get('require')(Js('./_array-methods'))(Js(1.0)))
        @Js
        def PyJs_map_518_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'map':PyJs_map_518_}, var)
            var.registers(['callbackfn'])
            return var.get('$map')(var.get(u"this"), var.get('callbackfn'), var.get('arguments').get('1'))
        PyJs_map_518_._set_name('map')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_strict-method'))(Js([]).get('map'), Js(True)).neg())), Js('Array'), Js({'map':PyJs_map_518_}))
    PyJs_anonymous_517_._set_name('anonymous')
    @Js
    def PyJs_anonymous_519_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$export', 'exports', 'module', 'createProperty'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('createProperty', var.get('require')(Js('./_create-property')))
        @Js
        def PyJs_anonymous_520_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['F'])
            @Js
            def PyJsHoisted_F_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                pass
            PyJsHoisted_F_.func_name = 'F'
            var.put('F', PyJsHoisted_F_)
            pass
            return var.get('Array').get('of').callprop('call', var.get('F')).instanceof(var.get('F')).neg()
        PyJs_anonymous_520_._set_name('anonymous')
        @Js
        def PyJs_of_521_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'of':PyJs_of_521_}, var)
            var.registers(['index', 'result', 'aLen'])
            var.put('index', Js(0.0))
            var.put('aLen', var.get('arguments').get('length'))
            var.put('result', (var.get(u"this") if (var.get(u"this",throw=False).typeof()==Js('function')) else var.get('Array')).create(var.get('aLen')))
            while (var.get('aLen')>var.get('index')):
                var.get('createProperty')(var.get('result'), var.get('index'), var.get('arguments').get((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))))
            var.get('result').put('length', var.get('aLen'))
            return var.get('result')
        PyJs_of_521_._set_name('of')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('require')(Js('./_fails'))(PyJs_anonymous_520_))), Js('Array'), Js({'of':PyJs_of_521_}))
    PyJs_anonymous_519_._set_name('anonymous')
    @Js
    def PyJs_anonymous_522_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$export', 'exports', 'module', '$reduce'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$reduce', var.get('require')(Js('./_array-reduce')))
        @Js
        def PyJs_reduceRight_523_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'reduceRight':PyJs_reduceRight_523_}, var)
            var.registers(['callbackfn'])
            return var.get('$reduce')(var.get(u"this"), var.get('callbackfn'), var.get('arguments').get('length'), var.get('arguments').get('1'), Js(True))
        PyJs_reduceRight_523_._set_name('reduceRight')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_strict-method'))(Js([]).get('reduceRight'), Js(True)).neg())), Js('Array'), Js({'reduceRight':PyJs_reduceRight_523_}))
    PyJs_anonymous_522_._set_name('anonymous')
    @Js
    def PyJs_anonymous_524_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$export', 'exports', 'module', '$reduce'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$reduce', var.get('require')(Js('./_array-reduce')))
        @Js
        def PyJs_reduce_525_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'reduce':PyJs_reduce_525_}, var)
            var.registers(['callbackfn'])
            return var.get('$reduce')(var.get(u"this"), var.get('callbackfn'), var.get('arguments').get('length'), var.get('arguments').get('1'), Js(False))
        PyJs_reduce_525_._set_name('reduce')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_strict-method'))(Js([]).get('reduce'), Js(True)).neg())), Js('Array'), Js({'reduce':PyJs_reduce_525_}))
    PyJs_anonymous_524_._set_name('anonymous')
    @Js
    def PyJs_anonymous_526_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'arraySlice', 'toLength', 'html', 'toAbsoluteIndex', '$export', 'exports', 'cof', 'module'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('html', var.get('require')(Js('./_html')))
        var.put('cof', var.get('require')(Js('./_cof')))
        var.put('toAbsoluteIndex', var.get('require')(Js('./_to-absolute-index')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('arraySlice', Js([]).get('slice'))
        @Js
        def PyJs_anonymous_527_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            if var.get('html'):
                var.get('arraySlice').callprop('call', var.get('html'))
        PyJs_anonymous_527_._set_name('anonymous')
        @Js
        def PyJs_slice_528_(begin, end, this, arguments, var=var):
            var = Scope({'begin':begin, 'end':end, 'this':this, 'arguments':arguments, 'slice':PyJs_slice_528_}, var)
            var.registers(['upTo', 'begin', 'cloned', 'i', 'end', 'start', 'size', 'len', 'klass'])
            var.put('len', var.get('toLength')(var.get(u"this").get('length')))
            var.put('klass', var.get('cof')(var.get(u"this")))
            var.put('end', (var.get('len') if PyJsStrictEq(var.get('end'),var.get('undefined')) else var.get('end')))
            if (var.get('klass')==Js('Array')):
                return var.get('arraySlice').callprop('call', var.get(u"this"), var.get('begin'), var.get('end'))
            var.put('start', var.get('toAbsoluteIndex')(var.get('begin'), var.get('len')))
            var.put('upTo', var.get('toAbsoluteIndex')(var.get('end'), var.get('len')))
            var.put('size', var.get('toLength')((var.get('upTo')-var.get('start'))))
            var.put('cloned', var.get('Array').create(var.get('size')))
            var.put('i', Js(0.0))
            #for JS loop
            
            while (var.get('i')<var.get('size')):
                try:
                    var.get('cloned').put(var.get('i'), (var.get(u"this").callprop('charAt', (var.get('start')+var.get('i'))) if (var.get('klass')==Js('String')) else var.get(u"this").get((var.get('start')+var.get('i')))))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('cloned')
        PyJs_slice_528_._set_name('slice')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_fails'))(PyJs_anonymous_527_))), Js('Array'), Js({'slice':PyJs_slice_528_}))
    PyJs_anonymous_526_._set_name('anonymous')
    @Js
    def PyJs_anonymous_529_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$some', '$export', 'exports', 'module'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$some', var.get('require')(Js('./_array-methods'))(Js(3.0)))
        @Js
        def PyJs_some_530_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'some':PyJs_some_530_}, var)
            var.registers(['callbackfn'])
            return var.get('$some')(var.get(u"this"), var.get('callbackfn'), var.get('arguments').get('1'))
        PyJs_some_530_._set_name('some')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_strict-method'))(Js([]).get('some'), Js(True)).neg())), Js('Array'), Js({'some':PyJs_some_530_}))
    PyJs_anonymous_529_._set_name('anonymous')
    @Js
    def PyJs_anonymous_531_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['aFunction', 'require', 'test', 'toObject', '$sort', '$export', 'exports', 'module', 'fails'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('$sort', Js([]).get('sort'))
        var.put('test', Js([Js(1.0), Js(2.0), Js(3.0)]))
        @Js
        def PyJs_anonymous_532_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('test').callprop('sort', var.get('undefined'))
        PyJs_anonymous_532_._set_name('anonymous')
        @Js
        def PyJs_anonymous_533_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('test').callprop('sort', var.get(u"null"))
        PyJs_anonymous_533_._set_name('anonymous')
        @Js
        def PyJs_sort_534_(comparefn, this, arguments, var=var):
            var = Scope({'comparefn':comparefn, 'this':this, 'arguments':arguments, 'sort':PyJs_sort_534_}, var)
            var.registers(['comparefn'])
            return (var.get('$sort').callprop('call', var.get('toObject')(var.get(u"this"))) if PyJsStrictEq(var.get('comparefn'),var.get('undefined')) else var.get('$sort').callprop('call', var.get('toObject')(var.get(u"this")), var.get('aFunction')(var.get('comparefn'))))
        PyJs_sort_534_._set_name('sort')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*((var.get('fails')(PyJs_anonymous_532_) or var.get('fails')(PyJs_anonymous_533_).neg()) or var.get('require')(Js('./_strict-method'))(var.get('$sort')).neg()))), Js('Array'), Js({'sort':PyJs_sort_534_}))
    PyJs_anonymous_531_._set_name('anonymous')
    @Js
    def PyJs_anonymous_535_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('require')(Js('./_set-species'))(Js('Array'))
    PyJs_anonymous_535_._set_name('anonymous')
    @Js
    def PyJs_anonymous_536_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_now_537_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'now':PyJs_now_537_}, var)
            var.registers([])
            return var.get('Date').create().callprop('getTime')
        PyJs_now_537_._set_name('now')
        var.get('$export')(var.get('$export').get('S'), Js('Date'), Js({'now':PyJs_now_537_}))
    PyJs_anonymous_536_._set_name('anonymous')
    @Js
    def PyJs_anonymous_538_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$export', 'exports', 'toISOString', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toISOString', var.get('require')(Js('./_date-to-iso-string')))
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*PyJsStrictNeq(var.get('Date').get('prototype').get('toISOString'),var.get('toISOString')))), Js('Date'), Js({'toISOString':var.get('toISOString')}))
    PyJs_anonymous_538_._set_name('anonymous')
    @Js
    def PyJs_anonymous_539_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toPrimitive', 'toObject', '$export', 'exports', 'module'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
        @Js
        def PyJs_anonymous_540_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_toISOString_541_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'toISOString':PyJs_toISOString_541_}, var)
                var.registers([])
                return Js(1.0)
            PyJs_toISOString_541_._set_name('toISOString')
            return (PyJsStrictNeq(var.get('Date').create(var.get('NaN')).callprop('toJSON'),var.get(u"null")) or PyJsStrictNeq(var.get('Date').get('prototype').get('toJSON').callprop('call', Js({'toISOString':PyJs_toISOString_541_})),Js(1.0)))
        PyJs_anonymous_540_._set_name('anonymous')
        @Js
        def PyJs_toJSON_542_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments, 'toJSON':PyJs_toJSON_542_}, var)
            var.registers(['O', 'pv', 'key'])
            var.put('O', var.get('toObject')(var.get(u"this")))
            var.put('pv', var.get('toPrimitive')(var.get('O')))
            return (var.get(u"null") if ((var.get('pv',throw=False).typeof()==Js('number')) and var.get('isFinite')(var.get('pv')).neg()) else var.get('O').callprop('toISOString'))
        PyJs_toJSON_542_._set_name('toJSON')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_fails'))(PyJs_anonymous_540_))), Js('Date'), Js({'toJSON':PyJs_toJSON_542_}))
    PyJs_anonymous_539_._set_name('anonymous')
    @Js
    def PyJs_anonymous_543_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'proto', 'exports', 'module', 'TO_PRIMITIVE'])
        var.put('TO_PRIMITIVE', var.get('require')(Js('./_wks'))(Js('toPrimitive')))
        var.put('proto', var.get('Date').get('prototype'))
        if var.get('proto').contains(var.get('TO_PRIMITIVE')).neg():
            var.get('require')(Js('./_hide'))(var.get('proto'), var.get('TO_PRIMITIVE'), var.get('require')(Js('./_date-to-primitive')))
    PyJs_anonymous_543_._set_name('anonymous')
    @Js
    def PyJs_anonymous_544_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'exports', 'module', 'TO_STRING', 'getTime', 'INVALID_DATE', '$toString', 'DateProto'])
        var.put('DateProto', var.get('Date').get('prototype'))
        var.put('INVALID_DATE', Js('Invalid Date'))
        var.put('TO_STRING', Js('toString'))
        var.put('$toString', var.get('DateProto').get(var.get('TO_STRING')))
        var.put('getTime', var.get('DateProto').get('getTime'))
        if ((var.get('Date').create(var.get('NaN'))+Js(''))!=var.get('INVALID_DATE')):
            @Js
            def PyJs_toString_545_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'toString':PyJs_toString_545_}, var)
                var.registers(['value'])
                var.put('value', var.get('getTime').callprop('call', var.get(u"this")))
                return (var.get('$toString').callprop('call', var.get(u"this")) if PyJsStrictEq(var.get('value'),var.get('value')) else var.get('INVALID_DATE'))
            PyJs_toString_545_._set_name('toString')
            var.get('require')(Js('./_redefine'))(var.get('DateProto'), var.get('TO_STRING'), PyJs_toString_545_)
    PyJs_anonymous_544_._set_name('anonymous')
    @Js
    def PyJs_anonymous_546_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('P'), Js('Function'), Js({'bind':var.get('require')(Js('./_bind'))}))
    PyJs_anonymous_546_._set_name('anonymous')
    @Js
    def PyJs_anonymous_547_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'FunctionProto', 'HAS_INSTANCE', 'exports', 'module', 'getPrototypeOf', 'isObject'])
        Js('use strict')
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('getPrototypeOf', var.get('require')(Js('./_object-gpo')))
        var.put('HAS_INSTANCE', var.get('require')(Js('./_wks'))(Js('hasInstance')))
        var.put('FunctionProto', var.get('Function').get('prototype'))
        if var.get('FunctionProto').contains(var.get('HAS_INSTANCE')).neg():
            @Js
            def PyJs_value_548_(O, this, arguments, var=var):
                var = Scope({'O':O, 'this':this, 'arguments':arguments, 'value':PyJs_value_548_}, var)
                var.registers(['O'])
                if ((var.get(u"this",throw=False).typeof()!=Js('function')) or var.get('isObject')(var.get('O')).neg()):
                    return Js(False)
                if var.get('isObject')(var.get(u"this").get('prototype')).neg():
                    return var.get('O').instanceof(var.get(u"this"))
                while var.put('O', var.get('getPrototypeOf')(var.get('O'))):
                    if PyJsStrictEq(var.get(u"this").get('prototype'),var.get('O')):
                        return Js(True)
                return Js(False)
            PyJs_value_548_._set_name('value')
            var.get('require')(Js('./_object-dp')).callprop('f', var.get('FunctionProto'), var.get('HAS_INSTANCE'), Js({'value':PyJs_value_548_}))
    PyJs_anonymous_547_._set_name('anonymous')
    @Js
    def PyJs_anonymous_549_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['nameRE', 'require', 'FProto', 'exports', 'module', 'NAME', 'dP'])
        var.put('dP', var.get('require')(Js('./_object-dp')).get('f'))
        var.put('FProto', var.get('Function').get('prototype'))
        var.put('nameRE', JsRegExp('/^\\s*function ([^ (]*)/'))
        var.put('NAME', Js('name'))
        @Js
        def PyJs_get_550_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_550_}, var)
            var.registers([])
            try:
                return (Js('')+var.get(u"this")).callprop('match', var.get('nameRE')).get('1')
            except PyJsException as PyJsTempException:
                PyJsHolder_65_89006043 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    return Js('')
                finally:
                    if PyJsHolder_65_89006043 is not None:
                        var.own['e'] = PyJsHolder_65_89006043
                    else:
                        del var.own['e']
                    del PyJsHolder_65_89006043
        PyJs_get_550_._set_name('get')
        (var.get('FProto').contains(var.get('NAME')) or (var.get('require')(Js('./_descriptors')) and var.get('dP')(var.get('FProto'), var.get('NAME'), Js({'configurable':Js(True),'get':PyJs_get_550_}))))
    PyJs_anonymous_549_._set_name('anonymous')
    @Js
    def PyJs_anonymous_551_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'strong', 'exports', 'MAP', 'module', 'validate'])
        Js('use strict')
        var.put('strong', var.get('require')(Js('./_collection-strong')))
        var.put('validate', var.get('require')(Js('./_validate-collection')))
        var.put('MAP', Js('Map'))
        @Js
        def PyJs_anonymous_552_(get, this, arguments, var=var):
            var = Scope({'get':get, 'this':this, 'arguments':arguments}, var)
            var.registers(['get'])
            @Js
            def PyJs_Map_553_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'Map':PyJs_Map_553_}, var)
                var.registers([])
                return var.get('get')(var.get(u"this"), (var.get('arguments').get('0') if (var.get('arguments').get('length')>Js(0.0)) else var.get('undefined')))
            PyJs_Map_553_._set_name('Map')
            return PyJs_Map_553_
        PyJs_anonymous_552_._set_name('anonymous')
        @Js
        def PyJs_get_554_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments, 'get':PyJs_get_554_}, var)
            var.registers(['entry', 'key'])
            var.put('entry', var.get('strong').callprop('getEntry', var.get('validate')(var.get(u"this"), var.get('MAP')), var.get('key')))
            return (var.get('entry') and var.get('entry').get('v'))
        PyJs_get_554_._set_name('get')
        @Js
        def PyJs_set_555_(key, value, this, arguments, var=var):
            var = Scope({'key':key, 'value':value, 'this':this, 'arguments':arguments, 'set':PyJs_set_555_}, var)
            var.registers(['value', 'key'])
            return var.get('strong').callprop('def', var.get('validate')(var.get(u"this"), var.get('MAP')), (Js(0.0) if PyJsStrictEq(var.get('key'),Js(0.0)) else var.get('key')), var.get('value'))
        PyJs_set_555_._set_name('set')
        var.get('module').put('exports', var.get('require')(Js('./_collection'))(var.get('MAP'), PyJs_anonymous_552_, Js({'get':PyJs_get_554_,'set':PyJs_set_555_}), var.get('strong'), Js(True)))
    PyJs_anonymous_551_._set_name('anonymous')
    @Js
    def PyJs_anonymous_556_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'log1p', 'sqrt', '$export', 'exports', 'module', '$acosh'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('log1p', var.get('require')(Js('./_math-log1p')))
        var.put('sqrt', var.get('Math').get('sqrt'))
        var.put('$acosh', var.get('Math').get('acosh'))
        @Js
        def PyJs_acosh_557_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'acosh':PyJs_acosh_557_}, var)
            var.registers(['x'])
            return (var.get('NaN') if (var.put('x', (+var.get('x')))<Js(1.0)) else ((var.get('Math').callprop('log', var.get('x'))+var.get('Math').get('LN2')) if (var.get('x')>Js(94906265.62425156)) else var.get('log1p')(((var.get('x')-Js(1.0))+(var.get('sqrt')((var.get('x')-Js(1.0)))*var.get('sqrt')((var.get('x')+Js(1.0))))))))
        PyJs_acosh_557_._set_name('acosh')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*((var.get('$acosh') and (var.get('Math').callprop('floor', var.get('$acosh')(var.get('Number').get('MAX_VALUE')))==Js(710.0))) and (var.get('$acosh')(var.get('Infinity'))==var.get('Infinity'))).neg())), Js('Math'), Js({'acosh':PyJs_acosh_557_}))
    PyJs_anonymous_556_._set_name('anonymous')
    @Js
    def PyJs_anonymous_558_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'asinh', '$asinh', '$export', 'exports', 'module'])
        @Js
        def PyJsHoisted_asinh_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['x'])
            return (var.get('x') if (var.get('isFinite')(var.put('x', (+var.get('x')))).neg() or (var.get('x')==Js(0.0))) else ((-var.get('asinh')((-var.get('x')))) if (var.get('x')<Js(0.0)) else var.get('Math').callprop('log', (var.get('x')+var.get('Math').callprop('sqrt', ((var.get('x')*var.get('x'))+Js(1.0)))))))
        PyJsHoisted_asinh_.func_name = 'asinh'
        var.put('asinh', PyJsHoisted_asinh_)
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$asinh', var.get('Math').get('asinh'))
        pass
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*(var.get('$asinh') and ((Js(1.0)/var.get('$asinh')(Js(0.0)))>Js(0.0))).neg())), Js('Math'), Js({'asinh':var.get('asinh')}))
    PyJs_anonymous_558_._set_name('anonymous')
    @Js
    def PyJs_anonymous_559_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$export', 'exports', 'module', '$atanh'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$atanh', var.get('Math').get('atanh'))
        @Js
        def PyJs_atanh_560_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'atanh':PyJs_atanh_560_}, var)
            var.registers(['x'])
            return (var.get('x') if (var.put('x', (+var.get('x')))==Js(0.0)) else (var.get('Math').callprop('log', ((Js(1.0)+var.get('x'))/(Js(1.0)-var.get('x'))))/Js(2.0)))
        PyJs_atanh_560_._set_name('atanh')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*(var.get('$atanh') and ((Js(1.0)/var.get('$atanh')((-Js(0.0))))<Js(0.0))).neg())), Js('Math'), Js({'atanh':PyJs_atanh_560_}))
    PyJs_anonymous_559_._set_name('anonymous')
    @Js
    def PyJs_anonymous_561_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$export', 'exports', 'module', 'sign'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('sign', var.get('require')(Js('./_math-sign')))
        @Js
        def PyJs_cbrt_562_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'cbrt':PyJs_cbrt_562_}, var)
            var.registers(['x'])
            return (var.get('sign')(var.put('x', (+var.get('x'))))*var.get('Math').callprop('pow', var.get('Math').callprop('abs', var.get('x')), (Js(1.0)/Js(3.0))))
        PyJs_cbrt_562_._set_name('cbrt')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'cbrt':PyJs_cbrt_562_}))
    PyJs_anonymous_561_._set_name('anonymous')
    @Js
    def PyJs_anonymous_563_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_clz32_564_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'clz32':PyJs_clz32_564_}, var)
            var.registers(['x'])
            return ((Js(31.0)-var.get('Math').callprop('floor', (var.get('Math').callprop('log', (var.get('x')+Js(0.5)))*var.get('Math').get('LOG2E')))) if var.put('x', Js(0.0), '>>>') else Js(32.0))
        PyJs_clz32_564_._set_name('clz32')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'clz32':PyJs_clz32_564_}))
    PyJs_anonymous_563_._set_name('anonymous')
    @Js
    def PyJs_anonymous_565_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$export', 'exports', 'module', 'exp'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('exp', var.get('Math').get('exp'))
        @Js
        def PyJs_cosh_566_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'cosh':PyJs_cosh_566_}, var)
            var.registers(['x'])
            return ((var.get('exp')(var.put('x', (+var.get('x'))))+var.get('exp')((-var.get('x'))))/Js(2.0))
        PyJs_cosh_566_._set_name('cosh')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'cosh':PyJs_cosh_566_}))
    PyJs_anonymous_565_._set_name('anonymous')
    @Js
    def PyJs_anonymous_567_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$export', 'exports', 'module', '$expm1'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$expm1', var.get('require')(Js('./_math-expm1')))
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*(var.get('$expm1')!=var.get('Math').get('expm1')))), Js('Math'), Js({'expm1':var.get('$expm1')}))
    PyJs_anonymous_567_._set_name('anonymous')
    @Js
    def PyJs_anonymous_568_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'fround':var.get('require')(Js('./_math-fround'))}))
    PyJs_anonymous_568_._set_name('anonymous')
    @Js
    def PyJs_anonymous_569_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'abs', '$export', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('abs', var.get('Math').get('abs'))
        @Js
        def PyJs_hypot_570_(value1, value2, this, arguments, var=var):
            var = Scope({'value1':value1, 'value2':value2, 'this':this, 'arguments':arguments, 'hypot':PyJs_hypot_570_}, var)
            var.registers(['i', 'value2', 'div', 'arg', 'larg', 'value1', 'aLen', 'sum'])
            var.put('sum', Js(0.0))
            var.put('i', Js(0.0))
            var.put('aLen', var.get('arguments').get('length'))
            var.put('larg', Js(0.0))
            pass
            while (var.get('i')<var.get('aLen')):
                var.put('arg', var.get('abs')(var.get('arguments').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)))))
                if (var.get('larg')<var.get('arg')):
                    var.put('div', (var.get('larg')/var.get('arg')))
                    var.put('sum', (((var.get('sum')*var.get('div'))*var.get('div'))+Js(1.0)))
                    var.put('larg', var.get('arg'))
                else:
                    if (var.get('arg')>Js(0.0)):
                        var.put('div', (var.get('arg')/var.get('larg')))
                        var.put('sum', (var.get('div')*var.get('div')), '+')
                    else:
                        var.put('sum', var.get('arg'), '+')
            return (var.get('Infinity') if PyJsStrictEq(var.get('larg'),var.get('Infinity')) else (var.get('larg')*var.get('Math').callprop('sqrt', var.get('sum'))))
        PyJs_hypot_570_._set_name('hypot')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'hypot':PyJs_hypot_570_}))
    PyJs_anonymous_569_._set_name('anonymous')
    @Js
    def PyJs_anonymous_571_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$imul', '$export', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$imul', var.get('Math').get('imul'))
        @Js
        def PyJs_anonymous_572_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return ((var.get('$imul')(Js(4294967295), Js(5.0))!=(-Js(5.0))) or (var.get('$imul').get('length')!=Js(2.0)))
        PyJs_anonymous_572_._set_name('anonymous')
        @Js
        def PyJs_imul_573_(x, y, this, arguments, var=var):
            var = Scope({'x':x, 'y':y, 'this':this, 'arguments':arguments, 'imul':PyJs_imul_573_}, var)
            var.registers(['y', 'x', 'UINT16', 'xn', 'xl', 'yl', 'yn'])
            var.put('UINT16', Js(65535))
            var.put('xn', (+var.get('x')))
            var.put('yn', (+var.get('y')))
            var.put('xl', (var.get('UINT16')&var.get('xn')))
            var.put('yl', (var.get('UINT16')&var.get('yn')))
            return (Js(0.0)|((var.get('xl')*var.get('yl'))+PyJsBshift(((((var.get('UINT16')&PyJsBshift(var.get('xn'),Js(16.0)))*var.get('yl'))+(var.get('xl')*(var.get('UINT16')&PyJsBshift(var.get('yn'),Js(16.0)))))<<Js(16.0)),Js(0.0))))
        PyJs_imul_573_._set_name('imul')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('require')(Js('./_fails'))(PyJs_anonymous_572_))), Js('Math'), Js({'imul':PyJs_imul_573_}))
    PyJs_anonymous_571_._set_name('anonymous')
    @Js
    def PyJs_anonymous_574_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_log10_575_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'log10':PyJs_log10_575_}, var)
            var.registers(['x'])
            return (var.get('Math').callprop('log', var.get('x'))*var.get('Math').get('LOG10E'))
        PyJs_log10_575_._set_name('log10')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'log10':PyJs_log10_575_}))
    PyJs_anonymous_574_._set_name('anonymous')
    @Js
    def PyJs_anonymous_576_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'log1p':var.get('require')(Js('./_math-log1p'))}))
    PyJs_anonymous_576_._set_name('anonymous')
    @Js
    def PyJs_anonymous_577_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_log2_578_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'log2':PyJs_log2_578_}, var)
            var.registers(['x'])
            return (var.get('Math').callprop('log', var.get('x'))/var.get('Math').get('LN2'))
        PyJs_log2_578_._set_name('log2')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'log2':PyJs_log2_578_}))
    PyJs_anonymous_577_._set_name('anonymous')
    @Js
    def PyJs_anonymous_579_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'sign':var.get('require')(Js('./_math-sign'))}))
    PyJs_anonymous_579_._set_name('anonymous')
    @Js
    def PyJs_anonymous_580_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'expm1', '$export', 'exports', 'module', 'exp'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('expm1', var.get('require')(Js('./_math-expm1')))
        var.put('exp', var.get('Math').get('exp'))
        @Js
        def PyJs_anonymous_581_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return (var.get('Math').callprop('sinh', (-Js(2e-17))).neg()!=(-Js(2e-17)))
        PyJs_anonymous_581_._set_name('anonymous')
        @Js
        def PyJs_sinh_582_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'sinh':PyJs_sinh_582_}, var)
            var.registers(['x'])
            return (((var.get('expm1')(var.get('x'))-var.get('expm1')((-var.get('x'))))/Js(2.0)) if (var.get('Math').callprop('abs', var.put('x', (+var.get('x'))))<Js(1.0)) else ((var.get('exp')((var.get('x')-Js(1.0)))-var.get('exp')(((-var.get('x'))-Js(1.0))))*(var.get('Math').get('E')/Js(2.0))))
        PyJs_sinh_582_._set_name('sinh')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('require')(Js('./_fails'))(PyJs_anonymous_581_))), Js('Math'), Js({'sinh':PyJs_sinh_582_}))
    PyJs_anonymous_580_._set_name('anonymous')
    @Js
    def PyJs_anonymous_583_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'expm1', '$export', 'exports', 'module', 'exp'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('expm1', var.get('require')(Js('./_math-expm1')))
        var.put('exp', var.get('Math').get('exp'))
        @Js
        def PyJs_tanh_584_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'tanh':PyJs_tanh_584_}, var)
            var.registers(['x', 'a', 'b'])
            var.put('a', var.get('expm1')(var.put('x', (+var.get('x')))))
            var.put('b', var.get('expm1')((-var.get('x'))))
            return (Js(1.0) if (var.get('a')==var.get('Infinity')) else ((-Js(1.0)) if (var.get('b')==var.get('Infinity')) else ((var.get('a')-var.get('b'))/(var.get('exp')(var.get('x'))+var.get('exp')((-var.get('x')))))))
        PyJs_tanh_584_._set_name('tanh')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'tanh':PyJs_tanh_584_}))
    PyJs_anonymous_583_._set_name('anonymous')
    @Js
    def PyJs_anonymous_585_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_trunc_586_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'trunc':PyJs_trunc_586_}, var)
            var.registers(['it'])
            return (var.get('Math').get('floor') if (var.get('it')>Js(0.0)) else var.get('Math').get('ceil'))(var.get('it'))
        PyJs_trunc_586_._set_name('trunc')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'trunc':PyJs_trunc_586_}))
    PyJs_anonymous_585_._set_name('anonymous')
    @Js
    def PyJs_anonymous_587_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['proto', 'cof', 'Base', '$trim', 'dP', 'key', 'TRIM', 'gOPN', 'inheritIfRequired', 'BROKEN_COF', 'require', 'toPrimitive', 'NUMBER', 'module', 'fails', 'global', 'keys', '$Number', 'toNumber', 'gOPD', 'exports', 'j', 'has'])
        Js('use strict')
        var.put('global', var.get('require')(Js('./_global')))
        var.put('has', var.get('require')(Js('./_has')))
        var.put('cof', var.get('require')(Js('./_cof')))
        var.put('inheritIfRequired', var.get('require')(Js('./_inherit-if-required')))
        var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('gOPN', var.get('require')(Js('./_object-gopn')).get('f'))
        var.put('gOPD', var.get('require')(Js('./_object-gopd')).get('f'))
        var.put('dP', var.get('require')(Js('./_object-dp')).get('f'))
        var.put('$trim', var.get('require')(Js('./_string-trim')).get('trim'))
        var.put('NUMBER', Js('Number'))
        var.put('$Number', var.get('global').get(var.get('NUMBER')))
        var.put('Base', var.get('$Number'))
        var.put('proto', var.get('$Number').get('prototype'))
        var.put('BROKEN_COF', (var.get('cof')(var.get('require')(Js('./_object-create'))(var.get('proto')))==var.get('NUMBER')))
        var.put('TRIM', var.get('String').get('prototype').contains(Js('trim')))
        @Js
        def PyJs_toNumber_588_(argument, this, arguments, var=var):
            var = Scope({'argument':argument, 'this':this, 'arguments':arguments, 'toNumber':PyJs_toNumber_588_}, var)
            var.registers(['it', 'code', 'radix', 'i', 'third', 'maxCode', 'argument', 'digits', 'first', 'l'])
            var.put('it', var.get('toPrimitive')(var.get('argument'), Js(False)))
            if ((var.get('it',throw=False).typeof()==Js('string')) and (var.get('it').get('length')>Js(2.0))):
                var.put('it', (var.get('it').callprop('trim') if var.get('TRIM') else var.get('$trim')(var.get('it'), Js(3.0))))
                var.put('first', var.get('it').callprop('charCodeAt', Js(0.0)))
                pass
                if (PyJsStrictEq(var.get('first'),Js(43.0)) or PyJsStrictEq(var.get('first'),Js(45.0))):
                    var.put('third', var.get('it').callprop('charCodeAt', Js(2.0)))
                    if (PyJsStrictEq(var.get('third'),Js(88.0)) or PyJsStrictEq(var.get('third'),Js(120.0))):
                        return var.get('NaN')
                else:
                    if PyJsStrictEq(var.get('first'),Js(48.0)):
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get('it').callprop('charCodeAt', Js(1.0)))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(66.0)):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(98.0)):
                                SWITCHED = True
                                var.put('radix', Js(2.0))
                                var.put('maxCode', Js(49.0))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(79.0)):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(111.0)):
                                SWITCHED = True
                                var.put('radix', Js(8.0))
                                var.put('maxCode', Js(55.0))
                                break
                            if True:
                                SWITCHED = True
                                return (+var.get('it'))
                            SWITCHED = True
                            break
                        #for JS loop
                        var.put('digits', var.get('it').callprop('slice', Js(2.0)))
                        var.put('i', Js(0.0))
                        var.put('l', var.get('digits').get('length'))
                        while (var.get('i')<var.get('l')):
                            try:
                                var.put('code', var.get('digits').callprop('charCodeAt', var.get('i')))
                                if ((var.get('code')<Js(48.0)) or (var.get('code')>var.get('maxCode'))):
                                    return var.get('NaN')
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                        return var.get('parseInt')(var.get('digits'), var.get('radix'))
            return (+var.get('it'))
        PyJs_toNumber_588_._set_name('toNumber')
        var.put('toNumber', PyJs_toNumber_588_)
        if ((var.get('$Number')(Js(' 0o1')).neg() or var.get('$Number')(Js('0b1')).neg()) or var.get('$Number')(Js('+0x1'))):
            @Js
            def PyJs_Number_589_(value, this, arguments, var=var):
                var = Scope({'value':value, 'this':this, 'arguments':arguments, 'Number':PyJs_Number_589_}, var)
                var.registers(['it', 'value', 'that'])
                var.put('it', (Js(0.0) if (var.get('arguments').get('length')<Js(1.0)) else var.get('value')))
                var.put('that', var.get(u"this"))
                @Js
                def PyJs_anonymous_590_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get('proto').get('valueOf').callprop('call', var.get('that'))
                PyJs_anonymous_590_._set_name('anonymous')
                return (var.get('inheritIfRequired')(var.get('Base').create(var.get('toNumber')(var.get('it'))), var.get('that'), var.get('$Number')) if (var.get('that').instanceof(var.get('$Number')) and (var.get('fails')(PyJs_anonymous_590_) if var.get('BROKEN_COF') else (var.get('cof')(var.get('that'))!=var.get('NUMBER')))) else var.get('toNumber')(var.get('it')))
            PyJs_Number_589_._set_name('Number')
            var.put('$Number', PyJs_Number_589_)
            #for JS loop
            var.put('keys', (var.get('gOPN')(var.get('Base')) if var.get('require')(Js('./_descriptors')) else ((Js('MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,')+Js('EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,'))+Js('MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger')).callprop('split', Js(','))))
            var.put('j', Js(0.0))
            while (var.get('keys').get('length')>var.get('j')):
                try:
                    if (var.get('has')(var.get('Base'), var.put('key', var.get('keys').get(var.get('j')))) and var.get('has')(var.get('$Number'), var.get('key')).neg()):
                        var.get('dP')(var.get('$Number'), var.get('key'), var.get('gOPD')(var.get('Base'), var.get('key')))
                finally:
                        (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
            var.get('$Number').put('prototype', var.get('proto'))
            var.get('proto').put('constructor', var.get('$Number'))
            var.get('require')(Js('./_redefine'))(var.get('global'), var.get('NUMBER'), var.get('$Number'))
    PyJs_anonymous_587_._set_name('anonymous')
    @Js
    def PyJs_anonymous_591_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Number'), Js({'EPSILON':var.get('Math').callprop('pow', Js(2.0), (-Js(52.0)))}))
    PyJs_anonymous_591_._set_name('anonymous')
    @Js
    def PyJs_anonymous_592_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$export', 'exports', 'module', '_isFinite'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('_isFinite', var.get('require')(Js('./_global')).get('isFinite'))
        @Js
        def PyJs_isFinite_593_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'isFinite':PyJs_isFinite_593_}, var)
            var.registers(['it'])
            return ((var.get('it',throw=False).typeof()==Js('number')) and var.get('_isFinite')(var.get('it')))
        PyJs_isFinite_593_._set_name('isFinite')
        var.get('$export')(var.get('$export').get('S'), Js('Number'), Js({'isFinite':PyJs_isFinite_593_}))
    PyJs_anonymous_592_._set_name('anonymous')
    @Js
    def PyJs_anonymous_594_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Number'), Js({'isInteger':var.get('require')(Js('./_is-integer'))}))
    PyJs_anonymous_594_._set_name('anonymous')
    @Js
    def PyJs_anonymous_595_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_isNaN_596_(number, this, arguments, var=var):
            var = Scope({'number':number, 'this':this, 'arguments':arguments, 'isNaN':PyJs_isNaN_596_}, var)
            var.registers(['number'])
            return (var.get('number')!=var.get('number'))
        PyJs_isNaN_596_._set_name('isNaN')
        var.get('$export')(var.get('$export').get('S'), Js('Number'), Js({'isNaN':PyJs_isNaN_596_}))
    PyJs_anonymous_595_._set_name('anonymous')
    @Js
    def PyJs_anonymous_597_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'isInteger', 'abs', '$export', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('isInteger', var.get('require')(Js('./_is-integer')))
        var.put('abs', var.get('Math').get('abs'))
        @Js
        def PyJs_isSafeInteger_598_(number, this, arguments, var=var):
            var = Scope({'number':number, 'this':this, 'arguments':arguments, 'isSafeInteger':PyJs_isSafeInteger_598_}, var)
            var.registers(['number'])
            return (var.get('isInteger')(var.get('number')) and (var.get('abs')(var.get('number'))<=Js(9007199254740991)))
        PyJs_isSafeInteger_598_._set_name('isSafeInteger')
        var.get('$export')(var.get('$export').get('S'), Js('Number'), Js({'isSafeInteger':PyJs_isSafeInteger_598_}))
    PyJs_anonymous_597_._set_name('anonymous')
    @Js
    def PyJs_anonymous_599_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Number'), Js({'MAX_SAFE_INTEGER':Js(9007199254740991)}))
    PyJs_anonymous_599_._set_name('anonymous')
    @Js
    def PyJs_anonymous_600_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Number'), Js({'MIN_SAFE_INTEGER':(-Js(9007199254740991))}))
    PyJs_anonymous_600_._set_name('anonymous')
    @Js
    def PyJs_anonymous_601_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$parseFloat', '$export', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$parseFloat', var.get('require')(Js('./_parse-float')))
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*(var.get('Number').get('parseFloat')!=var.get('$parseFloat')))), Js('Number'), Js({'parseFloat':var.get('$parseFloat')}))
    PyJs_anonymous_601_._set_name('anonymous')
    @Js
    def PyJs_anonymous_602_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$parseInt', '$export', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$parseInt', var.get('require')(Js('./_parse-int')))
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*(var.get('Number').get('parseInt')!=var.get('$parseInt')))), Js('Number'), Js({'parseInt':var.get('$parseInt')}))
    PyJs_anonymous_602_._set_name('anonymous')
    @Js
    def PyJs_anonymous_603_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'floor', 'aNumberValue', '$export', 'ZERO', 'exports', 'divide', 'module', 'repeat', 'data', 'ERROR', '$toFixed', 'numToString', 'pow', 'multiply', 'toInteger', 'log'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('aNumberValue', var.get('require')(Js('./_a-number-value')))
        var.put('repeat', var.get('require')(Js('./_string-repeat')))
        var.put('$toFixed', Js(1.0).get('toFixed'))
        var.put('floor', var.get('Math').get('floor'))
        var.put('data', Js([Js(0.0), Js(0.0), Js(0.0), Js(0.0), Js(0.0), Js(0.0)]))
        var.put('ERROR', Js('Number.toFixed: incorrect invocation!'))
        var.put('ZERO', Js('0'))
        @Js
        def PyJs_multiply_604_(n, c, this, arguments, var=var):
            var = Scope({'n':n, 'c':c, 'this':this, 'arguments':arguments, 'multiply':PyJs_multiply_604_}, var)
            var.registers(['c', 'c2', 'i', 'n'])
            var.put('i', (-Js(1.0)))
            var.put('c2', var.get('c'))
            while (var.put('i',Js(var.get('i').to_number())+Js(1))<Js(6.0)):
                var.put('c2', (var.get('n')*var.get('data').get(var.get('i'))), '+')
                var.get('data').put(var.get('i'), (var.get('c2')%Js(10000000.0)))
                var.put('c2', var.get('floor')((var.get('c2')/Js(10000000.0))))
        PyJs_multiply_604_._set_name('multiply')
        var.put('multiply', PyJs_multiply_604_)
        @Js
        def PyJs_divide_605_(n, this, arguments, var=var):
            var = Scope({'n':n, 'this':this, 'arguments':arguments, 'divide':PyJs_divide_605_}, var)
            var.registers(['c', 'i', 'n'])
            var.put('i', Js(6.0))
            var.put('c', Js(0.0))
            while (var.put('i',Js(var.get('i').to_number())-Js(1))>=Js(0.0)):
                var.put('c', var.get('data').get(var.get('i')), '+')
                var.get('data').put(var.get('i'), var.get('floor')((var.get('c')/var.get('n'))))
                var.put('c', ((var.get('c')%var.get('n'))*Js(10000000.0)))
        PyJs_divide_605_._set_name('divide')
        var.put('divide', PyJs_divide_605_)
        @Js
        def PyJs_numToString_606_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'numToString':PyJs_numToString_606_}, var)
            var.registers(['s', 'i', 't'])
            var.put('i', Js(6.0))
            var.put('s', Js(''))
            while (var.put('i',Js(var.get('i').to_number())-Js(1))>=Js(0.0)):
                if ((PyJsStrictNeq(var.get('s'),Js('')) or PyJsStrictEq(var.get('i'),Js(0.0))) or PyJsStrictNeq(var.get('data').get(var.get('i')),Js(0.0))):
                    var.put('t', var.get('String')(var.get('data').get(var.get('i'))))
                    var.put('s', (var.get('t') if PyJsStrictEq(var.get('s'),Js('')) else ((var.get('s')+var.get('repeat').callprop('call', var.get('ZERO'), (Js(7.0)-var.get('t').get('length'))))+var.get('t'))))
            return var.get('s')
        PyJs_numToString_606_._set_name('numToString')
        var.put('numToString', PyJs_numToString_606_)
        @Js
        def PyJs_pow_607_(x, n, acc, this, arguments, var=var):
            var = Scope({'x':x, 'n':n, 'acc':acc, 'this':this, 'arguments':arguments, 'pow':PyJs_pow_607_}, var)
            var.registers(['acc', 'x', 'n'])
            return (var.get('acc') if PyJsStrictEq(var.get('n'),Js(0.0)) else (var.get('pow')(var.get('x'), (var.get('n')-Js(1.0)), (var.get('acc')*var.get('x'))) if PyJsStrictEq((var.get('n')%Js(2.0)),Js(1.0)) else var.get('pow')((var.get('x')*var.get('x')), (var.get('n')/Js(2.0)), var.get('acc'))))
        PyJs_pow_607_._set_name('pow')
        var.put('pow', PyJs_pow_607_)
        @Js
        def PyJs_log_608_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'log':PyJs_log_608_}, var)
            var.registers(['x2', 'x', 'n'])
            var.put('n', Js(0.0))
            var.put('x2', var.get('x'))
            while (var.get('x2')>=Js(4096.0)):
                var.put('n', Js(12.0), '+')
                var.put('x2', Js(4096.0), '/')
            while (var.get('x2')>=Js(2.0)):
                var.put('n', Js(1.0), '+')
                var.put('x2', Js(2.0), '/')
            return var.get('n')
        PyJs_log_608_._set_name('log')
        var.put('log', PyJs_log_608_)
        def PyJs_LONG_610_(var=var):
            @Js
            def PyJs_anonymous_609_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('$toFixed').callprop('call', Js({}))
            PyJs_anonymous_609_._set_name('anonymous')
            return ((var.get('$toFixed').neg().neg() and (((PyJsStrictNeq(Js(8e-05).callprop('toFixed', Js(3.0)),Js('0.000')) or PyJsStrictNeq(Js(0.9).callprop('toFixed', Js(0.0)),Js('1'))) or PyJsStrictNeq(Js(1.255).callprop('toFixed', Js(2.0)),Js('1.25'))) or PyJsStrictNeq(Js(1.0000000000000001e+18).callprop('toFixed', Js(0.0)),Js('1000000000000000128')))) or var.get('require')(Js('./_fails'))(PyJs_anonymous_609_).neg())
        @Js
        def PyJs_toFixed_611_(fractionDigits, this, arguments, var=var):
            var = Scope({'fractionDigits':fractionDigits, 'this':this, 'arguments':arguments, 'toFixed':PyJs_toFixed_611_}, var)
            var.registers(['fractionDigits', 'z', 'f', 'x', 'j', 'm', 'k', 'e', 's'])
            var.put('x', var.get('aNumberValue')(var.get(u"this"), var.get('ERROR')))
            var.put('f', var.get('toInteger')(var.get('fractionDigits')))
            var.put('s', Js(''))
            var.put('m', var.get('ZERO'))
            pass
            if ((var.get('f')<Js(0.0)) or (var.get('f')>Js(20.0))):
                PyJsTempException = JsToPyException(var.get('RangeError')(var.get('ERROR')))
                raise PyJsTempException
            if (var.get('x')!=var.get('x')):
                return Js('NaN')
            if ((var.get('x')<=(-Js(1e+21))) or (var.get('x')>=Js(1e+21))):
                return var.get('String')(var.get('x'))
            if (var.get('x')<Js(0.0)):
                var.put('s', Js('-'))
                var.put('x', (-var.get('x')))
            if (var.get('x')>Js(1e-21)):
                var.put('e', (var.get('log')((var.get('x')*var.get('pow')(Js(2.0), Js(69.0), Js(1.0))))-Js(69.0)))
                var.put('z', ((var.get('x')*var.get('pow')(Js(2.0), (-var.get('e')), Js(1.0))) if (var.get('e')<Js(0.0)) else (var.get('x')/var.get('pow')(Js(2.0), var.get('e'), Js(1.0)))))
                var.put('z', Js(4503599627370496), '*')
                var.put('e', (Js(52.0)-var.get('e')))
                if (var.get('e')>Js(0.0)):
                    var.get('multiply')(Js(0.0), var.get('z'))
                    var.put('j', var.get('f'))
                    while (var.get('j')>=Js(7.0)):
                        var.get('multiply')(Js(10000000.0), Js(0.0))
                        var.put('j', Js(7.0), '-')
                    var.get('multiply')(var.get('pow')(Js(10.0), var.get('j'), Js(1.0)), Js(0.0))
                    var.put('j', (var.get('e')-Js(1.0)))
                    while (var.get('j')>=Js(23.0)):
                        var.get('divide')((Js(1.0)<<Js(23.0)))
                        var.put('j', Js(23.0), '-')
                    var.get('divide')((Js(1.0)<<var.get('j')))
                    var.get('multiply')(Js(1.0), Js(1.0))
                    var.get('divide')(Js(2.0))
                    var.put('m', var.get('numToString')())
                else:
                    var.get('multiply')(Js(0.0), var.get('z'))
                    var.get('multiply')((Js(1.0)<<(-var.get('e'))), Js(0.0))
                    var.put('m', (var.get('numToString')()+var.get('repeat').callprop('call', var.get('ZERO'), var.get('f'))))
            if (var.get('f')>Js(0.0)):
                var.put('k', var.get('m').get('length'))
                var.put('m', (var.get('s')+(((Js('0.')+var.get('repeat').callprop('call', var.get('ZERO'), (var.get('f')-var.get('k'))))+var.get('m')) if (var.get('k')<=var.get('f')) else ((var.get('m').callprop('slice', Js(0.0), (var.get('k')-var.get('f')))+Js('.'))+var.get('m').callprop('slice', (var.get('k')-var.get('f')))))))
            else:
                var.put('m', (var.get('s')+var.get('m')))
            return var.get('m')
        PyJs_toFixed_611_._set_name('toFixed')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*PyJs_LONG_610_())), Js('Number'), Js({'toFixed':PyJs_toFixed_611_}))
    PyJs_anonymous_603_._set_name('anonymous')
    @Js
    def PyJs_anonymous_612_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$fails', 'require', 'aNumberValue', '$export', 'exports', 'module', '$toPrecision'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$fails', var.get('require')(Js('./_fails')))
        var.put('aNumberValue', var.get('require')(Js('./_a-number-value')))
        var.put('$toPrecision', Js(1.0).get('toPrecision'))
        @Js
        def PyJs_anonymous_613_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return PyJsStrictNeq(var.get('$toPrecision').callprop('call', Js(1.0), var.get('undefined')),Js('1'))
        PyJs_anonymous_613_._set_name('anonymous')
        @Js
        def PyJs_anonymous_614_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('$toPrecision').callprop('call', Js({}))
        PyJs_anonymous_614_._set_name('anonymous')
        @Js
        def PyJs_toPrecision_615_(precision, this, arguments, var=var):
            var = Scope({'precision':precision, 'this':this, 'arguments':arguments, 'toPrecision':PyJs_toPrecision_615_}, var)
            var.registers(['precision', 'that'])
            var.put('that', var.get('aNumberValue')(var.get(u"this"), Js('Number#toPrecision: incorrect invocation!')))
            return (var.get('$toPrecision').callprop('call', var.get('that')) if PyJsStrictEq(var.get('precision'),var.get('undefined')) else var.get('$toPrecision').callprop('call', var.get('that'), var.get('precision')))
        PyJs_toPrecision_615_._set_name('toPrecision')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*(var.get('$fails')(PyJs_anonymous_613_) or var.get('$fails')(PyJs_anonymous_614_).neg()))), Js('Number'), Js({'toPrecision':PyJs_toPrecision_615_}))
    PyJs_anonymous_612_._set_name('anonymous')
    @Js
    def PyJs_anonymous_616_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')((var.get('$export').get('S')+var.get('$export').get('F')), Js('Object'), Js({'assign':var.get('require')(Js('./_object-assign'))}))
    PyJs_anonymous_616_._set_name('anonymous')
    @Js
    def PyJs_anonymous_617_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Object'), Js({'create':var.get('require')(Js('./_object-create'))}))
    PyJs_anonymous_617_._set_name('anonymous')
    @Js
    def PyJs_anonymous_618_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('require')(Js('./_descriptors')).neg())), Js('Object'), Js({'defineProperties':var.get('require')(Js('./_object-dps'))}))
    PyJs_anonymous_618_._set_name('anonymous')
    @Js
    def PyJs_anonymous_619_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('require')(Js('./_descriptors')).neg())), Js('Object'), Js({'defineProperty':var.get('require')(Js('./_object-dp')).get('f')}))
    PyJs_anonymous_619_._set_name('anonymous')
    @Js
    def PyJs_anonymous_620_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'meta', 'exports', 'module', 'isObject'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('meta', var.get('require')(Js('./_meta')).get('onFreeze'))
        @Js
        def PyJs_anonymous_621_(PyJsArg_24667265657a65_, this, arguments, var=var):
            var = Scope({'$freeze':PyJsArg_24667265657a65_, 'this':this, 'arguments':arguments}, var)
            var.registers(['$freeze'])
            @Js
            def PyJs_freeze_622_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments, 'freeze':PyJs_freeze_622_}, var)
                var.registers(['it'])
                return (var.get('$freeze')(var.get('meta')(var.get('it'))) if (var.get('$freeze') and var.get('isObject')(var.get('it'))) else var.get('it'))
            PyJs_freeze_622_._set_name('freeze')
            return PyJs_freeze_622_
        PyJs_anonymous_621_._set_name('anonymous')
        var.get('require')(Js('./_object-sap'))(Js('freeze'), PyJs_anonymous_621_)
    PyJs_anonymous_620_._set_name('anonymous')
    @Js
    def PyJs_anonymous_623_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$getOwnPropertyDescriptor', 'toIObject', 'exports', 'module'])
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('$getOwnPropertyDescriptor', var.get('require')(Js('./_object-gopd')).get('f'))
        @Js
        def PyJs_anonymous_624_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_getOwnPropertyDescriptor_625_(it, key, this, arguments, var=var):
                var = Scope({'it':it, 'key':key, 'this':this, 'arguments':arguments, 'getOwnPropertyDescriptor':PyJs_getOwnPropertyDescriptor_625_}, var)
                var.registers(['it', 'key'])
                return var.get('$getOwnPropertyDescriptor')(var.get('toIObject')(var.get('it')), var.get('key'))
            PyJs_getOwnPropertyDescriptor_625_._set_name('getOwnPropertyDescriptor')
            return PyJs_getOwnPropertyDescriptor_625_
        PyJs_anonymous_624_._set_name('anonymous')
        var.get('require')(Js('./_object-sap'))(Js('getOwnPropertyDescriptor'), PyJs_anonymous_624_)
    PyJs_anonymous_623_._set_name('anonymous')
    @Js
    def PyJs_anonymous_626_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_627_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('require')(Js('./_object-gopn-ext')).get('f')
        PyJs_anonymous_627_._set_name('anonymous')
        var.get('require')(Js('./_object-sap'))(Js('getOwnPropertyNames'), PyJs_anonymous_627_)
    PyJs_anonymous_626_._set_name('anonymous')
    @Js
    def PyJs_anonymous_628_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$getPrototypeOf', 'toObject', 'exports', 'module'])
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('$getPrototypeOf', var.get('require')(Js('./_object-gpo')))
        @Js
        def PyJs_anonymous_629_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_getPrototypeOf_630_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments, 'getPrototypeOf':PyJs_getPrototypeOf_630_}, var)
                var.registers(['it'])
                return var.get('$getPrototypeOf')(var.get('toObject')(var.get('it')))
            PyJs_getPrototypeOf_630_._set_name('getPrototypeOf')
            return PyJs_getPrototypeOf_630_
        PyJs_anonymous_629_._set_name('anonymous')
        var.get('require')(Js('./_object-sap'))(Js('getPrototypeOf'), PyJs_anonymous_629_)
    PyJs_anonymous_628_._set_name('anonymous')
    @Js
    def PyJs_anonymous_631_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'isObject', 'module', 'exports'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        @Js
        def PyJs_anonymous_632_(PyJsArg_246973457874656e7369626c65_, this, arguments, var=var):
            var = Scope({'$isExtensible':PyJsArg_246973457874656e7369626c65_, 'this':this, 'arguments':arguments}, var)
            var.registers(['$isExtensible'])
            @Js
            def PyJs_isExtensible_633_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments, 'isExtensible':PyJs_isExtensible_633_}, var)
                var.registers(['it'])
                return ((var.get('$isExtensible')(var.get('it')) if var.get('$isExtensible') else Js(True)) if var.get('isObject')(var.get('it')) else Js(False))
            PyJs_isExtensible_633_._set_name('isExtensible')
            return PyJs_isExtensible_633_
        PyJs_anonymous_632_._set_name('anonymous')
        var.get('require')(Js('./_object-sap'))(Js('isExtensible'), PyJs_anonymous_632_)
    PyJs_anonymous_631_._set_name('anonymous')
    @Js
    def PyJs_anonymous_634_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'isObject', 'module', 'exports'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        @Js
        def PyJs_anonymous_635_(PyJsArg_24697346726f7a656e_, this, arguments, var=var):
            var = Scope({'$isFrozen':PyJsArg_24697346726f7a656e_, 'this':this, 'arguments':arguments}, var)
            var.registers(['$isFrozen'])
            @Js
            def PyJs_isFrozen_636_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments, 'isFrozen':PyJs_isFrozen_636_}, var)
                var.registers(['it'])
                return ((var.get('$isFrozen')(var.get('it')) if var.get('$isFrozen') else Js(False)) if var.get('isObject')(var.get('it')) else Js(True))
            PyJs_isFrozen_636_._set_name('isFrozen')
            return PyJs_isFrozen_636_
        PyJs_anonymous_635_._set_name('anonymous')
        var.get('require')(Js('./_object-sap'))(Js('isFrozen'), PyJs_anonymous_635_)
    PyJs_anonymous_634_._set_name('anonymous')
    @Js
    def PyJs_anonymous_637_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'isObject', 'module', 'exports'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        @Js
        def PyJs_anonymous_638_(PyJsArg_2469735365616c6564_, this, arguments, var=var):
            var = Scope({'$isSealed':PyJsArg_2469735365616c6564_, 'this':this, 'arguments':arguments}, var)
            var.registers(['$isSealed'])
            @Js
            def PyJs_isSealed_639_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments, 'isSealed':PyJs_isSealed_639_}, var)
                var.registers(['it'])
                return ((var.get('$isSealed')(var.get('it')) if var.get('$isSealed') else Js(False)) if var.get('isObject')(var.get('it')) else Js(True))
            PyJs_isSealed_639_._set_name('isSealed')
            return PyJs_isSealed_639_
        PyJs_anonymous_638_._set_name('anonymous')
        var.get('require')(Js('./_object-sap'))(Js('isSealed'), PyJs_anonymous_638_)
    PyJs_anonymous_637_._set_name('anonymous')
    @Js
    def PyJs_anonymous_640_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Object'), Js({'is':var.get('require')(Js('./_same-value'))}))
    PyJs_anonymous_640_._set_name('anonymous')
    @Js
    def PyJs_anonymous_641_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$keys', 'toObject', 'exports', 'module'])
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('$keys', var.get('require')(Js('./_object-keys')))
        @Js
        def PyJs_anonymous_642_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_keys_643_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments, 'keys':PyJs_keys_643_}, var)
                var.registers(['it'])
                return var.get('$keys')(var.get('toObject')(var.get('it')))
            PyJs_keys_643_._set_name('keys')
            return PyJs_keys_643_
        PyJs_anonymous_642_._set_name('anonymous')
        var.get('require')(Js('./_object-sap'))(Js('keys'), PyJs_anonymous_642_)
    PyJs_anonymous_641_._set_name('anonymous')
    @Js
    def PyJs_anonymous_644_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'meta', 'exports', 'module', 'isObject'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('meta', var.get('require')(Js('./_meta')).get('onFreeze'))
        @Js
        def PyJs_anonymous_645_(PyJsArg_2470726576656e74457874656e73696f6e73_, this, arguments, var=var):
            var = Scope({'$preventExtensions':PyJsArg_2470726576656e74457874656e73696f6e73_, 'this':this, 'arguments':arguments}, var)
            var.registers(['$preventExtensions'])
            @Js
            def PyJs_preventExtensions_646_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments, 'preventExtensions':PyJs_preventExtensions_646_}, var)
                var.registers(['it'])
                return (var.get('$preventExtensions')(var.get('meta')(var.get('it'))) if (var.get('$preventExtensions') and var.get('isObject')(var.get('it'))) else var.get('it'))
            PyJs_preventExtensions_646_._set_name('preventExtensions')
            return PyJs_preventExtensions_646_
        PyJs_anonymous_645_._set_name('anonymous')
        var.get('require')(Js('./_object-sap'))(Js('preventExtensions'), PyJs_anonymous_645_)
    PyJs_anonymous_644_._set_name('anonymous')
    @Js
    def PyJs_anonymous_647_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'meta', 'exports', 'module', 'isObject'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('meta', var.get('require')(Js('./_meta')).get('onFreeze'))
        @Js
        def PyJs_anonymous_648_(PyJsArg_247365616c_, this, arguments, var=var):
            var = Scope({'$seal':PyJsArg_247365616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['$seal'])
            @Js
            def PyJs_seal_649_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments, 'seal':PyJs_seal_649_}, var)
                var.registers(['it'])
                return (var.get('$seal')(var.get('meta')(var.get('it'))) if (var.get('$seal') and var.get('isObject')(var.get('it'))) else var.get('it'))
            PyJs_seal_649_._set_name('seal')
            return PyJs_seal_649_
        PyJs_anonymous_648_._set_name('anonymous')
        var.get('require')(Js('./_object-sap'))(Js('seal'), PyJs_anonymous_648_)
    PyJs_anonymous_647_._set_name('anonymous')
    @Js
    def PyJs_anonymous_650_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Object'), Js({'setPrototypeOf':var.get('require')(Js('./_set-proto')).get('set')}))
    PyJs_anonymous_650_._set_name('anonymous')
    @Js
    def PyJs_anonymous_651_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'test', 'classof', 'exports', 'module'])
        Js('use strict')
        var.put('classof', var.get('require')(Js('./_classof')))
        var.put('test', Js({}))
        var.get('test').put(var.get('require')(Js('./_wks'))(Js('toStringTag')), Js('z'))
        if ((var.get('test')+Js(''))!=Js('[object z]')):
            @Js
            def PyJs_toString_652_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'toString':PyJs_toString_652_}, var)
                var.registers([])
                return ((Js('[object ')+var.get('classof')(var.get(u"this")))+Js(']'))
            PyJs_toString_652_._set_name('toString')
            var.get('require')(Js('./_redefine'))(var.get('Object').get('prototype'), Js('toString'), PyJs_toString_652_, Js(True))
    PyJs_anonymous_651_._set_name('anonymous')
    @Js
    def PyJs_anonymous_653_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$parseFloat', '$export', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$parseFloat', var.get('require')(Js('./_parse-float')))
        var.get('$export')((var.get('$export').get('G')+(var.get('$export').get('F')*(var.get('parseFloat')!=var.get('$parseFloat')))), Js({'parseFloat':var.get('$parseFloat')}))
    PyJs_anonymous_653_._set_name('anonymous')
    @Js
    def PyJs_anonymous_654_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$parseInt', '$export', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$parseInt', var.get('require')(Js('./_parse-int')))
        var.get('$export')((var.get('$export').get('G')+(var.get('$export').get('F')*(var.get('parseInt')!=var.get('$parseInt')))), Js({'parseInt':var.get('$parseInt')}))
    PyJs_anonymous_654_._set_name('anonymous')
    @Js
    def PyJs_anonymous_655_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['isNode', 'Wrapper', 'task', 'onUnhandled', 'promiseResolve', 'userAgent', 'process', 'isThenable', '$resolve', 'v8', 'LIBRARY', 'versions', 'speciesConstructor', 'USE_NATIVE', 'newGenericPromiseCapability', 'require', 'classof', 'isUnhandled', 'empty', '$Promise', 'OwnPromiseCapability', 'module', 'notify', 'microtask', 'global', '$reject', 'aFunction', 'anInstance', 'Internal', 'perform', 'onHandleUnhandled', '$export', 'exports', 'PROMISE', 'TypeError', 'newPromiseCapability', 'newPromiseCapabilityModule', 'forOf', 'ctx', 'isObject'])
        Js('use strict')
        var.put('LIBRARY', var.get('require')(Js('./_library')))
        var.put('global', var.get('require')(Js('./_global')))
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('classof', var.get('require')(Js('./_classof')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('anInstance', var.get('require')(Js('./_an-instance')))
        var.put('forOf', var.get('require')(Js('./_for-of')))
        var.put('speciesConstructor', var.get('require')(Js('./_species-constructor')))
        var.put('task', var.get('require')(Js('./_task')).get('set'))
        var.put('microtask', var.get('require')(Js('./_microtask'))())
        var.put('newPromiseCapabilityModule', var.get('require')(Js('./_new-promise-capability')))
        var.put('perform', var.get('require')(Js('./_perform')))
        var.put('userAgent', var.get('require')(Js('./_user-agent')))
        var.put('promiseResolve', var.get('require')(Js('./_promise-resolve')))
        var.put('PROMISE', Js('Promise'))
        var.put('TypeError', var.get('global').get('TypeError'))
        var.put('process', var.get('global').get('process'))
        var.put('versions', (var.get('process') and var.get('process').get('versions')))
        var.put('v8', ((var.get('versions') and var.get('versions').get('v8')) or Js('')))
        var.put('$Promise', var.get('global').get(var.get('PROMISE')))
        var.put('isNode', (var.get('classof')(var.get('process'))==Js('process')))
        @Js
        def PyJs_empty_656_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'empty':PyJs_empty_656_}, var)
            var.registers([])
            pass
        PyJs_empty_656_._set_name('empty')
        var.put('empty', PyJs_empty_656_)
        pass
        var.put('newPromiseCapability', var.put('newGenericPromiseCapability', var.get('newPromiseCapabilityModule').get('f')))
        @Js
        def PyJs_anonymous_657_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['FakePromise', 'promise'])
            try:
                var.put('promise', var.get('$Promise').callprop('resolve', Js(1.0)))
                @Js
                def PyJs_anonymous_658_(exec, this, arguments, var=var):
                    var = Scope({'exec':exec, 'this':this, 'arguments':arguments}, var)
                    var.registers(['exec'])
                    var.get('exec')(var.get('empty'), var.get('empty'))
                PyJs_anonymous_658_._set_name('anonymous')
                var.put('FakePromise', var.get('promise').put('constructor', Js({})).put(var.get('require')(Js('./_wks'))(Js('species')), PyJs_anonymous_658_))
                return ((((var.get('isNode') or (var.get('PromiseRejectionEvent',throw=False).typeof()==Js('function'))) and var.get('promise').callprop('then', var.get('empty')).instanceof(var.get('FakePromise'))) and PyJsStrictNeq(var.get('v8').callprop('indexOf', Js('6.6')),Js(0.0))) and PyJsStrictEq(var.get('userAgent').callprop('indexOf', Js('Chrome/66')),(-Js(1.0))))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_8692749 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    pass
                finally:
                    if PyJsHolder_65_8692749 is not None:
                        var.own['e'] = PyJsHolder_65_8692749
                    else:
                        del var.own['e']
                    del PyJsHolder_65_8692749
        PyJs_anonymous_657_._set_name('anonymous')
        var.put('USE_NATIVE', PyJs_anonymous_657_().neg().neg())
        @Js
        def PyJs_isThenable_659_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'isThenable':PyJs_isThenable_659_}, var)
            var.registers(['then', 'it'])
            pass
            return (var.get('then') if (var.get('isObject')(var.get('it')) and (var.put('then', var.get('it').get('then')).typeof()==Js('function'))) else Js(False))
        PyJs_isThenable_659_._set_name('isThenable')
        var.put('isThenable', PyJs_isThenable_659_)
        @Js
        def PyJs_notify_660_(promise, isReject, this, arguments, var=var):
            var = Scope({'promise':promise, 'isReject':isReject, 'this':this, 'arguments':arguments, 'notify':PyJs_notify_660_}, var)
            var.registers(['chain', 'promise', 'isReject'])
            if var.get('promise').get('_n'):
                return var.get('undefined')
            var.get('promise').put('_n', Js(True))
            var.put('chain', var.get('promise').get('_c'))
            @Js
            def PyJs_anonymous_661_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['i', 'value', 'run', 'ok'])
                var.put('value', var.get('promise').get('_v'))
                var.put('ok', (var.get('promise').get('_s')==Js(1.0)))
                var.put('i', Js(0.0))
                @Js
                def PyJs_run_662_(reaction, this, arguments, var=var):
                    var = Scope({'reaction':reaction, 'this':this, 'arguments':arguments, 'run':PyJs_run_662_}, var)
                    var.registers(['reaction', 'domain', 'resolve', 'result', 'exited', 'reject', 'then', 'handler'])
                    var.put('handler', (var.get('reaction').get('ok') if var.get('ok') else var.get('reaction').get('fail')))
                    var.put('resolve', var.get('reaction').get('resolve'))
                    var.put('reject', var.get('reaction').get('reject'))
                    var.put('domain', var.get('reaction').get('domain'))
                    pass
                    try:
                        if var.get('handler'):
                            if var.get('ok').neg():
                                if (var.get('promise').get('_h')==Js(2.0)):
                                    var.get('onHandleUnhandled')(var.get('promise'))
                                var.get('promise').put('_h', Js(1.0))
                            if PyJsStrictEq(var.get('handler'),Js(True)):
                                var.put('result', var.get('value'))
                            else:
                                if var.get('domain'):
                                    var.get('domain').callprop('enter')
                                var.put('result', var.get('handler')(var.get('value')))
                                if var.get('domain'):
                                    var.get('domain').callprop('exit')
                                    var.put('exited', Js(True))
                            if PyJsStrictEq(var.get('result'),var.get('reaction').get('promise')):
                                var.get('reject')(var.get('TypeError')(Js('Promise-chain cycle')))
                            else:
                                if var.put('then', var.get('isThenable')(var.get('result'))):
                                    var.get('then').callprop('call', var.get('result'), var.get('resolve'), var.get('reject'))
                                else:
                                    var.get('resolve')(var.get('result'))
                        else:
                            var.get('reject')(var.get('value'))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_92126311 = var.own.get('e')
                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                        try:
                            if (var.get('domain') and var.get('exited').neg()):
                                var.get('domain').callprop('exit')
                            var.get('reject')(var.get('e'))
                        finally:
                            if PyJsHolder_65_92126311 is not None:
                                var.own['e'] = PyJsHolder_65_92126311
                            else:
                                del var.own['e']
                            del PyJsHolder_65_92126311
                PyJs_run_662_._set_name('run')
                var.put('run', PyJs_run_662_)
                while (var.get('chain').get('length')>var.get('i')):
                    var.get('run')(var.get('chain').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
                var.get('promise').put('_c', Js([]))
                var.get('promise').put('_n', Js(False))
                if (var.get('isReject') and var.get('promise').get('_h').neg()):
                    var.get('onUnhandled')(var.get('promise'))
            PyJs_anonymous_661_._set_name('anonymous')
            var.get('microtask')(PyJs_anonymous_661_)
        PyJs_notify_660_._set_name('notify')
        var.put('notify', PyJs_notify_660_)
        @Js
        def PyJs_onUnhandled_663_(promise, this, arguments, var=var):
            var = Scope({'promise':promise, 'this':this, 'arguments':arguments, 'onUnhandled':PyJs_onUnhandled_663_}, var)
            var.registers(['promise'])
            @Js
            def PyJs_anonymous_664_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['console', 'result', 'unhandled', 'value', 'handler'])
                var.put('value', var.get('promise').get('_v'))
                var.put('unhandled', var.get('isUnhandled')(var.get('promise')))
                pass
                if var.get('unhandled'):
                    @Js
                    def PyJs_anonymous_665_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        if var.get('isNode'):
                            var.get('process').callprop('emit', Js('unhandledRejection'), var.get('value'), var.get('promise'))
                        else:
                            if var.put('handler', var.get('global').get('onunhandledrejection')):
                                var.get('handler')(Js({'promise':var.get('promise'),'reason':var.get('value')}))
                            else:
                                if (var.put('console', var.get('global').get('console')) and var.get('console').get('error')):
                                    var.get('console').callprop('error', Js('Unhandled promise rejection'), var.get('value'))
                    PyJs_anonymous_665_._set_name('anonymous')
                    var.put('result', var.get('perform')(PyJs_anonymous_665_))
                    var.get('promise').put('_h', (Js(2.0) if (var.get('isNode') or var.get('isUnhandled')(var.get('promise'))) else Js(1.0)))
                var.get('promise').put('_a', var.get('undefined'))
                if (var.get('unhandled') and var.get('result').get('e')):
                    PyJsTempException = JsToPyException(var.get('result').get('v'))
                    raise PyJsTempException
            PyJs_anonymous_664_._set_name('anonymous')
            var.get('task').callprop('call', var.get('global'), PyJs_anonymous_664_)
        PyJs_onUnhandled_663_._set_name('onUnhandled')
        var.put('onUnhandled', PyJs_onUnhandled_663_)
        @Js
        def PyJs_isUnhandled_666_(promise, this, arguments, var=var):
            var = Scope({'promise':promise, 'this':this, 'arguments':arguments, 'isUnhandled':PyJs_isUnhandled_666_}, var)
            var.registers(['promise'])
            return (PyJsStrictNeq(var.get('promise').get('_h'),Js(1.0)) and PyJsStrictEq((var.get('promise').get('_a') or var.get('promise').get('_c')).get('length'),Js(0.0)))
        PyJs_isUnhandled_666_._set_name('isUnhandled')
        var.put('isUnhandled', PyJs_isUnhandled_666_)
        @Js
        def PyJs_onHandleUnhandled_667_(promise, this, arguments, var=var):
            var = Scope({'promise':promise, 'this':this, 'arguments':arguments, 'onHandleUnhandled':PyJs_onHandleUnhandled_667_}, var)
            var.registers(['promise'])
            @Js
            def PyJs_anonymous_668_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['handler'])
                pass
                if var.get('isNode'):
                    var.get('process').callprop('emit', Js('rejectionHandled'), var.get('promise'))
                else:
                    if var.put('handler', var.get('global').get('onrejectionhandled')):
                        var.get('handler')(Js({'promise':var.get('promise'),'reason':var.get('promise').get('_v')}))
            PyJs_anonymous_668_._set_name('anonymous')
            var.get('task').callprop('call', var.get('global'), PyJs_anonymous_668_)
        PyJs_onHandleUnhandled_667_._set_name('onHandleUnhandled')
        var.put('onHandleUnhandled', PyJs_onHandleUnhandled_667_)
        @Js
        def PyJs_InlineNonPyName_669_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments, '$reject':PyJs_InlineNonPyName_669_}, var)
            var.registers(['value', 'promise'])
            var.put('promise', var.get(u"this"))
            if var.get('promise').get('_d'):
                return var.get('undefined')
            var.get('promise').put('_d', Js(True))
            var.put('promise', (var.get('promise').get('_w') or var.get('promise')))
            var.get('promise').put('_v', var.get('value'))
            var.get('promise').put('_s', Js(2.0))
            if var.get('promise').get('_a').neg():
                var.get('promise').put('_a', var.get('promise').get('_c').callprop('slice'))
            var.get('notify')(var.get('promise'), Js(True))
        PyJs_InlineNonPyName_669_._set_name('$reject')
        var.put('$reject', PyJs_InlineNonPyName_669_)
        @Js
        def PyJs_InlineNonPyName_670_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments, '$resolve':PyJs_InlineNonPyName_670_}, var)
            var.registers(['then', 'value', 'promise'])
            var.put('promise', var.get(u"this"))
            pass
            if var.get('promise').get('_d'):
                return var.get('undefined')
            var.get('promise').put('_d', Js(True))
            var.put('promise', (var.get('promise').get('_w') or var.get('promise')))
            try:
                if PyJsStrictEq(var.get('promise'),var.get('value')):
                    PyJsTempException = JsToPyException(var.get('TypeError')(Js("Promise can't be resolved itself")))
                    raise PyJsTempException
                if var.put('then', var.get('isThenable')(var.get('value'))):
                    @Js
                    def PyJs_anonymous_671_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['wrapper'])
                        var.put('wrapper', Js({'_w':var.get('promise'),'_d':Js(False)}))
                        try:
                            var.get('then').callprop('call', var.get('value'), var.get('ctx')(var.get('$resolve'), var.get('wrapper'), Js(1.0)), var.get('ctx')(var.get('$reject'), var.get('wrapper'), Js(1.0)))
                        except PyJsException as PyJsTempException:
                            PyJsHolder_65_92758233 = var.own.get('e')
                            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                            try:
                                var.get('$reject').callprop('call', var.get('wrapper'), var.get('e'))
                            finally:
                                if PyJsHolder_65_92758233 is not None:
                                    var.own['e'] = PyJsHolder_65_92758233
                                else:
                                    del var.own['e']
                                del PyJsHolder_65_92758233
                    PyJs_anonymous_671_._set_name('anonymous')
                    var.get('microtask')(PyJs_anonymous_671_)
                else:
                    var.get('promise').put('_v', var.get('value'))
                    var.get('promise').put('_s', Js(1.0))
                    var.get('notify')(var.get('promise'), Js(False))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_57441136 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    var.get('$reject').callprop('call', Js({'_w':var.get('promise'),'_d':Js(False)}), var.get('e'))
                finally:
                    if PyJsHolder_65_57441136 is not None:
                        var.own['e'] = PyJsHolder_65_57441136
                    else:
                        del var.own['e']
                    del PyJsHolder_65_57441136
        PyJs_InlineNonPyName_670_._set_name('$resolve')
        var.put('$resolve', PyJs_InlineNonPyName_670_)
        if var.get('USE_NATIVE').neg():
            @Js
            def PyJs_Promise_672_(executor, this, arguments, var=var):
                var = Scope({'executor':executor, 'this':this, 'arguments':arguments, 'Promise':PyJs_Promise_672_}, var)
                var.registers(['executor'])
                var.get('anInstance')(var.get(u"this"), var.get('$Promise'), var.get('PROMISE'), Js('_h'))
                var.get('aFunction')(var.get('executor'))
                var.get('Internal').callprop('call', var.get(u"this"))
                try:
                    var.get('executor')(var.get('ctx')(var.get('$resolve'), var.get(u"this"), Js(1.0)), var.get('ctx')(var.get('$reject'), var.get(u"this"), Js(1.0)))
                except PyJsException as PyJsTempException:
                    PyJsHolder_657272_66648054 = var.own.get('err')
                    var.force_own_put('err', PyExceptionToJs(PyJsTempException))
                    try:
                        var.get('$reject').callprop('call', var.get(u"this"), var.get('err'))
                    finally:
                        if PyJsHolder_657272_66648054 is not None:
                            var.own['err'] = PyJsHolder_657272_66648054
                        else:
                            del var.own['err']
                        del PyJsHolder_657272_66648054
            PyJs_Promise_672_._set_name('Promise')
            var.put('$Promise', PyJs_Promise_672_)
            @Js
            def PyJs_Promise_673_(executor, this, arguments, var=var):
                var = Scope({'executor':executor, 'this':this, 'arguments':arguments, 'Promise':PyJs_Promise_673_}, var)
                var.registers(['executor'])
                var.get(u"this").put('_c', Js([]))
                var.get(u"this").put('_a', var.get('undefined'))
                var.get(u"this").put('_s', Js(0.0))
                var.get(u"this").put('_d', Js(False))
                var.get(u"this").put('_v', var.get('undefined'))
                var.get(u"this").put('_h', Js(0.0))
                var.get(u"this").put('_n', Js(False))
            PyJs_Promise_673_._set_name('Promise')
            var.put('Internal', PyJs_Promise_673_)
            @Js
            def PyJs_then_674_(onFulfilled, onRejected, this, arguments, var=var):
                var = Scope({'onFulfilled':onFulfilled, 'onRejected':onRejected, 'this':this, 'arguments':arguments, 'then':PyJs_then_674_}, var)
                var.registers(['onFulfilled', 'reaction', 'onRejected'])
                var.put('reaction', var.get('newPromiseCapability')(var.get('speciesConstructor')(var.get(u"this"), var.get('$Promise'))))
                var.get('reaction').put('ok', (var.get('onFulfilled') if (var.get('onFulfilled',throw=False).typeof()==Js('function')) else Js(True)))
                var.get('reaction').put('fail', ((var.get('onRejected',throw=False).typeof()==Js('function')) and var.get('onRejected')))
                var.get('reaction').put('domain', (var.get('process').get('domain') if var.get('isNode') else var.get('undefined')))
                var.get(u"this").get('_c').callprop('push', var.get('reaction'))
                if var.get(u"this").get('_a'):
                    var.get(u"this").get('_a').callprop('push', var.get('reaction'))
                if var.get(u"this").get('_s'):
                    var.get('notify')(var.get(u"this"), Js(False))
                return var.get('reaction').get('promise')
            PyJs_then_674_._set_name('then')
            @Js
            def PyJs__catch_675_(onRejected, this, arguments, var=var):
                var = Scope({'onRejected':onRejected, 'this':this, 'arguments':arguments, '_catch':PyJs__catch_675_}, var)
                var.registers(['onRejected'])
                return var.get(u"this").callprop('then', var.get('undefined'), var.get('onRejected'))
            PyJs__catch_675_._set_name('_catch')
            var.get('Internal').put('prototype', var.get('require')(Js('./_redefine-all'))(var.get('$Promise').get('prototype'), Js({'then':PyJs_then_674_,'catch':PyJs__catch_675_})))
            @Js
            def PyJs_OwnPromiseCapability_676_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'OwnPromiseCapability':PyJs_OwnPromiseCapability_676_}, var)
                var.registers(['promise'])
                var.put('promise', var.get('Internal').create())
                var.get(u"this").put('promise', var.get('promise'))
                var.get(u"this").put('resolve', var.get('ctx')(var.get('$resolve'), var.get('promise'), Js(1.0)))
                var.get(u"this").put('reject', var.get('ctx')(var.get('$reject'), var.get('promise'), Js(1.0)))
            PyJs_OwnPromiseCapability_676_._set_name('OwnPromiseCapability')
            var.put('OwnPromiseCapability', PyJs_OwnPromiseCapability_676_)
            @Js
            def PyJs_newPromiseCapability_677_(C, this, arguments, var=var):
                var = Scope({'C':C, 'this':this, 'arguments':arguments, 'newPromiseCapability':PyJs_newPromiseCapability_677_}, var)
                var.registers(['C'])
                return (var.get('OwnPromiseCapability').create(var.get('C')) if (PyJsStrictEq(var.get('C'),var.get('$Promise')) or PyJsStrictEq(var.get('C'),var.get('Wrapper'))) else var.get('newGenericPromiseCapability')(var.get('C')))
            PyJs_newPromiseCapability_677_._set_name('newPromiseCapability')
            var.get('newPromiseCapabilityModule').put('f', var.put('newPromiseCapability', PyJs_newPromiseCapability_677_))
        var.get('$export')(((var.get('$export').get('G')+var.get('$export').get('W'))+(var.get('$export').get('F')*var.get('USE_NATIVE').neg())), Js({'Promise':var.get('$Promise')}))
        var.get('require')(Js('./_set-to-string-tag'))(var.get('$Promise'), var.get('PROMISE'))
        var.get('require')(Js('./_set-species'))(var.get('PROMISE'))
        var.put('Wrapper', var.get('require')(Js('./_core')).get(var.get('PROMISE')))
        @Js
        def PyJs_reject_678_(r, this, arguments, var=var):
            var = Scope({'r':r, 'this':this, 'arguments':arguments, 'reject':PyJs_reject_678_}, var)
            var.registers(['capability', '$$reject', 'r'])
            var.put('capability', var.get('newPromiseCapability')(var.get(u"this")))
            var.put('$$reject', var.get('capability').get('reject'))
            var.get('$$reject')(var.get('r'))
            return var.get('capability').get('promise')
        PyJs_reject_678_._set_name('reject')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('USE_NATIVE').neg())), var.get('PROMISE'), Js({'reject':PyJs_reject_678_}))
        @Js
        def PyJs_resolve_679_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'resolve':PyJs_resolve_679_}, var)
            var.registers(['x'])
            return var.get('promiseResolve')((var.get('$Promise') if (var.get('LIBRARY') and PyJsStrictEq(var.get(u"this"),var.get('Wrapper'))) else var.get(u"this")), var.get('x'))
        PyJs_resolve_679_._set_name('resolve')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*(var.get('LIBRARY') or var.get('USE_NATIVE').neg()))), var.get('PROMISE'), Js({'resolve':PyJs_resolve_679_}))
        @Js
        def PyJs_anonymous_680_(iter, this, arguments, var=var):
            var = Scope({'iter':iter, 'this':this, 'arguments':arguments}, var)
            var.registers(['iter'])
            var.get('$Promise').callprop('all', var.get('iter')).callprop('catch', var.get('empty'))
        PyJs_anonymous_680_._set_name('anonymous')
        @Js
        def PyJs_all_681_(iterable, this, arguments, var=var):
            var = Scope({'iterable':iterable, 'this':this, 'arguments':arguments, 'all':PyJs_all_681_}, var)
            var.registers(['capability', 'C', 'resolve', 'result', 'reject', 'iterable'])
            var.put('C', var.get(u"this"))
            var.put('capability', var.get('newPromiseCapability')(var.get('C')))
            var.put('resolve', var.get('capability').get('resolve'))
            var.put('reject', var.get('capability').get('reject'))
            @Js
            def PyJs_anonymous_682_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['index', 'values', 'remaining'])
                var.put('values', Js([]))
                var.put('index', Js(0.0))
                var.put('remaining', Js(1.0))
                @Js
                def PyJs_anonymous_683_(promise, this, arguments, var=var):
                    var = Scope({'promise':promise, 'this':this, 'arguments':arguments}, var)
                    var.registers(['promise', '$index', 'alreadyCalled'])
                    var.put('$index', (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1)))
                    var.put('alreadyCalled', Js(False))
                    var.get('values').callprop('push', var.get('undefined'))
                    (var.put('remaining',Js(var.get('remaining').to_number())+Js(1))-Js(1))
                    @Js
                    def PyJs_anonymous_684_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        if var.get('alreadyCalled'):
                            return var.get('undefined')
                        var.put('alreadyCalled', Js(True))
                        var.get('values').put(var.get('$index'), var.get('value'))
                        (var.put('remaining',Js(var.get('remaining').to_number())-Js(1)) or var.get('resolve')(var.get('values')))
                    PyJs_anonymous_684_._set_name('anonymous')
                    var.get('C').callprop('resolve', var.get('promise')).callprop('then', PyJs_anonymous_684_, var.get('reject'))
                PyJs_anonymous_683_._set_name('anonymous')
                var.get('forOf')(var.get('iterable'), Js(False), PyJs_anonymous_683_)
                (var.put('remaining',Js(var.get('remaining').to_number())-Js(1)) or var.get('resolve')(var.get('values')))
            PyJs_anonymous_682_._set_name('anonymous')
            var.put('result', var.get('perform')(PyJs_anonymous_682_))
            if var.get('result').get('e'):
                var.get('reject')(var.get('result').get('v'))
            return var.get('capability').get('promise')
        PyJs_all_681_._set_name('all')
        @Js
        def PyJs_race_685_(iterable, this, arguments, var=var):
            var = Scope({'iterable':iterable, 'this':this, 'arguments':arguments, 'race':PyJs_race_685_}, var)
            var.registers(['capability', 'C', 'result', 'reject', 'iterable'])
            var.put('C', var.get(u"this"))
            var.put('capability', var.get('newPromiseCapability')(var.get('C')))
            var.put('reject', var.get('capability').get('reject'))
            @Js
            def PyJs_anonymous_686_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                @Js
                def PyJs_anonymous_687_(promise, this, arguments, var=var):
                    var = Scope({'promise':promise, 'this':this, 'arguments':arguments}, var)
                    var.registers(['promise'])
                    var.get('C').callprop('resolve', var.get('promise')).callprop('then', var.get('capability').get('resolve'), var.get('reject'))
                PyJs_anonymous_687_._set_name('anonymous')
                var.get('forOf')(var.get('iterable'), Js(False), PyJs_anonymous_687_)
            PyJs_anonymous_686_._set_name('anonymous')
            var.put('result', var.get('perform')(PyJs_anonymous_686_))
            if var.get('result').get('e'):
                var.get('reject')(var.get('result').get('v'))
            return var.get('capability').get('promise')
        PyJs_race_685_._set_name('race')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*(var.get('USE_NATIVE') and var.get('require')(Js('./_iter-detect'))(PyJs_anonymous_680_)).neg())), var.get('PROMISE'), Js({'all':PyJs_all_681_,'race':PyJs_race_685_}))
    PyJs_anonymous_655_._set_name('anonymous')
    @Js
    def PyJs_anonymous_688_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['aFunction', 'require', 'rApply', '$export', 'exports', 'module', 'fApply', 'anObject'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('rApply', (var.get('require')(Js('./_global')).get('Reflect') or Js({})).get('apply'))
        var.put('fApply', var.get('Function').get('apply'))
        @Js
        def PyJs_anonymous_689_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_anonymous_690_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                pass
            PyJs_anonymous_690_._set_name('anonymous')
            var.get('rApply')(PyJs_anonymous_690_)
        PyJs_anonymous_689_._set_name('anonymous')
        @Js
        def PyJs_apply_691_(target, thisArgument, argumentsList, this, arguments, var=var):
            var = Scope({'target':target, 'thisArgument':thisArgument, 'argumentsList':argumentsList, 'this':this, 'arguments':arguments, 'apply':PyJs_apply_691_}, var)
            var.registers(['target', 'argumentsList', 'thisArgument', 'L', 'T'])
            var.put('T', var.get('aFunction')(var.get('target')))
            var.put('L', var.get('anObject')(var.get('argumentsList')))
            return (var.get('rApply')(var.get('T'), var.get('thisArgument'), var.get('L')) if var.get('rApply') else var.get('fApply').callprop('call', var.get('T'), var.get('thisArgument'), var.get('L')))
        PyJs_apply_691_._set_name('apply')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('require')(Js('./_fails'))(PyJs_anonymous_689_).neg())), Js('Reflect'), Js({'apply':PyJs_apply_691_}))
    PyJs_anonymous_688_._set_name('anonymous')
    @Js
    def PyJs_anonymous_692_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['aFunction', 'require', 'rConstruct', '$export', 'exports', 'bind', 'NEW_TARGET_BUG', 'ARGS_BUG', 'module', 'create', 'fails', 'isObject', 'anObject'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('create', var.get('require')(Js('./_object-create')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('bind', var.get('require')(Js('./_bind')))
        var.put('rConstruct', (var.get('require')(Js('./_global')).get('Reflect') or Js({})).get('construct'))
        @Js
        def PyJs_anonymous_693_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['F'])
            @Js
            def PyJsHoisted_F_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                pass
            PyJsHoisted_F_.func_name = 'F'
            var.put('F', PyJsHoisted_F_)
            pass
            @Js
            def PyJs_anonymous_694_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                pass
            PyJs_anonymous_694_._set_name('anonymous')
            return var.get('rConstruct')(PyJs_anonymous_694_, Js([]), var.get('F')).instanceof(var.get('F')).neg()
        PyJs_anonymous_693_._set_name('anonymous')
        var.put('NEW_TARGET_BUG', var.get('fails')(PyJs_anonymous_693_))
        @Js
        def PyJs_anonymous_695_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_anonymous_696_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                pass
            PyJs_anonymous_696_._set_name('anonymous')
            var.get('rConstruct')(PyJs_anonymous_696_)
        PyJs_anonymous_695_._set_name('anonymous')
        var.put('ARGS_BUG', var.get('fails')(PyJs_anonymous_695_).neg())
        @Js
        def PyJs_construct_697_(Target, args, this, arguments, var=var):
            var = Scope({'Target':Target, 'args':args, 'this':this, 'arguments':arguments, 'construct':PyJs_construct_697_}, var)
            var.registers(['proto', 'newTarget', 'args', 'result', 'Target', '$args', 'instance'])
            var.get('aFunction')(var.get('Target'))
            var.get('anObject')(var.get('args'))
            var.put('newTarget', (var.get('Target') if (var.get('arguments').get('length')<Js(3.0)) else var.get('aFunction')(var.get('arguments').get('2'))))
            if (var.get('ARGS_BUG') and var.get('NEW_TARGET_BUG').neg()):
                return var.get('rConstruct')(var.get('Target'), var.get('args'), var.get('newTarget'))
            if (var.get('Target')==var.get('newTarget')):
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get('args').get('length'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js(0.0)):
                        SWITCHED = True
                        return var.get('Target').create()
                    if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                        SWITCHED = True
                        return var.get('Target').create(var.get('args').get('0'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                        SWITCHED = True
                        return var.get('Target').create(var.get('args').get('0'), var.get('args').get('1'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                        SWITCHED = True
                        return var.get('Target').create(var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js(4.0)):
                        SWITCHED = True
                        return var.get('Target').create(var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2'), var.get('args').get('3'))
                    SWITCHED = True
                    break
                var.put('$args', Js([var.get(u"null")]))
                var.get('$args').get('push').callprop('apply', var.get('$args'), var.get('args'))
                return var.get('bind').callprop('apply', var.get('Target'), var.get('$args')).create()
            var.put('proto', var.get('newTarget').get('prototype'))
            var.put('instance', var.get('create')((var.get('proto') if var.get('isObject')(var.get('proto')) else var.get('Object').get('prototype'))))
            var.put('result', var.get('Function').get('apply').callprop('call', var.get('Target'), var.get('instance'), var.get('args')))
            return (var.get('result') if var.get('isObject')(var.get('result')) else var.get('instance'))
        PyJs_construct_697_._set_name('construct')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*(var.get('NEW_TARGET_BUG') or var.get('ARGS_BUG')))), Js('Reflect'), Js({'construct':PyJs_construct_697_}))
    PyJs_anonymous_692_._set_name('anonymous')
    @Js
    def PyJs_anonymous_698_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toPrimitive', '$export', 'exports', 'module', 'dP', 'anObject'])
        var.put('dP', var.get('require')(Js('./_object-dp')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
        @Js
        def PyJs_anonymous_699_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('Reflect').callprop('defineProperty', var.get('dP').callprop('f', Js({}), Js(1.0), Js({'value':Js(1.0)})), Js(1.0), Js({'value':Js(2.0)}))
        PyJs_anonymous_699_._set_name('anonymous')
        @Js
        def PyJs_defineProperty_700_(target, propertyKey, attributes, this, arguments, var=var):
            var = Scope({'target':target, 'propertyKey':propertyKey, 'attributes':attributes, 'this':this, 'arguments':arguments, 'defineProperty':PyJs_defineProperty_700_}, var)
            var.registers(['target', 'propertyKey', 'attributes'])
            var.get('anObject')(var.get('target'))
            var.put('propertyKey', var.get('toPrimitive')(var.get('propertyKey'), Js(True)))
            var.get('anObject')(var.get('attributes'))
            try:
                var.get('dP').callprop('f', var.get('target'), var.get('propertyKey'), var.get('attributes'))
                return Js(True)
            except PyJsException as PyJsTempException:
                PyJsHolder_65_7455267 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    return Js(False)
                finally:
                    if PyJsHolder_65_7455267 is not None:
                        var.own['e'] = PyJsHolder_65_7455267
                    else:
                        del var.own['e']
                    del PyJsHolder_65_7455267
        PyJs_defineProperty_700_._set_name('defineProperty')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('require')(Js('./_fails'))(PyJs_anonymous_699_))), Js('Reflect'), Js({'defineProperty':PyJs_defineProperty_700_}))
    PyJs_anonymous_698_._set_name('anonymous')
    @Js
    def PyJs_anonymous_701_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'gOPD', '$export', 'exports', 'module', 'anObject'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('gOPD', var.get('require')(Js('./_object-gopd')).get('f'))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        @Js
        def PyJs_deleteProperty_702_(target, propertyKey, this, arguments, var=var):
            var = Scope({'target':target, 'propertyKey':propertyKey, 'this':this, 'arguments':arguments, 'deleteProperty':PyJs_deleteProperty_702_}, var)
            var.registers(['target', 'desc', 'propertyKey'])
            var.put('desc', var.get('gOPD')(var.get('anObject')(var.get('target')), var.get('propertyKey')))
            return (Js(False) if (var.get('desc') and var.get('desc').get('configurable').neg()) else var.get('target').delete(var.get('propertyKey')))
        PyJs_deleteProperty_702_._set_name('deleteProperty')
        var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'deleteProperty':PyJs_deleteProperty_702_}))
    PyJs_anonymous_701_._set_name('anonymous')
    @Js
    def PyJs_anonymous_703_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$export', 'exports', 'module', 'Enumerate', 'anObject'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        @Js
        def PyJs_Enumerate_704_(iterated, this, arguments, var=var):
            var = Scope({'iterated':iterated, 'this':this, 'arguments':arguments, 'Enumerate':PyJs_Enumerate_704_}, var)
            var.registers(['iterated', 'key', 'keys'])
            var.get(u"this").put('_t', var.get('anObject')(var.get('iterated')))
            var.get(u"this").put('_i', Js(0.0))
            var.put('keys', var.get(u"this").put('_k', Js([])))
            pass
            for PyJsTemp in var.get('iterated'):
                var.put('key', PyJsTemp)
                var.get('keys').callprop('push', var.get('key'))
        PyJs_Enumerate_704_._set_name('Enumerate')
        var.put('Enumerate', PyJs_Enumerate_704_)
        @Js
        def PyJs_anonymous_705_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['that', 'key', 'keys'])
            var.put('that', var.get(u"this"))
            var.put('keys', var.get('that').get('_k'))
            pass
            while 1:
                if (var.get('that').get('_i')>=var.get('keys').get('length')):
                    return Js({'value':var.get('undefined'),'done':Js(True)})
                if not var.get('that').get('_t').contains(var.put('key', var.get('keys').get((var.get('that').put('_i',Js(var.get('that').get('_i').to_number())+Js(1))-Js(1))))).neg():
                    break
            return Js({'value':var.get('key'),'done':Js(False)})
        PyJs_anonymous_705_._set_name('anonymous')
        var.get('require')(Js('./_iter-create'))(var.get('Enumerate'), Js('Object'), PyJs_anonymous_705_)
        @Js
        def PyJs_enumerate_706_(target, this, arguments, var=var):
            var = Scope({'target':target, 'this':this, 'arguments':arguments, 'enumerate':PyJs_enumerate_706_}, var)
            var.registers(['target'])
            return var.get('Enumerate').create(var.get('target'))
        PyJs_enumerate_706_._set_name('enumerate')
        var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'enumerate':PyJs_enumerate_706_}))
    PyJs_anonymous_703_._set_name('anonymous')
    @Js
    def PyJs_anonymous_707_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'gOPD', '$export', 'exports', 'module', 'anObject'])
        var.put('gOPD', var.get('require')(Js('./_object-gopd')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        @Js
        def PyJs_getOwnPropertyDescriptor_708_(target, propertyKey, this, arguments, var=var):
            var = Scope({'target':target, 'propertyKey':propertyKey, 'this':this, 'arguments':arguments, 'getOwnPropertyDescriptor':PyJs_getOwnPropertyDescriptor_708_}, var)
            var.registers(['target', 'propertyKey'])
            return var.get('gOPD').callprop('f', var.get('anObject')(var.get('target')), var.get('propertyKey'))
        PyJs_getOwnPropertyDescriptor_708_._set_name('getOwnPropertyDescriptor')
        var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'getOwnPropertyDescriptor':PyJs_getOwnPropertyDescriptor_708_}))
    PyJs_anonymous_707_._set_name('anonymous')
    @Js
    def PyJs_anonymous_709_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$export', 'exports', 'module', 'getProto', 'anObject'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('getProto', var.get('require')(Js('./_object-gpo')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        @Js
        def PyJs_getPrototypeOf_710_(target, this, arguments, var=var):
            var = Scope({'target':target, 'this':this, 'arguments':arguments, 'getPrototypeOf':PyJs_getPrototypeOf_710_}, var)
            var.registers(['target'])
            return var.get('getProto')(var.get('anObject')(var.get('target')))
        PyJs_getPrototypeOf_710_._set_name('getPrototypeOf')
        var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'getPrototypeOf':PyJs_getPrototypeOf_710_}))
    PyJs_anonymous_709_._set_name('anonymous')
    @Js
    def PyJs_anonymous_711_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'get', 'gOPD', '$export', 'exports', 'module', 'getPrototypeOf', 'anObject', 'isObject', 'has'])
        @Js
        def PyJsHoisted_get_(target, propertyKey, this, arguments, var=var):
            var = Scope({'target':target, 'propertyKey':propertyKey, 'this':this, 'arguments':arguments}, var)
            var.registers(['target', 'proto', 'desc', 'propertyKey', 'receiver'])
            var.put('receiver', (var.get('target') if (var.get('arguments').get('length')<Js(3.0)) else var.get('arguments').get('2')))
            pass
            if PyJsStrictEq(var.get('anObject')(var.get('target')),var.get('receiver')):
                return var.get('target').get(var.get('propertyKey'))
            if var.put('desc', var.get('gOPD').callprop('f', var.get('target'), var.get('propertyKey'))):
                return (var.get('desc').get('value') if var.get('has')(var.get('desc'), Js('value')) else (var.get('desc').get('get').callprop('call', var.get('receiver')) if PyJsStrictNeq(var.get('desc').get('get'),var.get('undefined')) else var.get('undefined')))
            if var.get('isObject')(var.put('proto', var.get('getPrototypeOf')(var.get('target')))):
                return var.get('get')(var.get('proto'), var.get('propertyKey'), var.get('receiver'))
        PyJsHoisted_get_.func_name = 'get'
        var.put('get', PyJsHoisted_get_)
        var.put('gOPD', var.get('require')(Js('./_object-gopd')))
        var.put('getPrototypeOf', var.get('require')(Js('./_object-gpo')))
        var.put('has', var.get('require')(Js('./_has')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        pass
        var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'get':var.get('get')}))
    PyJs_anonymous_711_._set_name('anonymous')
    @Js
    def PyJs_anonymous_712_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_has_713_(target, propertyKey, this, arguments, var=var):
            var = Scope({'target':target, 'propertyKey':propertyKey, 'this':this, 'arguments':arguments, 'has':PyJs_has_713_}, var)
            var.registers(['target', 'propertyKey'])
            return var.get('target').contains(var.get('propertyKey'))
        PyJs_has_713_._set_name('has')
        var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'has':PyJs_has_713_}))
    PyJs_anonymous_712_._set_name('anonymous')
    @Js
    def PyJs_anonymous_714_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$isExtensible', '$export', 'exports', 'module', 'anObject'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('$isExtensible', var.get('Object').get('isExtensible'))
        @Js
        def PyJs_isExtensible_715_(target, this, arguments, var=var):
            var = Scope({'target':target, 'this':this, 'arguments':arguments, 'isExtensible':PyJs_isExtensible_715_}, var)
            var.registers(['target'])
            var.get('anObject')(var.get('target'))
            return (var.get('$isExtensible')(var.get('target')) if var.get('$isExtensible') else Js(True))
        PyJs_isExtensible_715_._set_name('isExtensible')
        var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'isExtensible':PyJs_isExtensible_715_}))
    PyJs_anonymous_714_._set_name('anonymous')
    @Js
    def PyJs_anonymous_716_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'ownKeys':var.get('require')(Js('./_own-keys'))}))
    PyJs_anonymous_716_._set_name('anonymous')
    @Js
    def PyJs_anonymous_717_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$preventExtensions', 'require', '$export', 'exports', 'module', 'anObject'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('$preventExtensions', var.get('Object').get('preventExtensions'))
        @Js
        def PyJs_preventExtensions_718_(target, this, arguments, var=var):
            var = Scope({'target':target, 'this':this, 'arguments':arguments, 'preventExtensions':PyJs_preventExtensions_718_}, var)
            var.registers(['target'])
            var.get('anObject')(var.get('target'))
            try:
                if var.get('$preventExtensions'):
                    var.get('$preventExtensions')(var.get('target'))
                return Js(True)
            except PyJsException as PyJsTempException:
                PyJsHolder_65_57051869 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    return Js(False)
                finally:
                    if PyJsHolder_65_57051869 is not None:
                        var.own['e'] = PyJsHolder_65_57051869
                    else:
                        del var.own['e']
                    del PyJsHolder_65_57051869
        PyJs_preventExtensions_718_._set_name('preventExtensions')
        var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'preventExtensions':PyJs_preventExtensions_718_}))
    PyJs_anonymous_717_._set_name('anonymous')
    @Js
    def PyJs_anonymous_719_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$export', 'exports', 'module', 'setProto'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('setProto', var.get('require')(Js('./_set-proto')))
        if var.get('setProto'):
            @Js
            def PyJs_setPrototypeOf_720_(target, proto, this, arguments, var=var):
                var = Scope({'target':target, 'proto':proto, 'this':this, 'arguments':arguments, 'setPrototypeOf':PyJs_setPrototypeOf_720_}, var)
                var.registers(['target', 'proto'])
                var.get('setProto').callprop('check', var.get('target'), var.get('proto'))
                try:
                    var.get('setProto').callprop('set', var.get('target'), var.get('proto'))
                    return Js(True)
                except PyJsException as PyJsTempException:
                    PyJsHolder_65_18416524 = var.own.get('e')
                    var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                    try:
                        return Js(False)
                    finally:
                        if PyJsHolder_65_18416524 is not None:
                            var.own['e'] = PyJsHolder_65_18416524
                        else:
                            del var.own['e']
                        del PyJsHolder_65_18416524
            PyJs_setPrototypeOf_720_._set_name('setPrototypeOf')
            var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'setPrototypeOf':PyJs_setPrototypeOf_720_}))
    PyJs_anonymous_719_._set_name('anonymous')
    @Js
    def PyJs_anonymous_721_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'gOPD', '$export', 'exports', 'module', 'isObject', 'getPrototypeOf', 'anObject', 'set', 'createDesc', 'dP', 'has'])
        @Js
        def PyJsHoisted_set_(target, propertyKey, V, this, arguments, var=var):
            var = Scope({'target':target, 'propertyKey':propertyKey, 'V':V, 'this':this, 'arguments':arguments}, var)
            var.registers(['target', 'proto', 'propertyKey', 'V', 'receiver', 'existingDescriptor', 'ownDesc'])
            var.put('receiver', (var.get('target') if (var.get('arguments').get('length')<Js(4.0)) else var.get('arguments').get('3')))
            var.put('ownDesc', var.get('gOPD').callprop('f', var.get('anObject')(var.get('target')), var.get('propertyKey')))
            pass
            if var.get('ownDesc').neg():
                if var.get('isObject')(var.put('proto', var.get('getPrototypeOf')(var.get('target')))):
                    return var.get('set')(var.get('proto'), var.get('propertyKey'), var.get('V'), var.get('receiver'))
                var.put('ownDesc', var.get('createDesc')(Js(0.0)))
            if var.get('has')(var.get('ownDesc'), Js('value')):
                if (PyJsStrictEq(var.get('ownDesc').get('writable'),Js(False)) or var.get('isObject')(var.get('receiver')).neg()):
                    return Js(False)
                if var.put('existingDescriptor', var.get('gOPD').callprop('f', var.get('receiver'), var.get('propertyKey'))):
                    if ((var.get('existingDescriptor').get('get') or var.get('existingDescriptor').get('set')) or PyJsStrictEq(var.get('existingDescriptor').get('writable'),Js(False))):
                        return Js(False)
                    var.get('existingDescriptor').put('value', var.get('V'))
                    var.get('dP').callprop('f', var.get('receiver'), var.get('propertyKey'), var.get('existingDescriptor'))
                else:
                    var.get('dP').callprop('f', var.get('receiver'), var.get('propertyKey'), var.get('createDesc')(Js(0.0), var.get('V')))
                return Js(True)
            return (Js(False) if PyJsStrictEq(var.get('ownDesc').get('set'),var.get('undefined')) else PyJsComma(var.get('ownDesc').get('set').callprop('call', var.get('receiver'), var.get('V')),Js(True)))
        PyJsHoisted_set_.func_name = 'set'
        var.put('set', PyJsHoisted_set_)
        var.put('dP', var.get('require')(Js('./_object-dp')))
        var.put('gOPD', var.get('require')(Js('./_object-gopd')))
        var.put('getPrototypeOf', var.get('require')(Js('./_object-gpo')))
        var.put('has', var.get('require')(Js('./_has')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('createDesc', var.get('require')(Js('./_property-desc')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        pass
        var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'set':var.get('set')}))
    PyJs_anonymous_721_._set_name('anonymous')
    @Js
    def PyJs_anonymous_722_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'CORRECT_NEW', 'isRegExp', '$RegExp', 'proto', 're1', 'proxy', 'gOPN', 'i', 'exports', 'module', 'Base', 'inheritIfRequired', 're2', 'global', 'dP', '$flags', 'keys'])
        var.put('global', var.get('require')(Js('./_global')))
        var.put('inheritIfRequired', var.get('require')(Js('./_inherit-if-required')))
        var.put('dP', var.get('require')(Js('./_object-dp')).get('f'))
        var.put('gOPN', var.get('require')(Js('./_object-gopn')).get('f'))
        var.put('isRegExp', var.get('require')(Js('./_is-regexp')))
        var.put('$flags', var.get('require')(Js('./_flags')))
        var.put('$RegExp', var.get('global').get('RegExp'))
        var.put('Base', var.get('$RegExp'))
        var.put('proto', var.get('$RegExp').get('prototype'))
        var.put('re1', JsRegExp('/a/g'))
        var.put('re2', JsRegExp('/a/g'))
        var.put('CORRECT_NEW', PyJsStrictNeq(var.get('$RegExp').create(var.get('re1')),var.get('re1')))
        @Js
        def PyJs_anonymous_723_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('re2').put(var.get('require')(Js('./_wks'))(Js('match')), Js(False))
            return (((var.get('$RegExp')(var.get('re1'))!=var.get('re1')) or (var.get('$RegExp')(var.get('re2'))==var.get('re2'))) or (var.get('$RegExp')(var.get('re1'), Js('i'))!=Js('/a/i')))
        PyJs_anonymous_723_._set_name('anonymous')
        if (var.get('require')(Js('./_descriptors')) and (var.get('CORRECT_NEW').neg() or var.get('require')(Js('./_fails'))(PyJs_anonymous_723_))):
            @Js
            def PyJs_RegExp_724_(p, f, this, arguments, var=var):
                var = Scope({'p':p, 'f':f, 'this':this, 'arguments':arguments, 'RegExp':PyJs_RegExp_724_}, var)
                var.registers(['f', 'tiRE', 'piRE', 'fiU', 'p'])
                var.put('tiRE', var.get(u"this").instanceof(var.get('$RegExp')))
                var.put('piRE', var.get('isRegExp')(var.get('p')))
                var.put('fiU', PyJsStrictEq(var.get('f'),var.get('undefined')))
                def PyJs_LONG_725_(var=var):
                    return (var.get('Base').create((var.get('p').get('source') if (var.get('piRE') and var.get('fiU').neg()) else var.get('p')), var.get('f')) if var.get('CORRECT_NEW') else var.get('Base')((var.get('p').get('source') if var.put('piRE', var.get('p').instanceof(var.get('$RegExp'))) else var.get('p')), (var.get('$flags').callprop('call', var.get('p')) if (var.get('piRE') and var.get('fiU')) else var.get('f'))))
                return (var.get('p') if (((var.get('tiRE').neg() and var.get('piRE')) and PyJsStrictEq(var.get('p').get('constructor'),var.get('$RegExp'))) and var.get('fiU')) else var.get('inheritIfRequired')(PyJs_LONG_725_(), (var.get(u"this") if var.get('tiRE') else var.get('proto')), var.get('$RegExp')))
            PyJs_RegExp_724_._set_name('RegExp')
            var.put('$RegExp', PyJs_RegExp_724_)
            @Js
            def PyJs_proxy_726_(key, this, arguments, var=var):
                var = Scope({'key':key, 'this':this, 'arguments':arguments, 'proxy':PyJs_proxy_726_}, var)
                var.registers(['key'])
                @Js
                def PyJs_get_727_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_727_}, var)
                    var.registers([])
                    return var.get('Base').get(var.get('key'))
                PyJs_get_727_._set_name('get')
                @Js
                def PyJs_set_728_(it, this, arguments, var=var):
                    var = Scope({'it':it, 'this':this, 'arguments':arguments, 'set':PyJs_set_728_}, var)
                    var.registers(['it'])
                    var.get('Base').put(var.get('key'), var.get('it'))
                PyJs_set_728_._set_name('set')
                (var.get('$RegExp').contains(var.get('key')) or var.get('dP')(var.get('$RegExp'), var.get('key'), Js({'configurable':Js(True),'get':PyJs_get_727_,'set':PyJs_set_728_})))
            PyJs_proxy_726_._set_name('proxy')
            var.put('proxy', PyJs_proxy_726_)
            #for JS loop
            var.put('keys', var.get('gOPN')(var.get('Base')))
            var.put('i', Js(0.0))
            while (var.get('keys').get('length')>var.get('i')):
                var.get('proxy')(var.get('keys').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
            
            var.get('proto').put('constructor', var.get('$RegExp'))
            var.get('$RegExp').put('prototype', var.get('proto'))
            var.get('require')(Js('./_redefine'))(var.get('global'), Js('RegExp'), var.get('$RegExp'))
        var.get('require')(Js('./_set-species'))(Js('RegExp'))
    PyJs_anonymous_722_._set_name('anonymous')
    @Js
    def PyJs_anonymous_729_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'regexpExec', 'module', 'exports'])
        Js('use strict')
        var.put('regexpExec', var.get('require')(Js('./_regexp-exec')))
        var.get('require')(Js('./_export'))(Js({'target':Js('RegExp'),'proto':Js(True),'forced':PyJsStrictNeq(var.get('regexpExec'),JsRegExp('/./').get('exec'))}), Js({'exec':var.get('regexpExec')}))
    PyJs_anonymous_729_._set_name('anonymous')
    @Js
    def PyJs_anonymous_730_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        if (var.get('require')(Js('./_descriptors')) and (JsRegExp('/./g').get('flags')!=Js('g'))):
            var.get('require')(Js('./_object-dp')).callprop('f', var.get('RegExp').get('prototype'), Js('flags'), Js({'configurable':Js(True),'get':var.get('require')(Js('./_flags'))}))
    PyJs_anonymous_730_._set_name('anonymous')
    @Js
    def PyJs_anonymous_731_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toLength', 'exports', 'advanceStringIndex', 'module', 'regExpExec', 'anObject'])
        Js('use strict')
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('advanceStringIndex', var.get('require')(Js('./_advance-string-index')))
        var.put('regExpExec', var.get('require')(Js('./_regexp-exec-abstract')))
        @Js
        def PyJs_anonymous_732_(defined, MATCH, PyJsArg_246d61746368_, maybeCallNative, this, arguments, var=var):
            var = Scope({'defined':defined, 'MATCH':MATCH, '$match':PyJsArg_246d61746368_, 'maybeCallNative':maybeCallNative, 'this':this, 'arguments':arguments}, var)
            var.registers(['defined', 'MATCH', '$match', 'maybeCallNative'])
            @Js
            def PyJs_match_733_(regexp, this, arguments, var=var):
                var = Scope({'regexp':regexp, 'this':this, 'arguments':arguments, 'match':PyJs_match_733_}, var)
                var.registers(['O', 'fn', 'regexp'])
                var.put('O', var.get('defined')(var.get(u"this")))
                var.put('fn', (var.get('undefined') if (var.get('regexp')==var.get('undefined')) else var.get('regexp').get(var.get('MATCH'))))
                return (var.get('fn').callprop('call', var.get('regexp'), var.get('O')) if PyJsStrictNeq(var.get('fn'),var.get('undefined')) else var.get('RegExp').create(var.get('regexp')).callprop(var.get('MATCH'), var.get('String')(var.get('O'))))
            PyJs_match_733_._set_name('match')
            @Js
            def PyJs_anonymous_734_(regexp, this, arguments, var=var):
                var = Scope({'regexp':regexp, 'this':this, 'arguments':arguments}, var)
                var.registers(['matchStr', 'n', 'regexp', 'A', 'fullUnicode', 'res', 'result', 'S', 'rx'])
                var.put('res', var.get('maybeCallNative')(var.get('$match'), var.get('regexp'), var.get(u"this")))
                if var.get('res').get('done'):
                    return var.get('res').get('value')
                var.put('rx', var.get('anObject')(var.get('regexp')))
                var.put('S', var.get('String')(var.get(u"this")))
                if var.get('rx').get('global').neg():
                    return var.get('regExpExec')(var.get('rx'), var.get('S'))
                var.put('fullUnicode', var.get('rx').get('unicode'))
                var.get('rx').put('lastIndex', Js(0.0))
                var.put('A', Js([]))
                var.put('n', Js(0.0))
                pass
                while PyJsStrictNeq(var.put('result', var.get('regExpExec')(var.get('rx'), var.get('S'))),var.get(u"null")):
                    var.put('matchStr', var.get('String')(var.get('result').get('0')))
                    var.get('A').put(var.get('n'), var.get('matchStr'))
                    if PyJsStrictEq(var.get('matchStr'),Js('')):
                        var.get('rx').put('lastIndex', var.get('advanceStringIndex')(var.get('S'), var.get('toLength')(var.get('rx').get('lastIndex')), var.get('fullUnicode')))
                    (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))
                return (var.get(u"null") if PyJsStrictEq(var.get('n'),Js(0.0)) else var.get('A'))
            PyJs_anonymous_734_._set_name('anonymous')
            return Js([PyJs_match_733_, PyJs_anonymous_734_])
        PyJs_anonymous_732_._set_name('anonymous')
        var.get('require')(Js('./_fix-re-wks'))(Js('match'), Js(1.0), PyJs_anonymous_732_)
    PyJs_anonymous_731_._set_name('anonymous')
    @Js
    def PyJs_anonymous_735_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toLength', 'floor', 'max', 'min', 'toObject', 'exports', 'advanceStringIndex', 'module', 'SUBSTITUTION_SYMBOLS_NO_NAMED', 'SUBSTITUTION_SYMBOLS', 'regExpExec', 'toInteger', 'anObject', 'maybeToString'])
        Js('use strict')
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('advanceStringIndex', var.get('require')(Js('./_advance-string-index')))
        var.put('regExpExec', var.get('require')(Js('./_regexp-exec-abstract')))
        var.put('max', var.get('Math').get('max'))
        var.put('min', var.get('Math').get('min'))
        var.put('floor', var.get('Math').get('floor'))
        var.put('SUBSTITUTION_SYMBOLS', JsRegExp("/\\$([$&`']|\\d\\d?|<[^>]*>)/g"))
        var.put('SUBSTITUTION_SYMBOLS_NO_NAMED', JsRegExp("/\\$([$&`']|\\d\\d?)/g"))
        @Js
        def PyJs_maybeToString_736_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'maybeToString':PyJs_maybeToString_736_}, var)
            var.registers(['it'])
            return (var.get('it') if PyJsStrictEq(var.get('it'),var.get('undefined')) else var.get('String')(var.get('it')))
        PyJs_maybeToString_736_._set_name('maybeToString')
        var.put('maybeToString', PyJs_maybeToString_736_)
        @Js
        def PyJs_anonymous_737_(defined, REPLACE, PyJsArg_247265706c616365_, maybeCallNative, this, arguments, var=var):
            var = Scope({'defined':defined, 'REPLACE':REPLACE, '$replace':PyJsArg_247265706c616365_, 'maybeCallNative':maybeCallNative, 'this':this, 'arguments':arguments}, var)
            var.registers(['defined', '$replace', 'maybeCallNative', 'getSubstitution', 'REPLACE'])
            @Js
            def PyJsHoisted_getSubstitution_(matched, str, position, captures, namedCaptures, replacement, this, arguments, var=var):
                var = Scope({'matched':matched, 'str':str, 'position':position, 'captures':captures, 'namedCaptures':namedCaptures, 'replacement':replacement, 'this':this, 'arguments':arguments}, var)
                var.registers(['symbols', 'tailPos', 'str', 'position', 'captures', 'namedCaptures', 'matched', 'm', 'replacement'])
                var.put('tailPos', (var.get('position')+var.get('matched').get('length')))
                var.put('m', var.get('captures').get('length'))
                var.put('symbols', var.get('SUBSTITUTION_SYMBOLS_NO_NAMED'))
                if PyJsStrictNeq(var.get('namedCaptures'),var.get('undefined')):
                    var.put('namedCaptures', var.get('toObject')(var.get('namedCaptures')))
                    var.put('symbols', var.get('SUBSTITUTION_SYMBOLS'))
                @Js
                def PyJs_anonymous_740_(match, ch, this, arguments, var=var):
                    var = Scope({'match':match, 'ch':ch, 'this':this, 'arguments':arguments}, var)
                    var.registers(['ch', 'f', 'n', 'match', 'capture'])
                    pass
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get('ch').callprop('charAt', Js(0.0)))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('$')):
                            SWITCHED = True
                            return Js('$')
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('&')):
                            SWITCHED = True
                            return var.get('matched')
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('`')):
                            SWITCHED = True
                            return var.get('str').callprop('slice', Js(0.0), var.get('position'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js("'")):
                            SWITCHED = True
                            return var.get('str').callprop('slice', var.get('tailPos'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('<')):
                            SWITCHED = True
                            var.put('capture', var.get('namedCaptures').get(var.get('ch').callprop('slice', Js(1.0), (-Js(1.0)))))
                            break
                        if True:
                            SWITCHED = True
                            var.put('n', (+var.get('ch')))
                            if PyJsStrictEq(var.get('n'),Js(0.0)):
                                return var.get('match')
                            if (var.get('n')>var.get('m')):
                                var.put('f', var.get('floor')((var.get('n')/Js(10.0))))
                                if PyJsStrictEq(var.get('f'),Js(0.0)):
                                    return var.get('match')
                                if (var.get('f')<=var.get('m')):
                                    return (var.get('ch').callprop('charAt', Js(1.0)) if PyJsStrictEq(var.get('captures').get((var.get('f')-Js(1.0))),var.get('undefined')) else (var.get('captures').get((var.get('f')-Js(1.0)))+var.get('ch').callprop('charAt', Js(1.0))))
                                return var.get('match')
                            var.put('capture', var.get('captures').get((var.get('n')-Js(1.0))))
                        SWITCHED = True
                        break
                    return (Js('') if PyJsStrictEq(var.get('capture'),var.get('undefined')) else var.get('capture'))
                PyJs_anonymous_740_._set_name('anonymous')
                return var.get('$replace').callprop('call', var.get('replacement'), var.get('symbols'), PyJs_anonymous_740_)
            PyJsHoisted_getSubstitution_.func_name = 'getSubstitution'
            var.put('getSubstitution', PyJsHoisted_getSubstitution_)
            @Js
            def PyJs_replace_738_(searchValue, replaceValue, this, arguments, var=var):
                var = Scope({'searchValue':searchValue, 'replaceValue':replaceValue, 'this':this, 'arguments':arguments, 'replace':PyJs_replace_738_}, var)
                var.registers(['replaceValue', 'O', 'searchValue', 'fn'])
                var.put('O', var.get('defined')(var.get(u"this")))
                var.put('fn', (var.get('undefined') if (var.get('searchValue')==var.get('undefined')) else var.get('searchValue').get(var.get('REPLACE'))))
                return (var.get('fn').callprop('call', var.get('searchValue'), var.get('O'), var.get('replaceValue')) if PyJsStrictNeq(var.get('fn'),var.get('undefined')) else var.get('$replace').callprop('call', var.get('String')(var.get('O')), var.get('searchValue'), var.get('replaceValue')))
            PyJs_replace_738_._set_name('replace')
            @Js
            def PyJs_anonymous_739_(regexp, replaceValue, this, arguments, var=var):
                var = Scope({'regexp':regexp, 'replaceValue':replaceValue, 'this':this, 'arguments':arguments}, var)
                var.registers(['matchStr', 'regexp', 'i', 'matched', 'functionalReplace', 'result', 'replaceValue', 'S', 'nextSourcePosition', 'results', 'replacerArgs', 'position', 'namedCaptures', 'global', 'accumulatedResult', 'res', 'rx', 'fullUnicode', 'captures', 'j', 'replacement'])
                var.put('res', var.get('maybeCallNative')(var.get('$replace'), var.get('regexp'), var.get(u"this"), var.get('replaceValue')))
                if var.get('res').get('done'):
                    return var.get('res').get('value')
                var.put('rx', var.get('anObject')(var.get('regexp')))
                var.put('S', var.get('String')(var.get(u"this")))
                var.put('functionalReplace', PyJsStrictEq(var.get('replaceValue',throw=False).typeof(),Js('function')))
                if var.get('functionalReplace').neg():
                    var.put('replaceValue', var.get('String')(var.get('replaceValue')))
                var.put('global', var.get('rx').get('global'))
                if var.get('global'):
                    var.put('fullUnicode', var.get('rx').get('unicode'))
                    var.get('rx').put('lastIndex', Js(0.0))
                var.put('results', Js([]))
                while Js(True):
                    var.put('result', var.get('regExpExec')(var.get('rx'), var.get('S')))
                    if PyJsStrictEq(var.get('result'),var.get(u"null")):
                        break
                    var.get('results').callprop('push', var.get('result'))
                    if var.get('global').neg():
                        break
                    var.put('matchStr', var.get('String')(var.get('result').get('0')))
                    if PyJsStrictEq(var.get('matchStr'),Js('')):
                        var.get('rx').put('lastIndex', var.get('advanceStringIndex')(var.get('S'), var.get('toLength')(var.get('rx').get('lastIndex')), var.get('fullUnicode')))
                var.put('accumulatedResult', Js(''))
                var.put('nextSourcePosition', Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('results').get('length')):
                    try:
                        var.put('result', var.get('results').get(var.get('i')))
                        var.put('matched', var.get('String')(var.get('result').get('0')))
                        var.put('position', var.get('max')(var.get('min')(var.get('toInteger')(var.get('result').get('index')), var.get('S').get('length')), Js(0.0)))
                        var.put('captures', Js([]))
                        #for JS loop
                        var.put('j', Js(1.0))
                        while (var.get('j')<var.get('result').get('length')):
                            try:
                                var.get('captures').callprop('push', var.get('maybeToString')(var.get('result').get(var.get('j'))))
                            finally:
                                    (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                        var.put('namedCaptures', var.get('result').get('groups'))
                        if var.get('functionalReplace'):
                            var.put('replacerArgs', Js([var.get('matched')]).callprop('concat', var.get('captures'), var.get('position'), var.get('S')))
                            if PyJsStrictNeq(var.get('namedCaptures'),var.get('undefined')):
                                var.get('replacerArgs').callprop('push', var.get('namedCaptures'))
                            var.put('replacement', var.get('String')(var.get('replaceValue').callprop('apply', var.get('undefined'), var.get('replacerArgs'))))
                        else:
                            var.put('replacement', var.get('getSubstitution')(var.get('matched'), var.get('S'), var.get('position'), var.get('captures'), var.get('namedCaptures'), var.get('replaceValue')))
                        if (var.get('position')>=var.get('nextSourcePosition')):
                            var.put('accumulatedResult', (var.get('S').callprop('slice', var.get('nextSourcePosition'), var.get('position'))+var.get('replacement')), '+')
                            var.put('nextSourcePosition', (var.get('position')+var.get('matched').get('length')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return (var.get('accumulatedResult')+var.get('S').callprop('slice', var.get('nextSourcePosition')))
            PyJs_anonymous_739_._set_name('anonymous')
            return Js([PyJs_replace_738_, PyJs_anonymous_739_])
            pass
        PyJs_anonymous_737_._set_name('anonymous')
        var.get('require')(Js('./_fix-re-wks'))(Js('replace'), Js(2.0), PyJs_anonymous_737_)
    PyJs_anonymous_735_._set_name('anonymous')
    @Js
    def PyJs_anonymous_741_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'exports', 'module', 'sameValue', 'regExpExec', 'anObject'])
        Js('use strict')
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('sameValue', var.get('require')(Js('./_same-value')))
        var.put('regExpExec', var.get('require')(Js('./_regexp-exec-abstract')))
        @Js
        def PyJs_anonymous_742_(defined, SEARCH, PyJsArg_24736561726368_, maybeCallNative, this, arguments, var=var):
            var = Scope({'defined':defined, 'SEARCH':SEARCH, '$search':PyJsArg_24736561726368_, 'maybeCallNative':maybeCallNative, 'this':this, 'arguments':arguments}, var)
            var.registers(['defined', 'SEARCH', 'maybeCallNative', '$search'])
            @Js
            def PyJs_search_743_(regexp, this, arguments, var=var):
                var = Scope({'regexp':regexp, 'this':this, 'arguments':arguments, 'search':PyJs_search_743_}, var)
                var.registers(['O', 'fn', 'regexp'])
                var.put('O', var.get('defined')(var.get(u"this")))
                var.put('fn', (var.get('undefined') if (var.get('regexp')==var.get('undefined')) else var.get('regexp').get(var.get('SEARCH'))))
                return (var.get('fn').callprop('call', var.get('regexp'), var.get('O')) if PyJsStrictNeq(var.get('fn'),var.get('undefined')) else var.get('RegExp').create(var.get('regexp')).callprop(var.get('SEARCH'), var.get('String')(var.get('O'))))
            PyJs_search_743_._set_name('search')
            @Js
            def PyJs_anonymous_744_(regexp, this, arguments, var=var):
                var = Scope({'regexp':regexp, 'this':this, 'arguments':arguments}, var)
                var.registers(['regexp', 'previousLastIndex', 'result', 'res', 'S', 'rx'])
                var.put('res', var.get('maybeCallNative')(var.get('$search'), var.get('regexp'), var.get(u"this")))
                if var.get('res').get('done'):
                    return var.get('res').get('value')
                var.put('rx', var.get('anObject')(var.get('regexp')))
                var.put('S', var.get('String')(var.get(u"this")))
                var.put('previousLastIndex', var.get('rx').get('lastIndex'))
                if var.get('sameValue')(var.get('previousLastIndex'), Js(0.0)).neg():
                    var.get('rx').put('lastIndex', Js(0.0))
                var.put('result', var.get('regExpExec')(var.get('rx'), var.get('S')))
                if var.get('sameValue')(var.get('rx').get('lastIndex'), var.get('previousLastIndex')).neg():
                    var.get('rx').put('lastIndex', var.get('previousLastIndex'))
                return ((-Js(1.0)) if PyJsStrictEq(var.get('result'),var.get(u"null")) else var.get('result').get('index'))
            PyJs_anonymous_744_._set_name('anonymous')
            return Js([PyJs_search_743_, PyJs_anonymous_744_])
        PyJs_anonymous_742_._set_name('anonymous')
        var.get('require')(Js('./_fix-re-wks'))(Js('search'), Js(1.0), PyJs_anonymous_742_)
    PyJs_anonymous_741_._set_name('anonymous')
    @Js
    def PyJs_anonymous_745_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'SUPPORTS_Y', 'toLength', 'isRegExp', 'callRegExpExec', '$min', 'LENGTH', 'MAX_UINT32', '$push', 'exports', 'advanceStringIndex', 'LAST_INDEX', 'speciesConstructor', 'module', '$SPLIT', 'fails', 'regexpExec', 'anObject'])
        Js('use strict')
        var.put('isRegExp', var.get('require')(Js('./_is-regexp')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('speciesConstructor', var.get('require')(Js('./_species-constructor')))
        var.put('advanceStringIndex', var.get('require')(Js('./_advance-string-index')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('callRegExpExec', var.get('require')(Js('./_regexp-exec-abstract')))
        var.put('regexpExec', var.get('require')(Js('./_regexp-exec')))
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('$min', var.get('Math').get('min'))
        var.put('$push', Js([]).get('push'))
        var.put('$SPLIT', Js('split'))
        var.put('LENGTH', Js('length'))
        var.put('LAST_INDEX', Js('lastIndex'))
        var.put('MAX_UINT32', Js(4294967295))
        @Js
        def PyJs_anonymous_746_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('RegExp')(var.get('MAX_UINT32'), Js('y'))
        PyJs_anonymous_746_._set_name('anonymous')
        var.put('SUPPORTS_Y', var.get('fails')(PyJs_anonymous_746_).neg())
        @Js
        def PyJs_anonymous_747_(defined, SPLIT, PyJsArg_2473706c6974_, maybeCallNative, this, arguments, var=var):
            var = Scope({'defined':defined, 'SPLIT':SPLIT, '$split':PyJsArg_2473706c6974_, 'maybeCallNative':maybeCallNative, 'this':this, 'arguments':arguments}, var)
            var.registers(['defined', 'internalSplit', 'SPLIT', 'maybeCallNative', '$split'])
            pass
            def PyJs_LONG_748_(var=var):
                return (((((Js('abbc').callprop(var.get('$SPLIT'), JsRegExp('/(b)*/')).get('1')==Js('c')) or (Js('test').callprop(var.get('$SPLIT'), JsRegExp('/(?:)/'), (-Js(1.0))).get(var.get('LENGTH'))!=Js(4.0))) or (Js('ab').callprop(var.get('$SPLIT'), JsRegExp('/(?:ab)*/')).get(var.get('LENGTH'))!=Js(2.0))) or (Js('.').callprop(var.get('$SPLIT'), JsRegExp('/(.?)(.?)/')).get(var.get('LENGTH'))!=Js(4.0))) or (Js('.').callprop(var.get('$SPLIT'), JsRegExp('/()()/')).get(var.get('LENGTH'))>Js(1.0)))
            if (PyJs_LONG_748_() or Js('').callprop(var.get('$SPLIT'), JsRegExp('/.?/')).get(var.get('LENGTH'))):
                @Js
                def PyJs_internalSplit_749_(separator, limit, this, arguments, var=var):
                    var = Scope({'separator':separator, 'limit':limit, 'this':this, 'arguments':arguments, 'internalSplit':PyJs_internalSplit_749_}, var)
                    var.registers(['string', 'lastLastIndex', 'output', 'splitLimit', 'lastLength', 'separator', 'flags', 'separatorCopy', 'match', 'limit', 'lastIndex'])
                    var.put('string', var.get('String')(var.get(u"this")))
                    if (PyJsStrictEq(var.get('separator'),var.get('undefined')) and PyJsStrictEq(var.get('limit'),Js(0.0))):
                        return Js([])
                    if var.get('isRegExp')(var.get('separator')).neg():
                        return var.get('$split').callprop('call', var.get('string'), var.get('separator'), var.get('limit'))
                    var.put('output', Js([]))
                    var.put('flags', ((((Js('i') if var.get('separator').get('ignoreCase') else Js(''))+(Js('m') if var.get('separator').get('multiline') else Js('')))+(Js('u') if var.get('separator').get('unicode') else Js('')))+(Js('y') if var.get('separator').get('sticky') else Js(''))))
                    var.put('lastLastIndex', Js(0.0))
                    var.put('splitLimit', (var.get('MAX_UINT32') if PyJsStrictEq(var.get('limit'),var.get('undefined')) else PyJsBshift(var.get('limit'),Js(0.0))))
                    var.put('separatorCopy', var.get('RegExp').create(var.get('separator').get('source'), (var.get('flags')+Js('g'))))
                    pass
                    while var.put('match', var.get('regexpExec').callprop('call', var.get('separatorCopy'), var.get('string'))):
                        var.put('lastIndex', var.get('separatorCopy').get(var.get('LAST_INDEX')))
                        if (var.get('lastIndex')>var.get('lastLastIndex')):
                            var.get('output').callprop('push', var.get('string').callprop('slice', var.get('lastLastIndex'), var.get('match').get('index')))
                            if ((var.get('match').get(var.get('LENGTH'))>Js(1.0)) and (var.get('match').get('index')<var.get('string').get(var.get('LENGTH')))):
                                var.get('$push').callprop('apply', var.get('output'), var.get('match').callprop('slice', Js(1.0)))
                            var.put('lastLength', var.get('match').get('0').get(var.get('LENGTH')))
                            var.put('lastLastIndex', var.get('lastIndex'))
                            if (var.get('output').get(var.get('LENGTH'))>=var.get('splitLimit')):
                                break
                        if PyJsStrictEq(var.get('separatorCopy').get(var.get('LAST_INDEX')),var.get('match').get('index')):
                            (var.get('separatorCopy').put(var.get('LAST_INDEX'),Js(var.get('separatorCopy').get(var.get('LAST_INDEX')).to_number())+Js(1))-Js(1))
                    if PyJsStrictEq(var.get('lastLastIndex'),var.get('string').get(var.get('LENGTH'))):
                        if (var.get('lastLength') or var.get('separatorCopy').callprop('test', Js('')).neg()):
                            var.get('output').callprop('push', Js(''))
                    else:
                        var.get('output').callprop('push', var.get('string').callprop('slice', var.get('lastLastIndex')))
                    return (var.get('output').callprop('slice', Js(0.0), var.get('splitLimit')) if (var.get('output').get(var.get('LENGTH'))>var.get('splitLimit')) else var.get('output'))
                PyJs_internalSplit_749_._set_name('internalSplit')
                var.put('internalSplit', PyJs_internalSplit_749_)
            else:
                if Js('0').callprop(var.get('$SPLIT'), var.get('undefined'), Js(0.0)).get(var.get('LENGTH')):
                    @Js
                    def PyJs_internalSplit_750_(separator, limit, this, arguments, var=var):
                        var = Scope({'separator':separator, 'limit':limit, 'this':this, 'arguments':arguments, 'internalSplit':PyJs_internalSplit_750_}, var)
                        var.registers(['separator', 'limit'])
                        return (Js([]) if (PyJsStrictEq(var.get('separator'),var.get('undefined')) and PyJsStrictEq(var.get('limit'),Js(0.0))) else var.get('$split').callprop('call', var.get(u"this"), var.get('separator'), var.get('limit')))
                    PyJs_internalSplit_750_._set_name('internalSplit')
                    var.put('internalSplit', PyJs_internalSplit_750_)
                else:
                    var.put('internalSplit', var.get('$split'))
            @Js
            def PyJs_split_751_(separator, limit, this, arguments, var=var):
                var = Scope({'separator':separator, 'limit':limit, 'this':this, 'arguments':arguments, 'split':PyJs_split_751_}, var)
                var.registers(['O', 'separator', 'limit', 'splitter'])
                var.put('O', var.get('defined')(var.get(u"this")))
                var.put('splitter', (var.get('undefined') if (var.get('separator')==var.get('undefined')) else var.get('separator').get(var.get('SPLIT'))))
                return (var.get('splitter').callprop('call', var.get('separator'), var.get('O'), var.get('limit')) if PyJsStrictNeq(var.get('splitter'),var.get('undefined')) else var.get('internalSplit').callprop('call', var.get('String')(var.get('O')), var.get('separator'), var.get('limit')))
            PyJs_split_751_._set_name('split')
            @Js
            def PyJs_anonymous_752_(regexp, limit, this, arguments, var=var):
                var = Scope({'regexp':regexp, 'limit':limit, 'this':this, 'arguments':arguments}, var)
                var.registers(['C', 'z', 'regexp', 'lim', 'A', 'i', 'splitter', 'flags', 'res', 'e', 'p', 'unicodeMatching', 'q', 'S', 'limit', 'rx'])
                var.put('res', var.get('maybeCallNative')(var.get('internalSplit'), var.get('regexp'), var.get(u"this"), var.get('limit'), PyJsStrictNeq(var.get('internalSplit'),var.get('$split'))))
                if var.get('res').get('done'):
                    return var.get('res').get('value')
                var.put('rx', var.get('anObject')(var.get('regexp')))
                var.put('S', var.get('String')(var.get(u"this")))
                var.put('C', var.get('speciesConstructor')(var.get('rx'), var.get('RegExp')))
                var.put('unicodeMatching', var.get('rx').get('unicode'))
                var.put('flags', ((((Js('i') if var.get('rx').get('ignoreCase') else Js(''))+(Js('m') if var.get('rx').get('multiline') else Js('')))+(Js('u') if var.get('rx').get('unicode') else Js('')))+(Js('y') if var.get('SUPPORTS_Y') else Js('g'))))
                var.put('splitter', var.get('C').create((var.get('rx') if var.get('SUPPORTS_Y') else ((Js('^(?:')+var.get('rx').get('source'))+Js(')'))), var.get('flags')))
                var.put('lim', (var.get('MAX_UINT32') if PyJsStrictEq(var.get('limit'),var.get('undefined')) else PyJsBshift(var.get('limit'),Js(0.0))))
                if PyJsStrictEq(var.get('lim'),Js(0.0)):
                    return Js([])
                if PyJsStrictEq(var.get('S').get('length'),Js(0.0)):
                    return (Js([var.get('S')]) if PyJsStrictEq(var.get('callRegExpExec')(var.get('splitter'), var.get('S')),var.get(u"null")) else Js([]))
                var.put('p', Js(0.0))
                var.put('q', Js(0.0))
                var.put('A', Js([]))
                while (var.get('q')<var.get('S').get('length')):
                    var.get('splitter').put('lastIndex', (var.get('q') if var.get('SUPPORTS_Y') else Js(0.0)))
                    var.put('z', var.get('callRegExpExec')(var.get('splitter'), (var.get('S') if var.get('SUPPORTS_Y') else var.get('S').callprop('slice', var.get('q')))))
                    pass
                    if (PyJsStrictEq(var.get('z'),var.get(u"null")) or PyJsStrictEq(var.put('e', var.get('$min')(var.get('toLength')((var.get('splitter').get('lastIndex')+(Js(0.0) if var.get('SUPPORTS_Y') else var.get('q')))), var.get('S').get('length'))),var.get('p'))):
                        var.put('q', var.get('advanceStringIndex')(var.get('S'), var.get('q'), var.get('unicodeMatching')))
                    else:
                        var.get('A').callprop('push', var.get('S').callprop('slice', var.get('p'), var.get('q')))
                        if PyJsStrictEq(var.get('A').get('length'),var.get('lim')):
                            return var.get('A')
                        #for JS loop
                        var.put('i', Js(1.0))
                        while (var.get('i')<=(var.get('z').get('length')-Js(1.0))):
                            try:
                                var.get('A').callprop('push', var.get('z').get(var.get('i')))
                                if PyJsStrictEq(var.get('A').get('length'),var.get('lim')):
                                    return var.get('A')
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                        var.put('q', var.put('p', var.get('e')))
                var.get('A').callprop('push', var.get('S').callprop('slice', var.get('p')))
                return var.get('A')
            PyJs_anonymous_752_._set_name('anonymous')
            return Js([PyJs_split_751_, PyJs_anonymous_752_])
        PyJs_anonymous_747_._set_name('anonymous')
        var.get('require')(Js('./_fix-re-wks'))(Js('split'), Js(2.0), PyJs_anonymous_747_)
    PyJs_anonymous_745_._set_name('anonymous')
    @Js
    def PyJs_anonymous_753_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'DESCRIPTORS', 'define', 'exports', 'module', 'TO_STRING', 'anObject', '$toString', '$flags'])
        Js('use strict')
        var.get('require')(Js('./es6.regexp.flags'))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('$flags', var.get('require')(Js('./_flags')))
        var.put('DESCRIPTORS', var.get('require')(Js('./_descriptors')))
        var.put('TO_STRING', Js('toString'))
        var.put('$toString', JsRegExp('/./').get(var.get('TO_STRING')))
        @Js
        def PyJs_define_754_(fn, this, arguments, var=var):
            var = Scope({'fn':fn, 'this':this, 'arguments':arguments, 'define':PyJs_define_754_}, var)
            var.registers(['fn'])
            var.get('require')(Js('./_redefine'))(var.get('RegExp').get('prototype'), var.get('TO_STRING'), var.get('fn'), Js(True))
        PyJs_define_754_._set_name('define')
        var.put('define', PyJs_define_754_)
        @Js
        def PyJs_anonymous_755_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return (var.get('$toString').callprop('call', Js({'source':Js('a'),'flags':Js('b')}))!=Js('/a/b'))
        PyJs_anonymous_755_._set_name('anonymous')
        if var.get('require')(Js('./_fails'))(PyJs_anonymous_755_):
            @Js
            def PyJs_toString_756_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'toString':PyJs_toString_756_}, var)
                var.registers(['R'])
                var.put('R', var.get('anObject')(var.get(u"this")))
                return Js('/').callprop('concat', var.get('R').get('source'), Js('/'), (var.get('R').get('flags') if var.get('R').contains(Js('flags')) else (var.get('$flags').callprop('call', var.get('R')) if (var.get('DESCRIPTORS').neg() and var.get('R').instanceof(var.get('RegExp'))) else var.get('undefined'))))
            PyJs_toString_756_._set_name('toString')
            var.get('define')(PyJs_toString_756_)
        else:
            if (var.get('$toString').get('name')!=var.get('TO_STRING')):
                @Js
                def PyJs_toString_757_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'toString':PyJs_toString_757_}, var)
                    var.registers([])
                    return var.get('$toString').callprop('call', var.get(u"this"))
                PyJs_toString_757_._set_name('toString')
                var.get('define')(PyJs_toString_757_)
    PyJs_anonymous_753_._set_name('anonymous')
    @Js
    def PyJs_anonymous_758_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'SET', 'strong', 'exports', 'module', 'validate'])
        Js('use strict')
        var.put('strong', var.get('require')(Js('./_collection-strong')))
        var.put('validate', var.get('require')(Js('./_validate-collection')))
        var.put('SET', Js('Set'))
        @Js
        def PyJs_anonymous_759_(get, this, arguments, var=var):
            var = Scope({'get':get, 'this':this, 'arguments':arguments}, var)
            var.registers(['get'])
            @Js
            def PyJs_Set_760_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'Set':PyJs_Set_760_}, var)
                var.registers([])
                return var.get('get')(var.get(u"this"), (var.get('arguments').get('0') if (var.get('arguments').get('length')>Js(0.0)) else var.get('undefined')))
            PyJs_Set_760_._set_name('Set')
            return PyJs_Set_760_
        PyJs_anonymous_759_._set_name('anonymous')
        @Js
        def PyJs_add_761_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments, 'add':PyJs_add_761_}, var)
            var.registers(['value'])
            return var.get('strong').callprop('def', var.get('validate')(var.get(u"this"), var.get('SET')), var.put('value', (Js(0.0) if PyJsStrictEq(var.get('value'),Js(0.0)) else var.get('value'))), var.get('value'))
        PyJs_add_761_._set_name('add')
        var.get('module').put('exports', var.get('require')(Js('./_collection'))(var.get('SET'), PyJs_anonymous_759_, Js({'add':PyJs_add_761_}), var.get('strong')))
    PyJs_anonymous_758_._set_name('anonymous')
    @Js
    def PyJs_anonymous_762_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_763_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_anchor_764_(name, this, arguments, var=var):
                var = Scope({'name':name, 'this':this, 'arguments':arguments, 'anchor':PyJs_anchor_764_}, var)
                var.registers(['name'])
                return var.get('createHTML')(var.get(u"this"), Js('a'), Js('name'), var.get('name'))
            PyJs_anchor_764_._set_name('anchor')
            return PyJs_anchor_764_
        PyJs_anonymous_763_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('anchor'), PyJs_anonymous_763_)
    PyJs_anonymous_762_._set_name('anonymous')
    @Js
    def PyJs_anonymous_765_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_766_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_big_767_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'big':PyJs_big_767_}, var)
                var.registers([])
                return var.get('createHTML')(var.get(u"this"), Js('big'), Js(''), Js(''))
            PyJs_big_767_._set_name('big')
            return PyJs_big_767_
        PyJs_anonymous_766_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('big'), PyJs_anonymous_766_)
    PyJs_anonymous_765_._set_name('anonymous')
    @Js
    def PyJs_anonymous_768_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_769_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_blink_770_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'blink':PyJs_blink_770_}, var)
                var.registers([])
                return var.get('createHTML')(var.get(u"this"), Js('blink'), Js(''), Js(''))
            PyJs_blink_770_._set_name('blink')
            return PyJs_blink_770_
        PyJs_anonymous_769_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('blink'), PyJs_anonymous_769_)
    PyJs_anonymous_768_._set_name('anonymous')
    @Js
    def PyJs_anonymous_771_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_772_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_bold_773_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'bold':PyJs_bold_773_}, var)
                var.registers([])
                return var.get('createHTML')(var.get(u"this"), Js('b'), Js(''), Js(''))
            PyJs_bold_773_._set_name('bold')
            return PyJs_bold_773_
        PyJs_anonymous_772_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('bold'), PyJs_anonymous_772_)
    PyJs_anonymous_771_._set_name('anonymous')
    @Js
    def PyJs_anonymous_774_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$export', 'exports', 'module', '$at'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$at', var.get('require')(Js('./_string-at'))(Js(False)))
        @Js
        def PyJs_codePointAt_775_(pos, this, arguments, var=var):
            var = Scope({'pos':pos, 'this':this, 'arguments':arguments, 'codePointAt':PyJs_codePointAt_775_}, var)
            var.registers(['pos'])
            return var.get('$at')(var.get(u"this"), var.get('pos'))
        PyJs_codePointAt_775_._set_name('codePointAt')
        var.get('$export')(var.get('$export').get('P'), Js('String'), Js({'codePointAt':PyJs_codePointAt_775_}))
    PyJs_anonymous_774_._set_name('anonymous')
    @Js
    def PyJs_anonymous_776_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toLength', '$endsWith', '$export', 'exports', 'module', 'ENDS_WITH', 'context'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('context', var.get('require')(Js('./_string-context')))
        var.put('ENDS_WITH', Js('endsWith'))
        var.put('$endsWith', Js('').get(var.get('ENDS_WITH')))
        @Js
        def PyJs_endsWith_777_(searchString, this, arguments, var=var):
            var = Scope({'searchString':searchString, 'this':this, 'arguments':arguments, 'endsWith':PyJs_endsWith_777_}, var)
            var.registers(['search', 'end', 'that', 'searchString', 'endPosition', 'len'])
            var.put('that', var.get('context')(var.get(u"this"), var.get('searchString'), var.get('ENDS_WITH')))
            var.put('endPosition', (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
            var.put('len', var.get('toLength')(var.get('that').get('length')))
            var.put('end', (var.get('len') if PyJsStrictEq(var.get('endPosition'),var.get('undefined')) else var.get('Math').callprop('min', var.get('toLength')(var.get('endPosition')), var.get('len'))))
            var.put('search', var.get('String')(var.get('searchString')))
            return (var.get('$endsWith').callprop('call', var.get('that'), var.get('search'), var.get('end')) if var.get('$endsWith') else PyJsStrictEq(var.get('that').callprop('slice', (var.get('end')-var.get('search').get('length')), var.get('end')),var.get('search')))
        PyJs_endsWith_777_._set_name('endsWith')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_fails-is-regexp'))(var.get('ENDS_WITH')))), Js('String'), Js({'endsWith':PyJs_endsWith_777_}))
    PyJs_anonymous_776_._set_name('anonymous')
    @Js
    def PyJs_anonymous_778_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_779_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_fixed_780_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'fixed':PyJs_fixed_780_}, var)
                var.registers([])
                return var.get('createHTML')(var.get(u"this"), Js('tt'), Js(''), Js(''))
            PyJs_fixed_780_._set_name('fixed')
            return PyJs_fixed_780_
        PyJs_anonymous_779_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('fixed'), PyJs_anonymous_779_)
    PyJs_anonymous_778_._set_name('anonymous')
    @Js
    def PyJs_anonymous_781_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_782_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_fontcolor_783_(color, this, arguments, var=var):
                var = Scope({'color':color, 'this':this, 'arguments':arguments, 'fontcolor':PyJs_fontcolor_783_}, var)
                var.registers(['color'])
                return var.get('createHTML')(var.get(u"this"), Js('font'), Js('color'), var.get('color'))
            PyJs_fontcolor_783_._set_name('fontcolor')
            return PyJs_fontcolor_783_
        PyJs_anonymous_782_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('fontcolor'), PyJs_anonymous_782_)
    PyJs_anonymous_781_._set_name('anonymous')
    @Js
    def PyJs_anonymous_784_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_785_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_fontsize_786_(size, this, arguments, var=var):
                var = Scope({'size':size, 'this':this, 'arguments':arguments, 'fontsize':PyJs_fontsize_786_}, var)
                var.registers(['size'])
                return var.get('createHTML')(var.get(u"this"), Js('font'), Js('size'), var.get('size'))
            PyJs_fontsize_786_._set_name('fontsize')
            return PyJs_fontsize_786_
        PyJs_anonymous_785_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('fontsize'), PyJs_anonymous_785_)
    PyJs_anonymous_784_._set_name('anonymous')
    @Js
    def PyJs_anonymous_787_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$fromCodePoint', 'toAbsoluteIndex', '$export', 'exports', 'module', 'fromCharCode'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toAbsoluteIndex', var.get('require')(Js('./_to-absolute-index')))
        var.put('fromCharCode', var.get('String').get('fromCharCode'))
        var.put('$fromCodePoint', var.get('String').get('fromCodePoint'))
        @Js
        def PyJs_fromCodePoint_788_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'fromCodePoint':PyJs_fromCodePoint_788_}, var)
            var.registers(['code', 'x', 'i', 'aLen', 'res'])
            var.put('res', Js([]))
            var.put('aLen', var.get('arguments').get('length'))
            var.put('i', Js(0.0))
            pass
            while (var.get('aLen')>var.get('i')):
                var.put('code', (+var.get('arguments').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)))))
                if PyJsStrictNeq(var.get('toAbsoluteIndex')(var.get('code'), Js(1114111)),var.get('code')):
                    PyJsTempException = JsToPyException(var.get('RangeError')((var.get('code')+Js(' is not a valid code point'))))
                    raise PyJsTempException
                var.get('res').callprop('push', (var.get('fromCharCode')(var.get('code')) if (var.get('code')<Js(65536)) else var.get('fromCharCode')(((var.put('code', Js(65536), '-')>>Js(10.0))+Js(55296)), ((var.get('code')%Js(1024))+Js(56320)))))
            return var.get('res').callprop('join', Js(''))
        PyJs_fromCodePoint_788_._set_name('fromCodePoint')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*(var.get('$fromCodePoint').neg().neg() and (var.get('$fromCodePoint').get('length')!=Js(1.0))))), Js('String'), Js({'fromCodePoint':PyJs_fromCodePoint_788_}))
    PyJs_anonymous_787_._set_name('anonymous')
    @Js
    def PyJs_anonymous_789_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$export', 'exports', 'module', 'INCLUDES', 'context'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('context', var.get('require')(Js('./_string-context')))
        var.put('INCLUDES', Js('includes'))
        @Js
        def PyJs_includes_790_(searchString, this, arguments, var=var):
            var = Scope({'searchString':searchString, 'this':this, 'arguments':arguments, 'includes':PyJs_includes_790_}, var)
            var.registers(['searchString'])
            return (~var.get('context')(var.get(u"this"), var.get('searchString'), var.get('INCLUDES')).callprop('indexOf', var.get('searchString'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))).neg().neg()
        PyJs_includes_790_._set_name('includes')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_fails-is-regexp'))(var.get('INCLUDES')))), Js('String'), Js({'includes':PyJs_includes_790_}))
    PyJs_anonymous_789_._set_name('anonymous')
    @Js
    def PyJs_anonymous_791_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_792_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_italics_793_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'italics':PyJs_italics_793_}, var)
                var.registers([])
                return var.get('createHTML')(var.get(u"this"), Js('i'), Js(''), Js(''))
            PyJs_italics_793_._set_name('italics')
            return PyJs_italics_793_
        PyJs_anonymous_792_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('italics'), PyJs_anonymous_792_)
    PyJs_anonymous_791_._set_name('anonymous')
    @Js
    def PyJs_anonymous_794_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$at', 'require', 'module', 'exports'])
        Js('use strict')
        var.put('$at', var.get('require')(Js('./_string-at'))(Js(True)))
        @Js
        def PyJs_anonymous_795_(iterated, this, arguments, var=var):
            var = Scope({'iterated':iterated, 'this':this, 'arguments':arguments}, var)
            var.registers(['iterated'])
            var.get(u"this").put('_t', var.get('String')(var.get('iterated')))
            var.get(u"this").put('_i', Js(0.0))
        PyJs_anonymous_795_._set_name('anonymous')
        @Js
        def PyJs_anonymous_796_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['index', 'O', 'point'])
            var.put('O', var.get(u"this").get('_t'))
            var.put('index', var.get(u"this").get('_i'))
            pass
            if (var.get('index')>=var.get('O').get('length')):
                return Js({'value':var.get('undefined'),'done':Js(True)})
            var.put('point', var.get('$at')(var.get('O'), var.get('index')))
            var.get(u"this").put('_i', var.get('point').get('length'), '+')
            return Js({'value':var.get('point'),'done':Js(False)})
        PyJs_anonymous_796_._set_name('anonymous')
        var.get('require')(Js('./_iter-define'))(var.get('String'), Js('String'), PyJs_anonymous_795_, PyJs_anonymous_796_)
    PyJs_anonymous_794_._set_name('anonymous')
    @Js
    def PyJs_anonymous_797_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_798_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_link_799_(url, this, arguments, var=var):
                var = Scope({'url':url, 'this':this, 'arguments':arguments, 'link':PyJs_link_799_}, var)
                var.registers(['url'])
                return var.get('createHTML')(var.get(u"this"), Js('a'), Js('href'), var.get('url'))
            PyJs_link_799_._set_name('link')
            return PyJs_link_799_
        PyJs_anonymous_798_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('link'), PyJs_anonymous_798_)
    PyJs_anonymous_797_._set_name('anonymous')
    @Js
    def PyJs_anonymous_800_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toLength', 'toIObject', '$export', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        @Js
        def PyJs_raw_801_(callSite, this, arguments, var=var):
            var = Scope({'callSite':callSite, 'this':this, 'arguments':arguments, 'raw':PyJs_raw_801_}, var)
            var.registers(['i', 'callSite', 'aLen', 'tpl', 'len', 'res'])
            var.put('tpl', var.get('toIObject')(var.get('callSite').get('raw')))
            var.put('len', var.get('toLength')(var.get('tpl').get('length')))
            var.put('aLen', var.get('arguments').get('length'))
            var.put('res', Js([]))
            var.put('i', Js(0.0))
            while (var.get('len')>var.get('i')):
                var.get('res').callprop('push', var.get('String')(var.get('tpl').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)))))
                if (var.get('i')<var.get('aLen')):
                    var.get('res').callprop('push', var.get('String')(var.get('arguments').get(var.get('i'))))
            return var.get('res').callprop('join', Js(''))
        PyJs_raw_801_._set_name('raw')
        var.get('$export')(var.get('$export').get('S'), Js('String'), Js({'raw':PyJs_raw_801_}))
    PyJs_anonymous_800_._set_name('anonymous')
    @Js
    def PyJs_anonymous_802_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('P'), Js('String'), Js({'repeat':var.get('require')(Js('./_string-repeat'))}))
    PyJs_anonymous_802_._set_name('anonymous')
    @Js
    def PyJs_anonymous_803_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_804_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_small_805_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'small':PyJs_small_805_}, var)
                var.registers([])
                return var.get('createHTML')(var.get(u"this"), Js('small'), Js(''), Js(''))
            PyJs_small_805_._set_name('small')
            return PyJs_small_805_
        PyJs_anonymous_804_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('small'), PyJs_anonymous_804_)
    PyJs_anonymous_803_._set_name('anonymous')
    @Js
    def PyJs_anonymous_806_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toLength', 'STARTS_WITH', '$export', 'exports', 'module', '$startsWith', 'context'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('context', var.get('require')(Js('./_string-context')))
        var.put('STARTS_WITH', Js('startsWith'))
        var.put('$startsWith', Js('').get(var.get('STARTS_WITH')))
        @Js
        def PyJs_startsWith_807_(searchString, this, arguments, var=var):
            var = Scope({'searchString':searchString, 'this':this, 'arguments':arguments, 'startsWith':PyJs_startsWith_807_}, var)
            var.registers(['index', 'searchString', 'search', 'that'])
            var.put('that', var.get('context')(var.get(u"this"), var.get('searchString'), var.get('STARTS_WITH')))
            var.put('index', var.get('toLength')(var.get('Math').callprop('min', (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')), var.get('that').get('length'))))
            var.put('search', var.get('String')(var.get('searchString')))
            return (var.get('$startsWith').callprop('call', var.get('that'), var.get('search'), var.get('index')) if var.get('$startsWith') else PyJsStrictEq(var.get('that').callprop('slice', var.get('index'), (var.get('index')+var.get('search').get('length'))),var.get('search')))
        PyJs_startsWith_807_._set_name('startsWith')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_fails-is-regexp'))(var.get('STARTS_WITH')))), Js('String'), Js({'startsWith':PyJs_startsWith_807_}))
    PyJs_anonymous_806_._set_name('anonymous')
    @Js
    def PyJs_anonymous_808_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_809_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_strike_810_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'strike':PyJs_strike_810_}, var)
                var.registers([])
                return var.get('createHTML')(var.get(u"this"), Js('strike'), Js(''), Js(''))
            PyJs_strike_810_._set_name('strike')
            return PyJs_strike_810_
        PyJs_anonymous_809_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('strike'), PyJs_anonymous_809_)
    PyJs_anonymous_808_._set_name('anonymous')
    @Js
    def PyJs_anonymous_811_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_812_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_sub_813_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'sub':PyJs_sub_813_}, var)
                var.registers([])
                return var.get('createHTML')(var.get(u"this"), Js('sub'), Js(''), Js(''))
            PyJs_sub_813_._set_name('sub')
            return PyJs_sub_813_
        PyJs_anonymous_812_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('sub'), PyJs_anonymous_812_)
    PyJs_anonymous_811_._set_name('anonymous')
    @Js
    def PyJs_anonymous_814_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_815_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_sup_816_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'sup':PyJs_sup_816_}, var)
                var.registers([])
                return var.get('createHTML')(var.get(u"this"), Js('sup'), Js(''), Js(''))
            PyJs_sup_816_._set_name('sup')
            return PyJs_sup_816_
        PyJs_anonymous_815_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('sup'), PyJs_anonymous_815_)
    PyJs_anonymous_814_._set_name('anonymous')
    @Js
    def PyJs_anonymous_817_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_818_(PyJsArg_247472696d_, this, arguments, var=var):
            var = Scope({'$trim':PyJsArg_247472696d_, 'this':this, 'arguments':arguments}, var)
            var.registers(['$trim'])
            @Js
            def PyJs_trim_819_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'trim':PyJs_trim_819_}, var)
                var.registers([])
                return var.get('$trim')(var.get(u"this"), Js(3.0))
            PyJs_trim_819_._set_name('trim')
            return PyJs_trim_819_
        PyJs_anonymous_818_._set_name('anonymous')
        var.get('require')(Js('./_string-trim'))(Js('trim'), PyJs_anonymous_818_)
    PyJs_anonymous_817_._set_name('anonymous')
    @Js
    def PyJs_anonymous_820_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['_stringify', '$defineProperties', '$Symbol', 'es6Symbols', 'META', 'DESCRIPTORS', '$defineProperty', '$getOwnPropertyDescriptor', 'SymbolRegistry', 'wrap', '$create', 'FAILS_ON_PRIMITIVES', 'wksExt', 'isEnum', 'isSymbol', 'dP', '$getOwnPropertyNames', '$fails', 'setToStringTag', 'wks', 'wellKnownSymbols', '$JSON', 'gOPN', '$GOPS', 'OPSymbols', 'uid', 'k', 'QObject', '_create', 'wksDefine', 'USE_NATIVE', 'require', 'HIDDEN', 'toPrimitive', 'toIObject', 'redefine', 'toObject', 'module', 'ObjectProto', 'setter', 'global', 'createDesc', 'gOPNExt', '$DP', 'PROTOTYPE', 'has', '$propertyIsEnumerable', 'AllSymbols', '$keys', 'setSymbolDesc', '$getOwnPropertySymbols', 'gOPD', '$export', 'enumKeys', 'shared', 'isArray', 'TO_PRIMITIVE', 'j', 'exports', 'isObject', '$GOPD', 'anObject'])
        Js('use strict')
        var.put('global', var.get('require')(Js('./_global')))
        var.put('has', var.get('require')(Js('./_has')))
        var.put('DESCRIPTORS', var.get('require')(Js('./_descriptors')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('redefine', var.get('require')(Js('./_redefine')))
        var.put('META', var.get('require')(Js('./_meta')).get('KEY'))
        var.put('$fails', var.get('require')(Js('./_fails')))
        var.put('shared', var.get('require')(Js('./_shared')))
        var.put('setToStringTag', var.get('require')(Js('./_set-to-string-tag')))
        var.put('uid', var.get('require')(Js('./_uid')))
        var.put('wks', var.get('require')(Js('./_wks')))
        var.put('wksExt', var.get('require')(Js('./_wks-ext')))
        var.put('wksDefine', var.get('require')(Js('./_wks-define')))
        var.put('enumKeys', var.get('require')(Js('./_enum-keys')))
        var.put('isArray', var.get('require')(Js('./_is-array')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
        var.put('createDesc', var.get('require')(Js('./_property-desc')))
        var.put('_create', var.get('require')(Js('./_object-create')))
        var.put('gOPNExt', var.get('require')(Js('./_object-gopn-ext')))
        var.put('$GOPD', var.get('require')(Js('./_object-gopd')))
        var.put('$GOPS', var.get('require')(Js('./_object-gops')))
        var.put('$DP', var.get('require')(Js('./_object-dp')))
        var.put('$keys', var.get('require')(Js('./_object-keys')))
        var.put('gOPD', var.get('$GOPD').get('f'))
        var.put('dP', var.get('$DP').get('f'))
        var.put('gOPN', var.get('gOPNExt').get('f'))
        var.put('$Symbol', var.get('global').get('Symbol'))
        var.put('$JSON', var.get('global').get('JSON'))
        var.put('_stringify', (var.get('$JSON') and var.get('$JSON').get('stringify')))
        var.put('PROTOTYPE', Js('prototype'))
        var.put('HIDDEN', var.get('wks')(Js('_hidden')))
        var.put('TO_PRIMITIVE', var.get('wks')(Js('toPrimitive')))
        var.put('isEnum', Js({}).get('propertyIsEnumerable'))
        var.put('SymbolRegistry', var.get('shared')(Js('symbol-registry')))
        var.put('AllSymbols', var.get('shared')(Js('symbols')))
        var.put('OPSymbols', var.get('shared')(Js('op-symbols')))
        var.put('ObjectProto', var.get('Object').get(var.get('PROTOTYPE')))
        var.put('USE_NATIVE', ((var.get('$Symbol',throw=False).typeof()==Js('function')) and var.get('$GOPS').get('f').neg().neg()))
        var.put('QObject', var.get('global').get('QObject'))
        var.put('setter', ((var.get('QObject').neg() or var.get('QObject').get(var.get('PROTOTYPE')).neg()) or var.get('QObject').get(var.get('PROTOTYPE')).get('findChild').neg()))
        @Js
        def PyJs_anonymous_821_(it, key, D, this, arguments, var=var):
            var = Scope({'it':it, 'key':key, 'D':D, 'this':this, 'arguments':arguments}, var)
            var.registers(['protoDesc', 'D', 'it', 'key'])
            var.put('protoDesc', var.get('gOPD')(var.get('ObjectProto'), var.get('key')))
            if var.get('protoDesc'):
                var.get('ObjectProto').delete(var.get('key'))
            var.get('dP')(var.get('it'), var.get('key'), var.get('D'))
            if (var.get('protoDesc') and PyJsStrictNeq(var.get('it'),var.get('ObjectProto'))):
                var.get('dP')(var.get('ObjectProto'), var.get('key'), var.get('protoDesc'))
        PyJs_anonymous_821_._set_name('anonymous')
        @Js
        def PyJs_anonymous_822_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_get_823_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_823_}, var)
                var.registers([])
                return var.get('dP')(var.get(u"this"), Js('a'), Js({'value':Js(7.0)})).get('a')
            PyJs_get_823_._set_name('get')
            return (var.get('_create')(var.get('dP')(Js({}), Js('a'), Js({'get':PyJs_get_823_}))).get('a')!=Js(7.0))
        PyJs_anonymous_822_._set_name('anonymous')
        var.put('setSymbolDesc', (PyJs_anonymous_821_ if (var.get('DESCRIPTORS') and var.get('$fails')(PyJs_anonymous_822_)) else var.get('dP')))
        @Js
        def PyJs_wrap_824_(tag, this, arguments, var=var):
            var = Scope({'tag':tag, 'this':this, 'arguments':arguments, 'wrap':PyJs_wrap_824_}, var)
            var.registers(['tag', 'sym'])
            var.put('sym', var.get('AllSymbols').put(var.get('tag'), var.get('_create')(var.get('$Symbol').get(var.get('PROTOTYPE')))))
            var.get('sym').put('_k', var.get('tag'))
            return var.get('sym')
        PyJs_wrap_824_._set_name('wrap')
        var.put('wrap', PyJs_wrap_824_)
        @Js
        def PyJs_anonymous_825_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return ((Js('undefined') if PyJsStrictEq(var.get('it',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('it')))==Js('symbol'))
        PyJs_anonymous_825_._set_name('anonymous')
        @Js
        def PyJs_anonymous_826_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return var.get('it').instanceof(var.get('$Symbol'))
        PyJs_anonymous_826_._set_name('anonymous')
        var.put('isSymbol', (PyJs_anonymous_825_ if (var.get('USE_NATIVE') and (var.get('_typeof')(var.get('$Symbol').get('iterator'))==Js('symbol'))) else PyJs_anonymous_826_))
        @Js
        def PyJs_defineProperty_827_(it, key, D, this, arguments, var=var):
            var = Scope({'it':it, 'key':key, 'D':D, 'this':this, 'arguments':arguments, 'defineProperty':PyJs_defineProperty_827_}, var)
            var.registers(['it', 'D', 'key'])
            if PyJsStrictEq(var.get('it'),var.get('ObjectProto')):
                var.get('$defineProperty')(var.get('OPSymbols'), var.get('key'), var.get('D'))
            var.get('anObject')(var.get('it'))
            var.put('key', var.get('toPrimitive')(var.get('key'), Js(True)))
            var.get('anObject')(var.get('D'))
            if var.get('has')(var.get('AllSymbols'), var.get('key')):
                if var.get('D').get('enumerable').neg():
                    if var.get('has')(var.get('it'), var.get('HIDDEN')).neg():
                        var.get('dP')(var.get('it'), var.get('HIDDEN'), var.get('createDesc')(Js(1.0), Js({})))
                    var.get('it').get(var.get('HIDDEN')).put(var.get('key'), Js(True))
                else:
                    if (var.get('has')(var.get('it'), var.get('HIDDEN')) and var.get('it').get(var.get('HIDDEN')).get(var.get('key'))):
                        var.get('it').get(var.get('HIDDEN')).put(var.get('key'), Js(False))
                    var.put('D', var.get('_create')(var.get('D'), Js({'enumerable':var.get('createDesc')(Js(0.0), Js(False))})))
                return var.get('setSymbolDesc')(var.get('it'), var.get('key'), var.get('D'))
            return var.get('dP')(var.get('it'), var.get('key'), var.get('D'))
        PyJs_defineProperty_827_._set_name('defineProperty')
        var.put('$defineProperty', PyJs_defineProperty_827_)
        @Js
        def PyJs_defineProperties_828_(it, P, this, arguments, var=var):
            var = Scope({'it':it, 'P':P, 'this':this, 'arguments':arguments, 'defineProperties':PyJs_defineProperties_828_}, var)
            var.registers(['it', 'i', 'l', 'P', 'key', 'keys'])
            var.get('anObject')(var.get('it'))
            var.put('keys', var.get('enumKeys')(var.put('P', var.get('toIObject')(var.get('P')))))
            var.put('i', Js(0.0))
            var.put('l', var.get('keys').get('length'))
            pass
            while (var.get('l')>var.get('i')):
                var.get('$defineProperty')(var.get('it'), var.put('key', var.get('keys').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)))), var.get('P').get(var.get('key')))
            return var.get('it')
        PyJs_defineProperties_828_._set_name('defineProperties')
        var.put('$defineProperties', PyJs_defineProperties_828_)
        @Js
        def PyJs_create_829_(it, P, this, arguments, var=var):
            var = Scope({'it':it, 'P':P, 'this':this, 'arguments':arguments, 'create':PyJs_create_829_}, var)
            var.registers(['it', 'P'])
            return (var.get('_create')(var.get('it')) if PyJsStrictEq(var.get('P'),var.get('undefined')) else var.get('$defineProperties')(var.get('_create')(var.get('it')), var.get('P')))
        PyJs_create_829_._set_name('create')
        var.put('$create', PyJs_create_829_)
        @Js
        def PyJs_propertyIsEnumerable_830_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments, 'propertyIsEnumerable':PyJs_propertyIsEnumerable_830_}, var)
            var.registers(['key', 'E'])
            var.put('E', var.get('isEnum').callprop('call', var.get(u"this"), var.put('key', var.get('toPrimitive')(var.get('key'), Js(True)))))
            if ((PyJsStrictEq(var.get(u"this"),var.get('ObjectProto')) and var.get('has')(var.get('AllSymbols'), var.get('key'))) and var.get('has')(var.get('OPSymbols'), var.get('key')).neg()):
                return Js(False)
            return (var.get('E') if (((var.get('E') or var.get('has')(var.get(u"this"), var.get('key')).neg()) or var.get('has')(var.get('AllSymbols'), var.get('key')).neg()) or (var.get('has')(var.get(u"this"), var.get('HIDDEN')) and var.get(u"this").get(var.get('HIDDEN')).get(var.get('key')))) else Js(True))
        PyJs_propertyIsEnumerable_830_._set_name('propertyIsEnumerable')
        var.put('$propertyIsEnumerable', PyJs_propertyIsEnumerable_830_)
        @Js
        def PyJs_getOwnPropertyDescriptor_831_(it, key, this, arguments, var=var):
            var = Scope({'it':it, 'key':key, 'this':this, 'arguments':arguments, 'getOwnPropertyDescriptor':PyJs_getOwnPropertyDescriptor_831_}, var)
            var.registers(['it', 'D', 'key'])
            var.put('it', var.get('toIObject')(var.get('it')))
            var.put('key', var.get('toPrimitive')(var.get('key'), Js(True)))
            if ((PyJsStrictEq(var.get('it'),var.get('ObjectProto')) and var.get('has')(var.get('AllSymbols'), var.get('key'))) and var.get('has')(var.get('OPSymbols'), var.get('key')).neg()):
                return var.get('undefined')
            var.put('D', var.get('gOPD')(var.get('it'), var.get('key')))
            if ((var.get('D') and var.get('has')(var.get('AllSymbols'), var.get('key'))) and (var.get('has')(var.get('it'), var.get('HIDDEN')) and var.get('it').get(var.get('HIDDEN')).get(var.get('key'))).neg()):
                var.get('D').put('enumerable', Js(True))
            return var.get('D')
        PyJs_getOwnPropertyDescriptor_831_._set_name('getOwnPropertyDescriptor')
        var.put('$getOwnPropertyDescriptor', PyJs_getOwnPropertyDescriptor_831_)
        @Js
        def PyJs_getOwnPropertyNames_832_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'getOwnPropertyNames':PyJs_getOwnPropertyNames_832_}, var)
            var.registers(['it', 'i', 'result', 'key', 'names'])
            var.put('names', var.get('gOPN')(var.get('toIObject')(var.get('it'))))
            var.put('result', Js([]))
            var.put('i', Js(0.0))
            pass
            while (var.get('names').get('length')>var.get('i')):
                if ((var.get('has')(var.get('AllSymbols'), var.put('key', var.get('names').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))).neg() and (var.get('key')!=var.get('HIDDEN'))) and (var.get('key')!=var.get('META'))):
                    var.get('result').callprop('push', var.get('key'))
            return var.get('result')
        PyJs_getOwnPropertyNames_832_._set_name('getOwnPropertyNames')
        var.put('$getOwnPropertyNames', PyJs_getOwnPropertyNames_832_)
        @Js
        def PyJs_getOwnPropertySymbols_833_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'getOwnPropertySymbols':PyJs_getOwnPropertySymbols_833_}, var)
            var.registers(['it', 'i', 'IS_OP', 'result', 'key', 'names'])
            var.put('IS_OP', PyJsStrictEq(var.get('it'),var.get('ObjectProto')))
            var.put('names', var.get('gOPN')((var.get('OPSymbols') if var.get('IS_OP') else var.get('toIObject')(var.get('it')))))
            var.put('result', Js([]))
            var.put('i', Js(0.0))
            pass
            while (var.get('names').get('length')>var.get('i')):
                if (var.get('has')(var.get('AllSymbols'), var.put('key', var.get('names').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))) and (var.get('has')(var.get('ObjectProto'), var.get('key')) if var.get('IS_OP') else Js(True))):
                    var.get('result').callprop('push', var.get('AllSymbols').get(var.get('key')))
            return var.get('result')
        PyJs_getOwnPropertySymbols_833_._set_name('getOwnPropertySymbols')
        var.put('$getOwnPropertySymbols', PyJs_getOwnPropertySymbols_833_)
        if var.get('USE_NATIVE').neg():
            @Js
            def PyJs__Symbol2_834_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, '_Symbol2':PyJs__Symbol2_834_}, var)
                var.registers(['tag', '$set'])
                if var.get(u"this").instanceof(var.get('$Symbol')):
                    PyJsTempException = JsToPyException(var.get('TypeError')(Js('Symbol is not a constructor!')))
                    raise PyJsTempException
                var.put('tag', var.get('uid')((var.get('arguments').get('0') if (var.get('arguments').get('length')>Js(0.0)) else var.get('undefined'))))
                @Js
                def PyJs_InlineNonPyName_835_(value, this, arguments, var=var):
                    var = Scope({'value':value, 'this':this, 'arguments':arguments, '$set':PyJs_InlineNonPyName_835_}, var)
                    var.registers(['value'])
                    if PyJsStrictEq(var.get(u"this"),var.get('ObjectProto')):
                        var.get('$set').callprop('call', var.get('OPSymbols'), var.get('value'))
                    if (var.get('has')(var.get(u"this"), var.get('HIDDEN')) and var.get('has')(var.get(u"this").get(var.get('HIDDEN')), var.get('tag'))):
                        var.get(u"this").get(var.get('HIDDEN')).put(var.get('tag'), Js(False))
                    var.get('setSymbolDesc')(var.get(u"this"), var.get('tag'), var.get('createDesc')(Js(1.0), var.get('value')))
                PyJs_InlineNonPyName_835_._set_name('$set')
                var.put('$set', PyJs_InlineNonPyName_835_)
                if (var.get('DESCRIPTORS') and var.get('setter')):
                    var.get('setSymbolDesc')(var.get('ObjectProto'), var.get('tag'), Js({'configurable':Js(True),'set':var.get('$set')}))
                return var.get('wrap')(var.get('tag'))
            PyJs__Symbol2_834_._set_name('_Symbol2')
            var.put('$Symbol', PyJs__Symbol2_834_)
            @Js
            def PyJs_toString_836_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'toString':PyJs_toString_836_}, var)
                var.registers([])
                return var.get(u"this").get('_k')
            PyJs_toString_836_._set_name('toString')
            var.get('redefine')(var.get('$Symbol').get(var.get('PROTOTYPE')), Js('toString'), PyJs_toString_836_)
            var.get('$GOPD').put('f', var.get('$getOwnPropertyDescriptor'))
            var.get('$DP').put('f', var.get('$defineProperty'))
            var.get('require')(Js('./_object-gopn')).put('f', var.get('gOPNExt').put('f', var.get('$getOwnPropertyNames')))
            var.get('require')(Js('./_object-pie')).put('f', var.get('$propertyIsEnumerable'))
            var.get('$GOPS').put('f', var.get('$getOwnPropertySymbols'))
            if (var.get('DESCRIPTORS') and var.get('require')(Js('./_library')).neg()):
                var.get('redefine')(var.get('ObjectProto'), Js('propertyIsEnumerable'), var.get('$propertyIsEnumerable'), Js(True))
            @Js
            def PyJs_anonymous_837_(name, this, arguments, var=var):
                var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
                var.registers(['name'])
                return var.get('wrap')(var.get('wks')(var.get('name')))
            PyJs_anonymous_837_._set_name('anonymous')
            var.get('wksExt').put('f', PyJs_anonymous_837_)
        var.get('$export')(((var.get('$export').get('G')+var.get('$export').get('W'))+(var.get('$export').get('F')*var.get('USE_NATIVE').neg())), Js({'Symbol':var.get('$Symbol')}))
        #for JS loop
        var.put('es6Symbols', Js('hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables').callprop('split', Js(',')))
        var.put('j', Js(0.0))
        while (var.get('es6Symbols').get('length')>var.get('j')):
            var.get('wks')(var.get('es6Symbols').get((var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))))
        
        #for JS loop
        var.put('wellKnownSymbols', var.get('$keys')(var.get('wks').get('store')))
        var.put('k', Js(0.0))
        while (var.get('wellKnownSymbols').get('length')>var.get('k')):
            var.get('wksDefine')(var.get('wellKnownSymbols').get((var.put('k',Js(var.get('k').to_number())+Js(1))-Js(1))))
        
        @Js
        def PyJs__for_838_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments, '_for':PyJs__for_838_}, var)
            var.registers(['key'])
            return (var.get('SymbolRegistry').get(var.get('key')) if var.get('has')(var.get('SymbolRegistry'), var.put('key', Js(''), '+')) else var.get('SymbolRegistry').put(var.get('key'), var.get('$Symbol')(var.get('key'))))
        PyJs__for_838_._set_name('_for')
        @Js
        def PyJs_keyFor_839_(sym, this, arguments, var=var):
            var = Scope({'sym':sym, 'this':this, 'arguments':arguments, 'keyFor':PyJs_keyFor_839_}, var)
            var.registers(['sym', 'key'])
            if var.get('isSymbol')(var.get('sym')).neg():
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('sym')+Js(' is not a symbol!'))))
                raise PyJsTempException
            for PyJsTemp in var.get('SymbolRegistry'):
                var.put('key', PyJsTemp)
                if PyJsStrictEq(var.get('SymbolRegistry').get(var.get('key')),var.get('sym')):
                    return var.get('key')
        PyJs_keyFor_839_._set_name('keyFor')
        @Js
        def PyJs_useSetter_840_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'useSetter':PyJs_useSetter_840_}, var)
            var.registers([])
            var.put('setter', Js(True))
        PyJs_useSetter_840_._set_name('useSetter')
        @Js
        def PyJs_useSimple_841_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'useSimple':PyJs_useSimple_841_}, var)
            var.registers([])
            var.put('setter', Js(False))
        PyJs_useSimple_841_._set_name('useSimple')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('USE_NATIVE').neg())), Js('Symbol'), Js({'for':PyJs__for_838_,'keyFor':PyJs_keyFor_839_,'useSetter':PyJs_useSetter_840_,'useSimple':PyJs_useSimple_841_}))
        def PyJs_LONG_842_(var=var):
            return var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('USE_NATIVE').neg())), Js('Object'), Js({'create':var.get('$create'),'defineProperty':var.get('$defineProperty'),'defineProperties':var.get('$defineProperties'),'getOwnPropertyDescriptor':var.get('$getOwnPropertyDescriptor'),'getOwnPropertyNames':var.get('$getOwnPropertyNames'),'getOwnPropertySymbols':var.get('$getOwnPropertySymbols')}))
        PyJs_LONG_842_()
        @Js
        def PyJs_anonymous_843_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('$GOPS').callprop('f', Js(1.0))
        PyJs_anonymous_843_._set_name('anonymous')
        var.put('FAILS_ON_PRIMITIVES', var.get('$fails')(PyJs_anonymous_843_))
        @Js
        def PyJs_getOwnPropertySymbols_844_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'getOwnPropertySymbols':PyJs_getOwnPropertySymbols_844_}, var)
            var.registers(['it'])
            return var.get('$GOPS').callprop('f', var.get('toObject')(var.get('it')))
        PyJs_getOwnPropertySymbols_844_._set_name('getOwnPropertySymbols')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('FAILS_ON_PRIMITIVES'))), Js('Object'), Js({'getOwnPropertySymbols':PyJs_getOwnPropertySymbols_844_}))
        @Js
        def PyJs_anonymous_845_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['S'])
            var.put('S', var.get('$Symbol')())
            return (((var.get('_stringify')(Js([var.get('S')]))!=Js('[null]')) or (var.get('_stringify')(Js({'a':var.get('S')}))!=Js('{}'))) or (var.get('_stringify')(var.get('Object')(var.get('S')))!=Js('{}')))
        PyJs_anonymous_845_._set_name('anonymous')
        @Js
        def PyJs_stringify_846_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'stringify':PyJs_stringify_846_}, var)
            var.registers(['it', 'replacer', '$replacer', 'i', 'args'])
            var.put('args', Js([var.get('it')]))
            var.put('i', Js(1.0))
            pass
            while (var.get('arguments').get('length')>var.get('i')):
                var.get('args').callprop('push', var.get('arguments').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
            var.put('$replacer', var.put('replacer', var.get('args').get('1')))
            if ((var.get('isObject')(var.get('replacer')).neg() and PyJsStrictEq(var.get('it'),var.get('undefined'))) or var.get('isSymbol')(var.get('it'))):
                return var.get('undefined')
            if var.get('isArray')(var.get('replacer')).neg():
                @Js
                def PyJs_replacer_847_(key, value, this, arguments, var=var):
                    var = Scope({'key':key, 'value':value, 'this':this, 'arguments':arguments, 'replacer':PyJs_replacer_847_}, var)
                    var.registers(['value', 'key'])
                    if (var.get('$replacer',throw=False).typeof()==Js('function')):
                        var.put('value', var.get('$replacer').callprop('call', var.get(u"this"), var.get('key'), var.get('value')))
                    if var.get('isSymbol')(var.get('value')).neg():
                        return var.get('value')
                PyJs_replacer_847_._set_name('replacer')
                var.put('replacer', PyJs_replacer_847_)
            var.get('args').put('1', var.get('replacer'))
            return var.get('_stringify').callprop('apply', var.get('$JSON'), var.get('args'))
        PyJs_stringify_846_._set_name('stringify')
        (var.get('$JSON') and var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*(var.get('USE_NATIVE').neg() or var.get('$fails')(PyJs_anonymous_845_)))), Js('JSON'), Js({'stringify':PyJs_stringify_846_})))
        (var.get('$Symbol').get(var.get('PROTOTYPE')).get(var.get('TO_PRIMITIVE')) or var.get('require')(Js('./_hide'))(var.get('$Symbol').get(var.get('PROTOTYPE')), var.get('TO_PRIMITIVE'), var.get('$Symbol').get(var.get('PROTOTYPE')).get('valueOf')))
        var.get('setToStringTag')(var.get('$Symbol'), Js('Symbol'))
        var.get('setToStringTag')(var.get('Math'), Js('Math'), Js(True))
        var.get('setToStringTag')(var.get('global').get('JSON'), Js('JSON'), Js(True))
    PyJs_anonymous_820_._set_name('anonymous')
    @Js
    def PyJs_anonymous_848_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toLength', 'buffer', '$ArrayBuffer', 'toAbsoluteIndex', '$typed', '$export', 'VIEW', 'module', 'speciesConstructor', '$isView', '$DataView', 'ARRAY_BUFFER', 'exports', '$slice', 'ArrayBuffer', 'isObject', 'anObject'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$typed', var.get('require')(Js('./_typed')))
        var.put('buffer', var.get('require')(Js('./_typed-buffer')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('toAbsoluteIndex', var.get('require')(Js('./_to-absolute-index')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('ArrayBuffer', var.get('require')(Js('./_global')).get('ArrayBuffer'))
        var.put('speciesConstructor', var.get('require')(Js('./_species-constructor')))
        var.put('$ArrayBuffer', var.get('buffer').get('ArrayBuffer'))
        var.put('$DataView', var.get('buffer').get('DataView'))
        var.put('$isView', (var.get('$typed').get('ABV') and var.get('ArrayBuffer').get('isView')))
        var.put('$slice', var.get('$ArrayBuffer').get('prototype').get('slice'))
        var.put('VIEW', var.get('$typed').get('VIEW'))
        var.put('ARRAY_BUFFER', Js('ArrayBuffer'))
        var.get('$export')(((var.get('$export').get('G')+var.get('$export').get('W'))+(var.get('$export').get('F')*PyJsStrictNeq(var.get('ArrayBuffer'),var.get('$ArrayBuffer')))), Js({'ArrayBuffer':var.get('$ArrayBuffer')}))
        @Js
        def PyJs_isView_849_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'isView':PyJs_isView_849_}, var)
            var.registers(['it'])
            return ((var.get('$isView') and var.get('$isView')(var.get('it'))) or (var.get('isObject')(var.get('it')) and var.get('it').contains(var.get('VIEW'))))
        PyJs_isView_849_._set_name('isView')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('$typed').get('CONSTR').neg())), var.get('ARRAY_BUFFER'), Js({'isView':PyJs_isView_849_}))
        @Js
        def PyJs_anonymous_850_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('$ArrayBuffer').create(Js(2.0)).callprop('slice', Js(1.0), var.get('undefined')).get('byteLength').neg()
        PyJs_anonymous_850_._set_name('anonymous')
        @Js
        def PyJs_slice_851_(start, end, this, arguments, var=var):
            var = Scope({'start':start, 'end':end, 'this':this, 'arguments':arguments, 'slice':PyJs_slice_851_}, var)
            var.registers(['index', 'end', 'viewS', 'start', 'viewT', 'result', 'fin', 'first', 'len'])
            if (PyJsStrictNeq(var.get('$slice'),var.get('undefined')) and PyJsStrictEq(var.get('end'),var.get('undefined'))):
                return var.get('$slice').callprop('call', var.get('anObject')(var.get(u"this")), var.get('start'))
            var.put('len', var.get('anObject')(var.get(u"this")).get('byteLength'))
            var.put('first', var.get('toAbsoluteIndex')(var.get('start'), var.get('len')))
            var.put('fin', var.get('toAbsoluteIndex')((var.get('len') if PyJsStrictEq(var.get('end'),var.get('undefined')) else var.get('end')), var.get('len')))
            var.put('result', var.get('speciesConstructor')(var.get(u"this"), var.get('$ArrayBuffer')).create(var.get('toLength')((var.get('fin')-var.get('first')))))
            var.put('viewS', var.get('$DataView').create(var.get(u"this")))
            var.put('viewT', var.get('$DataView').create(var.get('result')))
            var.put('index', Js(0.0))
            while (var.get('first')<var.get('fin')):
                var.get('viewT').callprop('setUint8', (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1)), var.get('viewS').callprop('getUint8', (var.put('first',Js(var.get('first').to_number())+Js(1))-Js(1))))
            return var.get('result')
        PyJs_slice_851_._set_name('slice')
        var.get('$export')(((var.get('$export').get('P')+var.get('$export').get('U'))+(var.get('$export').get('F')*var.get('require')(Js('./_fails'))(PyJs_anonymous_850_))), var.get('ARRAY_BUFFER'), Js({'slice':PyJs_slice_851_}))
        var.get('require')(Js('./_set-species'))(var.get('ARRAY_BUFFER'))
    PyJs_anonymous_848_._set_name('anonymous')
    @Js
    def PyJs_anonymous_852_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(((var.get('$export').get('G')+var.get('$export').get('W'))+(var.get('$export').get('F')*var.get('require')(Js('./_typed')).get('ABV').neg())), Js({'DataView':var.get('require')(Js('./_typed-buffer')).get('DataView')}))
    PyJs_anonymous_852_._set_name('anonymous')
    @Js
    def PyJs_anonymous_853_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_854_(init, this, arguments, var=var):
            var = Scope({'init':init, 'this':this, 'arguments':arguments}, var)
            var.registers(['init'])
            @Js
            def PyJs_Float32Array_855_(data, byteOffset, length, this, arguments, var=var):
                var = Scope({'data':data, 'byteOffset':byteOffset, 'length':length, 'this':this, 'arguments':arguments, 'Float32Array':PyJs_Float32Array_855_}, var)
                var.registers(['byteOffset', 'length', 'data'])
                return var.get('init')(var.get(u"this"), var.get('data'), var.get('byteOffset'), var.get('length'))
            PyJs_Float32Array_855_._set_name('Float32Array')
            return PyJs_Float32Array_855_
        PyJs_anonymous_854_._set_name('anonymous')
        var.get('require')(Js('./_typed-array'))(Js('Float32'), Js(4.0), PyJs_anonymous_854_)
    PyJs_anonymous_853_._set_name('anonymous')
    @Js
    def PyJs_anonymous_856_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_857_(init, this, arguments, var=var):
            var = Scope({'init':init, 'this':this, 'arguments':arguments}, var)
            var.registers(['init'])
            @Js
            def PyJs_Float64Array_858_(data, byteOffset, length, this, arguments, var=var):
                var = Scope({'data':data, 'byteOffset':byteOffset, 'length':length, 'this':this, 'arguments':arguments, 'Float64Array':PyJs_Float64Array_858_}, var)
                var.registers(['byteOffset', 'length', 'data'])
                return var.get('init')(var.get(u"this"), var.get('data'), var.get('byteOffset'), var.get('length'))
            PyJs_Float64Array_858_._set_name('Float64Array')
            return PyJs_Float64Array_858_
        PyJs_anonymous_857_._set_name('anonymous')
        var.get('require')(Js('./_typed-array'))(Js('Float64'), Js(8.0), PyJs_anonymous_857_)
    PyJs_anonymous_856_._set_name('anonymous')
    @Js
    def PyJs_anonymous_859_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_860_(init, this, arguments, var=var):
            var = Scope({'init':init, 'this':this, 'arguments':arguments}, var)
            var.registers(['init'])
            @Js
            def PyJs_Int16Array_861_(data, byteOffset, length, this, arguments, var=var):
                var = Scope({'data':data, 'byteOffset':byteOffset, 'length':length, 'this':this, 'arguments':arguments, 'Int16Array':PyJs_Int16Array_861_}, var)
                var.registers(['byteOffset', 'length', 'data'])
                return var.get('init')(var.get(u"this"), var.get('data'), var.get('byteOffset'), var.get('length'))
            PyJs_Int16Array_861_._set_name('Int16Array')
            return PyJs_Int16Array_861_
        PyJs_anonymous_860_._set_name('anonymous')
        var.get('require')(Js('./_typed-array'))(Js('Int16'), Js(2.0), PyJs_anonymous_860_)
    PyJs_anonymous_859_._set_name('anonymous')
    @Js
    def PyJs_anonymous_862_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_863_(init, this, arguments, var=var):
            var = Scope({'init':init, 'this':this, 'arguments':arguments}, var)
            var.registers(['init'])
            @Js
            def PyJs_Int32Array_864_(data, byteOffset, length, this, arguments, var=var):
                var = Scope({'data':data, 'byteOffset':byteOffset, 'length':length, 'this':this, 'arguments':arguments, 'Int32Array':PyJs_Int32Array_864_}, var)
                var.registers(['byteOffset', 'length', 'data'])
                return var.get('init')(var.get(u"this"), var.get('data'), var.get('byteOffset'), var.get('length'))
            PyJs_Int32Array_864_._set_name('Int32Array')
            return PyJs_Int32Array_864_
        PyJs_anonymous_863_._set_name('anonymous')
        var.get('require')(Js('./_typed-array'))(Js('Int32'), Js(4.0), PyJs_anonymous_863_)
    PyJs_anonymous_862_._set_name('anonymous')
    @Js
    def PyJs_anonymous_865_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_866_(init, this, arguments, var=var):
            var = Scope({'init':init, 'this':this, 'arguments':arguments}, var)
            var.registers(['init'])
            @Js
            def PyJs_Int8Array_867_(data, byteOffset, length, this, arguments, var=var):
                var = Scope({'data':data, 'byteOffset':byteOffset, 'length':length, 'this':this, 'arguments':arguments, 'Int8Array':PyJs_Int8Array_867_}, var)
                var.registers(['byteOffset', 'length', 'data'])
                return var.get('init')(var.get(u"this"), var.get('data'), var.get('byteOffset'), var.get('length'))
            PyJs_Int8Array_867_._set_name('Int8Array')
            return PyJs_Int8Array_867_
        PyJs_anonymous_866_._set_name('anonymous')
        var.get('require')(Js('./_typed-array'))(Js('Int8'), Js(1.0), PyJs_anonymous_866_)
    PyJs_anonymous_865_._set_name('anonymous')
    @Js
    def PyJs_anonymous_868_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_869_(init, this, arguments, var=var):
            var = Scope({'init':init, 'this':this, 'arguments':arguments}, var)
            var.registers(['init'])
            @Js
            def PyJs_Uint16Array_870_(data, byteOffset, length, this, arguments, var=var):
                var = Scope({'data':data, 'byteOffset':byteOffset, 'length':length, 'this':this, 'arguments':arguments, 'Uint16Array':PyJs_Uint16Array_870_}, var)
                var.registers(['byteOffset', 'length', 'data'])
                return var.get('init')(var.get(u"this"), var.get('data'), var.get('byteOffset'), var.get('length'))
            PyJs_Uint16Array_870_._set_name('Uint16Array')
            return PyJs_Uint16Array_870_
        PyJs_anonymous_869_._set_name('anonymous')
        var.get('require')(Js('./_typed-array'))(Js('Uint16'), Js(2.0), PyJs_anonymous_869_)
    PyJs_anonymous_868_._set_name('anonymous')
    @Js
    def PyJs_anonymous_871_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_872_(init, this, arguments, var=var):
            var = Scope({'init':init, 'this':this, 'arguments':arguments}, var)
            var.registers(['init'])
            @Js
            def PyJs_Uint32Array_873_(data, byteOffset, length, this, arguments, var=var):
                var = Scope({'data':data, 'byteOffset':byteOffset, 'length':length, 'this':this, 'arguments':arguments, 'Uint32Array':PyJs_Uint32Array_873_}, var)
                var.registers(['byteOffset', 'length', 'data'])
                return var.get('init')(var.get(u"this"), var.get('data'), var.get('byteOffset'), var.get('length'))
            PyJs_Uint32Array_873_._set_name('Uint32Array')
            return PyJs_Uint32Array_873_
        PyJs_anonymous_872_._set_name('anonymous')
        var.get('require')(Js('./_typed-array'))(Js('Uint32'), Js(4.0), PyJs_anonymous_872_)
    PyJs_anonymous_871_._set_name('anonymous')
    @Js
    def PyJs_anonymous_874_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_875_(init, this, arguments, var=var):
            var = Scope({'init':init, 'this':this, 'arguments':arguments}, var)
            var.registers(['init'])
            @Js
            def PyJs_Uint8Array_876_(data, byteOffset, length, this, arguments, var=var):
                var = Scope({'data':data, 'byteOffset':byteOffset, 'length':length, 'this':this, 'arguments':arguments, 'Uint8Array':PyJs_Uint8Array_876_}, var)
                var.registers(['byteOffset', 'length', 'data'])
                return var.get('init')(var.get(u"this"), var.get('data'), var.get('byteOffset'), var.get('length'))
            PyJs_Uint8Array_876_._set_name('Uint8Array')
            return PyJs_Uint8Array_876_
        PyJs_anonymous_875_._set_name('anonymous')
        var.get('require')(Js('./_typed-array'))(Js('Uint8'), Js(1.0), PyJs_anonymous_875_)
    PyJs_anonymous_874_._set_name('anonymous')
    @Js
    def PyJs_anonymous_877_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_878_(init, this, arguments, var=var):
            var = Scope({'init':init, 'this':this, 'arguments':arguments}, var)
            var.registers(['init'])
            @Js
            def PyJs_Uint8ClampedArray_879_(data, byteOffset, length, this, arguments, var=var):
                var = Scope({'data':data, 'byteOffset':byteOffset, 'length':length, 'this':this, 'arguments':arguments, 'Uint8ClampedArray':PyJs_Uint8ClampedArray_879_}, var)
                var.registers(['byteOffset', 'length', 'data'])
                return var.get('init')(var.get(u"this"), var.get('data'), var.get('byteOffset'), var.get('length'))
            PyJs_Uint8ClampedArray_879_._set_name('Uint8ClampedArray')
            return PyJs_Uint8ClampedArray_879_
        PyJs_anonymous_878_._set_name('anonymous')
        var.get('require')(Js('./_typed-array'))(Js('Uint8'), Js(1.0), PyJs_anonymous_878_, Js(True))
    PyJs_anonymous_877_._set_name('anonymous')
    @Js
    def PyJs_anonymous_880_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['getWeak', 'methods', 'InternalMap', 'NATIVE_WEAK_MAP', 'assign', 'each', 'validate', 'wrapper', 'weak', 'require', '$WeakMap', 'redefine', 'meta', 'isExtensible', 'IS_IE11', 'module', 'global', 'WEAK_MAP', 'uncaughtFrozenStore', 'exports', 'isObject'])
        Js('use strict')
        var.put('global', var.get('require')(Js('./_global')))
        var.put('each', var.get('require')(Js('./_array-methods'))(Js(0.0)))
        var.put('redefine', var.get('require')(Js('./_redefine')))
        var.put('meta', var.get('require')(Js('./_meta')))
        var.put('assign', var.get('require')(Js('./_object-assign')))
        var.put('weak', var.get('require')(Js('./_collection-weak')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('validate', var.get('require')(Js('./_validate-collection')))
        var.put('NATIVE_WEAK_MAP', var.get('require')(Js('./_validate-collection')))
        var.put('IS_IE11', (var.get('global').get('ActiveXObject').neg() and var.get('global').contains(Js('ActiveXObject'))))
        var.put('WEAK_MAP', Js('WeakMap'))
        var.put('getWeak', var.get('meta').get('getWeak'))
        var.put('isExtensible', var.get('Object').get('isExtensible'))
        var.put('uncaughtFrozenStore', var.get('weak').get('ufstore'))
        pass
        @Js
        def PyJs_wrapper_881_(get, this, arguments, var=var):
            var = Scope({'get':get, 'this':this, 'arguments':arguments, 'wrapper':PyJs_wrapper_881_}, var)
            var.registers(['get'])
            @Js
            def PyJs_WeakMap_882_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'WeakMap':PyJs_WeakMap_882_}, var)
                var.registers([])
                return var.get('get')(var.get(u"this"), (var.get('arguments').get('0') if (var.get('arguments').get('length')>Js(0.0)) else var.get('undefined')))
            PyJs_WeakMap_882_._set_name('WeakMap')
            return PyJs_WeakMap_882_
        PyJs_wrapper_881_._set_name('wrapper')
        var.put('wrapper', PyJs_wrapper_881_)
        @Js
        def PyJs_get_883_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments, 'get':PyJs_get_883_}, var)
            var.registers(['data', 'key'])
            if var.get('isObject')(var.get('key')):
                var.put('data', var.get('getWeak')(var.get('key')))
                if PyJsStrictEq(var.get('data'),Js(True)):
                    return var.get('uncaughtFrozenStore')(var.get('validate')(var.get(u"this"), var.get('WEAK_MAP'))).callprop('get', var.get('key'))
                return (var.get('data').get(var.get(u"this").get('_i')) if var.get('data') else var.get('undefined'))
        PyJs_get_883_._set_name('get')
        @Js
        def PyJs_set_884_(key, value, this, arguments, var=var):
            var = Scope({'key':key, 'value':value, 'this':this, 'arguments':arguments, 'set':PyJs_set_884_}, var)
            var.registers(['value', 'key'])
            return var.get('weak').callprop('def', var.get('validate')(var.get(u"this"), var.get('WEAK_MAP')), var.get('key'), var.get('value'))
        PyJs_set_884_._set_name('set')
        var.put('methods', Js({'get':PyJs_get_883_,'set':PyJs_set_884_}))
        var.put('$WeakMap', var.get('module').put('exports', var.get('require')(Js('./_collection'))(var.get('WEAK_MAP'), var.get('wrapper'), var.get('methods'), var.get('weak'), Js(True), Js(True))))
        if (var.get('NATIVE_WEAK_MAP') and var.get('IS_IE11')):
            var.put('InternalMap', var.get('weak').callprop('getConstructor', var.get('wrapper'), var.get('WEAK_MAP')))
            var.get('assign')(var.get('InternalMap').get('prototype'), var.get('methods'))
            var.get('meta').put('NEED', Js(True))
            @Js
            def PyJs_anonymous_885_(key, this, arguments, var=var):
                var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                var.registers(['method', 'proto', 'key'])
                var.put('proto', var.get('$WeakMap').get('prototype'))
                var.put('method', var.get('proto').get(var.get('key')))
                @Js
                def PyJs_anonymous_886_(a, b, this, arguments, var=var):
                    var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments}, var)
                    var.registers(['result', 'a', 'b'])
                    if (var.get('isObject')(var.get('a')) and var.get('isExtensible')(var.get('a')).neg()):
                        if var.get(u"this").get('_f').neg():
                            var.get(u"this").put('_f', var.get('InternalMap').create())
                        var.put('result', var.get(u"this").get('_f').callprop(var.get('key'), var.get('a'), var.get('b')))
                        return (var.get(u"this") if (var.get('key')==Js('set')) else var.get('result'))
                    return var.get('method').callprop('call', var.get(u"this"), var.get('a'), var.get('b'))
                PyJs_anonymous_886_._set_name('anonymous')
                var.get('redefine')(var.get('proto'), var.get('key'), PyJs_anonymous_886_)
            PyJs_anonymous_885_._set_name('anonymous')
            var.get('each')(Js([Js('delete'), Js('has'), Js('get'), Js('set')]), PyJs_anonymous_885_)
    PyJs_anonymous_880_._set_name('anonymous')
    @Js
    def PyJs_anonymous_887_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['WEAK_SET', 'require', 'exports', 'module', 'validate', 'weak'])
        Js('use strict')
        var.put('weak', var.get('require')(Js('./_collection-weak')))
        var.put('validate', var.get('require')(Js('./_validate-collection')))
        var.put('WEAK_SET', Js('WeakSet'))
        @Js
        def PyJs_anonymous_888_(get, this, arguments, var=var):
            var = Scope({'get':get, 'this':this, 'arguments':arguments}, var)
            var.registers(['get'])
            @Js
            def PyJs_WeakSet_889_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'WeakSet':PyJs_WeakSet_889_}, var)
                var.registers([])
                return var.get('get')(var.get(u"this"), (var.get('arguments').get('0') if (var.get('arguments').get('length')>Js(0.0)) else var.get('undefined')))
            PyJs_WeakSet_889_._set_name('WeakSet')
            return PyJs_WeakSet_889_
        PyJs_anonymous_888_._set_name('anonymous')
        @Js
        def PyJs_add_890_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments, 'add':PyJs_add_890_}, var)
            var.registers(['value'])
            return var.get('weak').callprop('def', var.get('validate')(var.get(u"this"), var.get('WEAK_SET')), var.get('value'), Js(True))
        PyJs_add_890_._set_name('add')
        var.get('require')(Js('./_collection'))(var.get('WEAK_SET'), PyJs_anonymous_888_, Js({'add':PyJs_add_890_}), var.get('weak'), Js(False), Js(True))
    PyJs_anonymous_887_._set_name('anonymous')
    @Js
    def PyJs_anonymous_891_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['aFunction', 'require', 'toLength', 'toObject', '$export', 'flattenIntoArray', 'exports', 'module', 'arraySpeciesCreate'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('flattenIntoArray', var.get('require')(Js('./_flatten-into-array')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('arraySpeciesCreate', var.get('require')(Js('./_array-species-create')))
        @Js
        def PyJs_flatMap_892_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'flatMap':PyJs_flatMap_892_}, var)
            var.registers(['O', 'callbackfn', 'sourceLen', 'A'])
            var.put('O', var.get('toObject')(var.get(u"this")))
            pass
            var.get('aFunction')(var.get('callbackfn'))
            var.put('sourceLen', var.get('toLength')(var.get('O').get('length')))
            var.put('A', var.get('arraySpeciesCreate')(var.get('O'), Js(0.0)))
            var.get('flattenIntoArray')(var.get('A'), var.get('O'), var.get('O'), var.get('sourceLen'), Js(0.0), Js(1.0), var.get('callbackfn'), var.get('arguments').get('1'))
            return var.get('A')
        PyJs_flatMap_892_._set_name('flatMap')
        var.get('$export')(var.get('$export').get('P'), Js('Array'), Js({'flatMap':PyJs_flatMap_892_}))
        var.get('require')(Js('./_add-to-unscopables'))(Js('flatMap'))
    PyJs_anonymous_891_._set_name('anonymous')
    @Js
    def PyJs_anonymous_893_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toLength', 'toObject', '$export', 'flattenIntoArray', 'exports', 'module', 'arraySpeciesCreate', 'toInteger'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('flattenIntoArray', var.get('require')(Js('./_flatten-into-array')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('arraySpeciesCreate', var.get('require')(Js('./_array-species-create')))
        @Js
        def PyJs_flatten_894_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'flatten':PyJs_flatten_894_}, var)
            var.registers(['O', 'sourceLen', 'depthArg', 'A'])
            var.put('depthArg', var.get('arguments').get('0'))
            var.put('O', var.get('toObject')(var.get(u"this")))
            var.put('sourceLen', var.get('toLength')(var.get('O').get('length')))
            var.put('A', var.get('arraySpeciesCreate')(var.get('O'), Js(0.0)))
            var.get('flattenIntoArray')(var.get('A'), var.get('O'), var.get('O'), var.get('sourceLen'), Js(0.0), (Js(1.0) if PyJsStrictEq(var.get('depthArg'),var.get('undefined')) else var.get('toInteger')(var.get('depthArg'))))
            return var.get('A')
        PyJs_flatten_894_._set_name('flatten')
        var.get('$export')(var.get('$export').get('P'), Js('Array'), Js({'flatten':PyJs_flatten_894_}))
        var.get('require')(Js('./_add-to-unscopables'))(Js('flatten'))
    PyJs_anonymous_893_._set_name('anonymous')
    @Js
    def PyJs_anonymous_895_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$export', 'exports', '$includes', 'module'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$includes', var.get('require')(Js('./_array-includes'))(Js(True)))
        @Js
        def PyJs_includes_896_(el, this, arguments, var=var):
            var = Scope({'el':el, 'this':this, 'arguments':arguments, 'includes':PyJs_includes_896_}, var)
            var.registers(['el'])
            return var.get('$includes')(var.get(u"this"), var.get('el'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
        PyJs_includes_896_._set_name('includes')
        var.get('$export')(var.get('$export').get('P'), Js('Array'), Js({'includes':PyJs_includes_896_}))
        var.get('require')(Js('./_add-to-unscopables'))(Js('includes'))
    PyJs_anonymous_895_._set_name('anonymous')
    @Js
    def PyJs_anonymous_897_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['isNode', 'require', '$export', 'exports', 'module', 'microtask', 'process'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('microtask', var.get('require')(Js('./_microtask'))())
        var.put('process', var.get('require')(Js('./_global')).get('process'))
        var.put('isNode', (var.get('require')(Js('./_cof'))(var.get('process'))==Js('process')))
        @Js
        def PyJs_asap_898_(fn, this, arguments, var=var):
            var = Scope({'fn':fn, 'this':this, 'arguments':arguments, 'asap':PyJs_asap_898_}, var)
            var.registers(['fn', 'domain'])
            var.put('domain', (var.get('isNode') and var.get('process').get('domain')))
            var.get('microtask')((var.get('domain').callprop('bind', var.get('fn')) if var.get('domain') else var.get('fn')))
        PyJs_asap_898_._set_name('asap')
        var.get('$export')(var.get('$export').get('G'), Js({'asap':PyJs_asap_898_}))
    PyJs_anonymous_897_._set_name('anonymous')
    @Js
    def PyJs_anonymous_899_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$export', 'exports', 'cof', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('cof', var.get('require')(Js('./_cof')))
        @Js
        def PyJs_isError_900_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'isError':PyJs_isError_900_}, var)
            var.registers(['it'])
            return PyJsStrictEq(var.get('cof')(var.get('it')),Js('Error'))
        PyJs_isError_900_._set_name('isError')
        var.get('$export')(var.get('$export').get('S'), Js('Error'), Js({'isError':PyJs_isError_900_}))
    PyJs_anonymous_899_._set_name('anonymous')
    @Js
    def PyJs_anonymous_901_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('G'), Js({'global':var.get('require')(Js('./_global'))}))
    PyJs_anonymous_901_._set_name('anonymous')
    @Js
    def PyJs_anonymous_902_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('require')(Js('./_set-collection-from'))(Js('Map'))
    PyJs_anonymous_902_._set_name('anonymous')
    @Js
    def PyJs_anonymous_903_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('require')(Js('./_set-collection-of'))(Js('Map'))
    PyJs_anonymous_903_._set_name('anonymous')
    @Js
    def PyJs_anonymous_904_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')((var.get('$export').get('P')+var.get('$export').get('R')), Js('Map'), Js({'toJSON':var.get('require')(Js('./_collection-to-json'))(Js('Map'))}))
    PyJs_anonymous_904_._set_name('anonymous')
    @Js
    def PyJs_anonymous_905_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_clamp_906_(x, lower, upper, this, arguments, var=var):
            var = Scope({'x':x, 'lower':lower, 'upper':upper, 'this':this, 'arguments':arguments, 'clamp':PyJs_clamp_906_}, var)
            var.registers(['upper', 'x', 'lower'])
            return var.get('Math').callprop('min', var.get('upper'), var.get('Math').callprop('max', var.get('lower'), var.get('x')))
        PyJs_clamp_906_._set_name('clamp')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'clamp':PyJs_clamp_906_}))
    PyJs_anonymous_905_._set_name('anonymous')
    @Js
    def PyJs_anonymous_907_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'DEG_PER_RAD':(var.get('Math').get('PI')/Js(180.0))}))
    PyJs_anonymous_907_._set_name('anonymous')
    @Js
    def PyJs_anonymous_908_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$export', 'exports', 'module', 'RAD_PER_DEG'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('RAD_PER_DEG', (Js(180.0)/var.get('Math').get('PI')))
        @Js
        def PyJs_degrees_909_(radians, this, arguments, var=var):
            var = Scope({'radians':radians, 'this':this, 'arguments':arguments, 'degrees':PyJs_degrees_909_}, var)
            var.registers(['radians'])
            return (var.get('radians')*var.get('RAD_PER_DEG'))
        PyJs_degrees_909_._set_name('degrees')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'degrees':PyJs_degrees_909_}))
    PyJs_anonymous_908_._set_name('anonymous')
    @Js
    def PyJs_anonymous_910_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'fround', '$export', 'exports', 'module', 'scale'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('scale', var.get('require')(Js('./_math-scale')))
        var.put('fround', var.get('require')(Js('./_math-fround')))
        @Js
        def PyJs_fscale_911_(x, inLow, inHigh, outLow, outHigh, this, arguments, var=var):
            var = Scope({'x':x, 'inLow':inLow, 'inHigh':inHigh, 'outLow':outLow, 'outHigh':outHigh, 'this':this, 'arguments':arguments, 'fscale':PyJs_fscale_911_}, var)
            var.registers(['outLow', 'x', 'inLow', 'inHigh', 'outHigh'])
            return var.get('fround')(var.get('scale')(var.get('x'), var.get('inLow'), var.get('inHigh'), var.get('outLow'), var.get('outHigh')))
        PyJs_fscale_911_._set_name('fscale')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'fscale':PyJs_fscale_911_}))
    PyJs_anonymous_910_._set_name('anonymous')
    @Js
    def PyJs_anonymous_912_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_iaddh_913_(x0, x1, y0, y1, this, arguments, var=var):
            var = Scope({'x0':x0, 'x1':x1, 'y0':y0, 'y1':y1, 'this':this, 'arguments':arguments, 'iaddh':PyJs_iaddh_913_}, var)
            var.registers(['x0', 'x1', 'y1', '$x0', '$y0', '$x1', 'y0'])
            var.put('$x0', PyJsBshift(var.get('x0'),Js(0.0)))
            var.put('$x1', PyJsBshift(var.get('x1'),Js(0.0)))
            var.put('$y0', PyJsBshift(var.get('y0'),Js(0.0)))
            return (((var.get('$x1')+PyJsBshift(var.get('y1'),Js(0.0)))+PyJsBshift(((var.get('$x0')&var.get('$y0'))|((var.get('$x0')|var.get('$y0'))&(~PyJsBshift((var.get('$x0')+var.get('$y0')),Js(0.0))))),Js(31.0)))|Js(0.0))
        PyJs_iaddh_913_._set_name('iaddh')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'iaddh':PyJs_iaddh_913_}))
    PyJs_anonymous_912_._set_name('anonymous')
    @Js
    def PyJs_anonymous_914_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_imulh_915_(u, v, this, arguments, var=var):
            var = Scope({'u':u, 'v':v, 'this':this, 'arguments':arguments, 'imulh':PyJs_imulh_915_}, var)
            var.registers(['$v', 'v0', 'u', 't', 'u0', 'UINT16', 'u1', '$u', 'v1', 'v'])
            var.put('UINT16', Js(65535))
            var.put('$u', (+var.get('u')))
            var.put('$v', (+var.get('v')))
            var.put('u0', (var.get('$u')&var.get('UINT16')))
            var.put('v0', (var.get('$v')&var.get('UINT16')))
            var.put('u1', (var.get('$u')>>Js(16.0)))
            var.put('v1', (var.get('$v')>>Js(16.0)))
            var.put('t', (PyJsBshift((var.get('u1')*var.get('v0')),Js(0.0))+PyJsBshift((var.get('u0')*var.get('v0')),Js(16.0))))
            return (((var.get('u1')*var.get('v1'))+(var.get('t')>>Js(16.0)))+((PyJsBshift((var.get('u0')*var.get('v1')),Js(0.0))+(var.get('t')&var.get('UINT16')))>>Js(16.0)))
        PyJs_imulh_915_._set_name('imulh')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'imulh':PyJs_imulh_915_}))
    PyJs_anonymous_914_._set_name('anonymous')
    @Js
    def PyJs_anonymous_916_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_isubh_917_(x0, x1, y0, y1, this, arguments, var=var):
            var = Scope({'x0':x0, 'x1':x1, 'y0':y0, 'y1':y1, 'this':this, 'arguments':arguments, 'isubh':PyJs_isubh_917_}, var)
            var.registers(['x0', 'x1', 'y1', '$x0', '$y0', '$x1', 'y0'])
            var.put('$x0', PyJsBshift(var.get('x0'),Js(0.0)))
            var.put('$x1', PyJsBshift(var.get('x1'),Js(0.0)))
            var.put('$y0', PyJsBshift(var.get('y0'),Js(0.0)))
            return (((var.get('$x1')-PyJsBshift(var.get('y1'),Js(0.0)))-PyJsBshift((((~var.get('$x0'))&var.get('$y0'))|((~(var.get('$x0')^var.get('$y0')))&PyJsBshift((var.get('$x0')-var.get('$y0')),Js(0.0)))),Js(31.0)))|Js(0.0))
        PyJs_isubh_917_._set_name('isubh')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'isubh':PyJs_isubh_917_}))
    PyJs_anonymous_916_._set_name('anonymous')
    @Js
    def PyJs_anonymous_918_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'RAD_PER_DEG':(Js(180.0)/var.get('Math').get('PI'))}))
    PyJs_anonymous_918_._set_name('anonymous')
    @Js
    def PyJs_anonymous_919_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$export', 'exports', 'module', 'DEG_PER_RAD'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('DEG_PER_RAD', (var.get('Math').get('PI')/Js(180.0)))
        @Js
        def PyJs_radians_920_(degrees, this, arguments, var=var):
            var = Scope({'degrees':degrees, 'this':this, 'arguments':arguments, 'radians':PyJs_radians_920_}, var)
            var.registers(['degrees'])
            return (var.get('degrees')*var.get('DEG_PER_RAD'))
        PyJs_radians_920_._set_name('radians')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'radians':PyJs_radians_920_}))
    PyJs_anonymous_919_._set_name('anonymous')
    @Js
    def PyJs_anonymous_921_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'scale':var.get('require')(Js('./_math-scale'))}))
    PyJs_anonymous_921_._set_name('anonymous')
    @Js
    def PyJs_anonymous_922_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_signbit_923_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'signbit':PyJs_signbit_923_}, var)
            var.registers(['x'])
            return (var.get('x') if (var.put('x', (+var.get('x')))!=var.get('x')) else (((Js(1.0)/var.get('x'))==var.get('Infinity')) if (var.get('x')==Js(0.0)) else (var.get('x')>Js(0.0))))
        PyJs_signbit_923_._set_name('signbit')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'signbit':PyJs_signbit_923_}))
    PyJs_anonymous_922_._set_name('anonymous')
    @Js
    def PyJs_anonymous_924_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_umulh_925_(u, v, this, arguments, var=var):
            var = Scope({'u':u, 'v':v, 'this':this, 'arguments':arguments, 'umulh':PyJs_umulh_925_}, var)
            var.registers(['$v', 'v0', 'u', 't', 'u0', 'UINT16', 'u1', '$u', 'v1', 'v'])
            var.put('UINT16', Js(65535))
            var.put('$u', (+var.get('u')))
            var.put('$v', (+var.get('v')))
            var.put('u0', (var.get('$u')&var.get('UINT16')))
            var.put('v0', (var.get('$v')&var.get('UINT16')))
            var.put('u1', PyJsBshift(var.get('$u'),Js(16.0)))
            var.put('v1', PyJsBshift(var.get('$v'),Js(16.0)))
            var.put('t', (PyJsBshift((var.get('u1')*var.get('v0')),Js(0.0))+PyJsBshift((var.get('u0')*var.get('v0')),Js(16.0))))
            return (((var.get('u1')*var.get('v1'))+PyJsBshift(var.get('t'),Js(16.0)))+PyJsBshift((PyJsBshift((var.get('u0')*var.get('v1')),Js(0.0))+(var.get('t')&var.get('UINT16'))),Js(16.0)))
        PyJs_umulh_925_._set_name('umulh')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'umulh':PyJs_umulh_925_}))
    PyJs_anonymous_924_._set_name('anonymous')
    @Js
    def PyJs_anonymous_926_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['aFunction', 'require', '$defineProperty', 'toObject', '$export', 'exports', 'module'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('$defineProperty', var.get('require')(Js('./_object-dp')))
        @Js
        def PyJs___defineGetter___927_(P, getter, this, arguments, var=var):
            var = Scope({'P':P, 'getter':getter, 'this':this, 'arguments':arguments, '__defineGetter__':PyJs___defineGetter___927_}, var)
            var.registers(['getter', 'P'])
            var.get('$defineProperty').callprop('f', var.get('toObject')(var.get(u"this")), var.get('P'), Js({'get':var.get('aFunction')(var.get('getter')),'enumerable':Js(True),'configurable':Js(True)}))
        PyJs___defineGetter___927_._set_name('__defineGetter__')
        (var.get('require')(Js('./_descriptors')) and var.get('$export')((var.get('$export').get('P')+var.get('require')(Js('./_object-forced-pam'))), Js('Object'), Js({'__defineGetter__':PyJs___defineGetter___927_})))
    PyJs_anonymous_926_._set_name('anonymous')
    @Js
    def PyJs_anonymous_928_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['aFunction', 'require', '$defineProperty', 'toObject', '$export', 'exports', 'module'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('$defineProperty', var.get('require')(Js('./_object-dp')))
        @Js
        def PyJs___defineSetter___929_(P, setter, this, arguments, var=var):
            var = Scope({'P':P, 'setter':setter, 'this':this, 'arguments':arguments, '__defineSetter__':PyJs___defineSetter___929_}, var)
            var.registers(['setter', 'P'])
            var.get('$defineProperty').callprop('f', var.get('toObject')(var.get(u"this")), var.get('P'), Js({'set':var.get('aFunction')(var.get('setter')),'enumerable':Js(True),'configurable':Js(True)}))
        PyJs___defineSetter___929_._set_name('__defineSetter__')
        (var.get('require')(Js('./_descriptors')) and var.get('$export')((var.get('$export').get('P')+var.get('require')(Js('./_object-forced-pam'))), Js('Object'), Js({'__defineSetter__':PyJs___defineSetter___929_})))
    PyJs_anonymous_928_._set_name('anonymous')
    @Js
    def PyJs_anonymous_930_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$entries', 'require', '$export', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$entries', var.get('require')(Js('./_object-to-array'))(Js(True)))
        @Js
        def PyJs_entries_931_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'entries':PyJs_entries_931_}, var)
            var.registers(['it'])
            return var.get('$entries')(var.get('it'))
        PyJs_entries_931_._set_name('entries')
        var.get('$export')(var.get('$export').get('S'), Js('Object'), Js({'entries':PyJs_entries_931_}))
    PyJs_anonymous_930_._set_name('anonymous')
    @Js
    def PyJs_anonymous_932_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toIObject', 'gOPD', 'ownKeys', '$export', 'exports', 'module', 'createProperty'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('ownKeys', var.get('require')(Js('./_own-keys')))
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('gOPD', var.get('require')(Js('./_object-gopd')))
        var.put('createProperty', var.get('require')(Js('./_create-property')))
        @Js
        def PyJs_getOwnPropertyDescriptors_933_(object, this, arguments, var=var):
            var = Scope({'object':object, 'this':this, 'arguments':arguments, 'getOwnPropertyDescriptors':PyJs_getOwnPropertyDescriptors_933_}, var)
            var.registers(['getDesc', 'object', 'i', 'desc', 'O', 'result', 'key', 'keys'])
            var.put('O', var.get('toIObject')(var.get('object')))
            var.put('getDesc', var.get('gOPD').get('f'))
            var.put('keys', var.get('ownKeys')(var.get('O')))
            var.put('result', Js({}))
            var.put('i', Js(0.0))
            pass
            while (var.get('keys').get('length')>var.get('i')):
                var.put('desc', var.get('getDesc')(var.get('O'), var.put('key', var.get('keys').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))))
                if PyJsStrictNeq(var.get('desc'),var.get('undefined')):
                    var.get('createProperty')(var.get('result'), var.get('key'), var.get('desc'))
            return var.get('result')
        PyJs_getOwnPropertyDescriptors_933_._set_name('getOwnPropertyDescriptors')
        var.get('$export')(var.get('$export').get('S'), Js('Object'), Js({'getOwnPropertyDescriptors':PyJs_getOwnPropertyDescriptors_933_}))
    PyJs_anonymous_932_._set_name('anonymous')
    @Js
    def PyJs_anonymous_934_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toPrimitive', 'toObject', '$export', 'exports', 'module', 'getPrototypeOf', 'getOwnPropertyDescriptor'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
        var.put('getPrototypeOf', var.get('require')(Js('./_object-gpo')))
        var.put('getOwnPropertyDescriptor', var.get('require')(Js('./_object-gopd')).get('f'))
        @Js
        def PyJs___lookupGetter___935_(P, this, arguments, var=var):
            var = Scope({'P':P, 'this':this, 'arguments':arguments, '__lookupGetter__':PyJs___lookupGetter___935_}, var)
            var.registers(['O', 'K', 'D', 'P'])
            var.put('O', var.get('toObject')(var.get(u"this")))
            var.put('K', var.get('toPrimitive')(var.get('P'), Js(True)))
            pass
            while 1:
                if var.put('D', var.get('getOwnPropertyDescriptor')(var.get('O'), var.get('K'))):
                    return var.get('D').get('get')
                if not var.put('O', var.get('getPrototypeOf')(var.get('O'))):
                    break
        PyJs___lookupGetter___935_._set_name('__lookupGetter__')
        (var.get('require')(Js('./_descriptors')) and var.get('$export')((var.get('$export').get('P')+var.get('require')(Js('./_object-forced-pam'))), Js('Object'), Js({'__lookupGetter__':PyJs___lookupGetter___935_})))
    PyJs_anonymous_934_._set_name('anonymous')
    @Js
    def PyJs_anonymous_936_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toPrimitive', 'toObject', '$export', 'exports', 'module', 'getPrototypeOf', 'getOwnPropertyDescriptor'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
        var.put('getPrototypeOf', var.get('require')(Js('./_object-gpo')))
        var.put('getOwnPropertyDescriptor', var.get('require')(Js('./_object-gopd')).get('f'))
        @Js
        def PyJs___lookupSetter___937_(P, this, arguments, var=var):
            var = Scope({'P':P, 'this':this, 'arguments':arguments, '__lookupSetter__':PyJs___lookupSetter___937_}, var)
            var.registers(['O', 'K', 'D', 'P'])
            var.put('O', var.get('toObject')(var.get(u"this")))
            var.put('K', var.get('toPrimitive')(var.get('P'), Js(True)))
            pass
            while 1:
                if var.put('D', var.get('getOwnPropertyDescriptor')(var.get('O'), var.get('K'))):
                    return var.get('D').get('set')
                if not var.put('O', var.get('getPrototypeOf')(var.get('O'))):
                    break
        PyJs___lookupSetter___937_._set_name('__lookupSetter__')
        (var.get('require')(Js('./_descriptors')) and var.get('$export')((var.get('$export').get('P')+var.get('require')(Js('./_object-forced-pam'))), Js('Object'), Js({'__lookupSetter__':PyJs___lookupSetter___937_})))
    PyJs_anonymous_936_._set_name('anonymous')
    @Js
    def PyJs_anonymous_938_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$export', 'exports', 'module', '$values'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$values', var.get('require')(Js('./_object-to-array'))(Js(False)))
        @Js
        def PyJs_values_939_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'values':PyJs_values_939_}, var)
            var.registers(['it'])
            return var.get('$values')(var.get('it'))
        PyJs_values_939_._set_name('values')
        var.get('$export')(var.get('$export').get('S'), Js('Object'), Js({'values':PyJs_values_939_}))
    PyJs_anonymous_938_._set_name('anonymous')
    @Js
    def PyJs_anonymous_940_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['hide', 'closeSubscription', '$Observable', 'Subscription', 'subscriptionClosed', 'OBSERVABLE', 'RETURN', 'getMethod', 'require', 'module', 'microtask', 'cleanupSubscription', 'global', 'aFunction', 'core', 'redefineAll', 'anInstance', 'SubscriptionObserver', '$export', 'exports', 'forOf', 'anObject'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('global', var.get('require')(Js('./_global')))
        var.put('core', var.get('require')(Js('./_core')))
        var.put('microtask', var.get('require')(Js('./_microtask'))())
        var.put('OBSERVABLE', var.get('require')(Js('./_wks'))(Js('observable')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('anInstance', var.get('require')(Js('./_an-instance')))
        var.put('redefineAll', var.get('require')(Js('./_redefine-all')))
        var.put('hide', var.get('require')(Js('./_hide')))
        var.put('forOf', var.get('require')(Js('./_for-of')))
        var.put('RETURN', var.get('forOf').get('RETURN'))
        @Js
        def PyJs_getMethod_941_(fn, this, arguments, var=var):
            var = Scope({'fn':fn, 'this':this, 'arguments':arguments, 'getMethod':PyJs_getMethod_941_}, var)
            var.registers(['fn'])
            return (var.get('undefined') if (var.get('fn')==var.get(u"null")) else var.get('aFunction')(var.get('fn')))
        PyJs_getMethod_941_._set_name('getMethod')
        var.put('getMethod', PyJs_getMethod_941_)
        @Js
        def PyJs_cleanupSubscription_942_(subscription, this, arguments, var=var):
            var = Scope({'subscription':subscription, 'this':this, 'arguments':arguments, 'cleanupSubscription':PyJs_cleanupSubscription_942_}, var)
            var.registers(['cleanup', 'subscription'])
            var.put('cleanup', var.get('subscription').get('_c'))
            if var.get('cleanup'):
                var.get('subscription').put('_c', var.get('undefined'))
                var.get('cleanup')()
        PyJs_cleanupSubscription_942_._set_name('cleanupSubscription')
        var.put('cleanupSubscription', PyJs_cleanupSubscription_942_)
        @Js
        def PyJs_subscriptionClosed_943_(subscription, this, arguments, var=var):
            var = Scope({'subscription':subscription, 'this':this, 'arguments':arguments, 'subscriptionClosed':PyJs_subscriptionClosed_943_}, var)
            var.registers(['subscription'])
            return PyJsStrictEq(var.get('subscription').get('_o'),var.get('undefined'))
        PyJs_subscriptionClosed_943_._set_name('subscriptionClosed')
        var.put('subscriptionClosed', PyJs_subscriptionClosed_943_)
        @Js
        def PyJs_closeSubscription_944_(subscription, this, arguments, var=var):
            var = Scope({'subscription':subscription, 'this':this, 'arguments':arguments, 'closeSubscription':PyJs_closeSubscription_944_}, var)
            var.registers(['subscription'])
            if var.get('subscriptionClosed')(var.get('subscription')).neg():
                var.get('subscription').put('_o', var.get('undefined'))
                var.get('cleanupSubscription')(var.get('subscription'))
        PyJs_closeSubscription_944_._set_name('closeSubscription')
        var.put('closeSubscription', PyJs_closeSubscription_944_)
        @Js
        def PyJs_Subscription_945_(observer, subscriber, this, arguments, var=var):
            var = Scope({'observer':observer, 'subscriber':subscriber, 'this':this, 'arguments':arguments, 'Subscription':PyJs_Subscription_945_}, var)
            var.registers(['subscriber', 'cleanup', 'subscription', 'observer'])
            var.get('anObject')(var.get('observer'))
            var.get(u"this").put('_c', var.get('undefined'))
            var.get(u"this").put('_o', var.get('observer'))
            var.put('observer', var.get('SubscriptionObserver').create(var.get(u"this")))
            try:
                var.put('cleanup', var.get('subscriber')(var.get('observer')))
                var.put('subscription', var.get('cleanup'))
                if (var.get('cleanup')!=var.get(u"null")):
                    if PyJsStrictEq(var.get('cleanup').get('unsubscribe').typeof(),Js('function')):
                        @Js
                        def PyJs_cleanup_946_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'cleanup':PyJs_cleanup_946_}, var)
                            var.registers([])
                            var.get('subscription').callprop('unsubscribe')
                        PyJs_cleanup_946_._set_name('cleanup')
                        var.put('cleanup', PyJs_cleanup_946_)
                    else:
                        var.get('aFunction')(var.get('cleanup'))
                    var.get(u"this").put('_c', var.get('cleanup'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_59601553 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    var.get('observer').callprop('error', var.get('e'))
                    return var.get('undefined')
                finally:
                    if PyJsHolder_65_59601553 is not None:
                        var.own['e'] = PyJsHolder_65_59601553
                    else:
                        del var.own['e']
                    del PyJsHolder_65_59601553
            if var.get('subscriptionClosed')(var.get(u"this")):
                var.get('cleanupSubscription')(var.get(u"this"))
        PyJs_Subscription_945_._set_name('Subscription')
        var.put('Subscription', PyJs_Subscription_945_)
        @Js
        def PyJs_unsubscribe_947_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'unsubscribe':PyJs_unsubscribe_947_}, var)
            var.registers([])
            var.get('closeSubscription')(var.get(u"this"))
        PyJs_unsubscribe_947_._set_name('unsubscribe')
        var.get('Subscription').put('prototype', var.get('redefineAll')(Js({}), Js({'unsubscribe':PyJs_unsubscribe_947_})))
        @Js
        def PyJs_SubscriptionObserver_948_(subscription, this, arguments, var=var):
            var = Scope({'subscription':subscription, 'this':this, 'arguments':arguments, 'SubscriptionObserver':PyJs_SubscriptionObserver_948_}, var)
            var.registers(['subscription'])
            var.get(u"this").put('_s', var.get('subscription'))
        PyJs_SubscriptionObserver_948_._set_name('SubscriptionObserver')
        var.put('SubscriptionObserver', PyJs_SubscriptionObserver_948_)
        @Js
        def PyJs_next_949_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments, 'next':PyJs_next_949_}, var)
            var.registers(['value', 'm', 'subscription', 'observer'])
            var.put('subscription', var.get(u"this").get('_s'))
            if var.get('subscriptionClosed')(var.get('subscription')).neg():
                var.put('observer', var.get('subscription').get('_o'))
                try:
                    var.put('m', var.get('getMethod')(var.get('observer').get('next')))
                    if var.get('m'):
                        return var.get('m').callprop('call', var.get('observer'), var.get('value'))
                except PyJsException as PyJsTempException:
                    PyJsHolder_65_521087 = var.own.get('e')
                    var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                    try:
                        try:
                            var.get('closeSubscription')(var.get('subscription'))
                        finally:
                            PyJsTempException = JsToPyException(var.get('e'))
                            raise PyJsTempException
                    finally:
                        if PyJsHolder_65_521087 is not None:
                            var.own['e'] = PyJsHolder_65_521087
                        else:
                            del var.own['e']
                        del PyJsHolder_65_521087
        PyJs_next_949_._set_name('next')
        @Js
        def PyJs_error_950_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments, 'error':PyJs_error_950_}, var)
            var.registers(['value', 'm', 'subscription', 'observer'])
            var.put('subscription', var.get(u"this").get('_s'))
            if var.get('subscriptionClosed')(var.get('subscription')):
                PyJsTempException = JsToPyException(var.get('value'))
                raise PyJsTempException
            var.put('observer', var.get('subscription').get('_o'))
            var.get('subscription').put('_o', var.get('undefined'))
            try:
                var.put('m', var.get('getMethod')(var.get('observer').get('error')))
                if var.get('m').neg():
                    PyJsTempException = JsToPyException(var.get('value'))
                    raise PyJsTempException
                var.put('value', var.get('m').callprop('call', var.get('observer'), var.get('value')))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_24360836 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    try:
                        var.get('cleanupSubscription')(var.get('subscription'))
                    finally:
                        PyJsTempException = JsToPyException(var.get('e'))
                        raise PyJsTempException
                finally:
                    if PyJsHolder_65_24360836 is not None:
                        var.own['e'] = PyJsHolder_65_24360836
                    else:
                        del var.own['e']
                    del PyJsHolder_65_24360836
            var.get('cleanupSubscription')(var.get('subscription'))
            return var.get('value')
        PyJs_error_950_._set_name('error')
        @Js
        def PyJs_complete_951_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments, 'complete':PyJs_complete_951_}, var)
            var.registers(['value', 'm', 'subscription', 'observer'])
            var.put('subscription', var.get(u"this").get('_s'))
            if var.get('subscriptionClosed')(var.get('subscription')).neg():
                var.put('observer', var.get('subscription').get('_o'))
                var.get('subscription').put('_o', var.get('undefined'))
                try:
                    var.put('m', var.get('getMethod')(var.get('observer').get('complete')))
                    var.put('value', (var.get('m').callprop('call', var.get('observer'), var.get('value')) if var.get('m') else var.get('undefined')))
                except PyJsException as PyJsTempException:
                    PyJsHolder_65_83939034 = var.own.get('e')
                    var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                    try:
                        try:
                            var.get('cleanupSubscription')(var.get('subscription'))
                        finally:
                            PyJsTempException = JsToPyException(var.get('e'))
                            raise PyJsTempException
                    finally:
                        if PyJsHolder_65_83939034 is not None:
                            var.own['e'] = PyJsHolder_65_83939034
                        else:
                            del var.own['e']
                        del PyJsHolder_65_83939034
                var.get('cleanupSubscription')(var.get('subscription'))
                return var.get('value')
        PyJs_complete_951_._set_name('complete')
        var.get('SubscriptionObserver').put('prototype', var.get('redefineAll')(Js({}), Js({'next':PyJs_next_949_,'error':PyJs_error_950_,'complete':PyJs_complete_951_})))
        @Js
        def PyJs_Observable_952_(subscriber, this, arguments, var=var):
            var = Scope({'subscriber':subscriber, 'this':this, 'arguments':arguments, 'Observable':PyJs_Observable_952_}, var)
            var.registers(['subscriber'])
            var.get('anInstance')(var.get(u"this"), var.get('$Observable'), Js('Observable'), Js('_f')).put('_f', var.get('aFunction')(var.get('subscriber')))
        PyJs_Observable_952_._set_name('Observable')
        var.put('$Observable', PyJs_Observable_952_)
        @Js
        def PyJs_subscribe_953_(observer, this, arguments, var=var):
            var = Scope({'observer':observer, 'this':this, 'arguments':arguments, 'subscribe':PyJs_subscribe_953_}, var)
            var.registers(['observer'])
            return var.get('Subscription').create(var.get('observer'), var.get(u"this").get('_f'))
        PyJs_subscribe_953_._set_name('subscribe')
        @Js
        def PyJs_forEach_954_(fn, this, arguments, var=var):
            var = Scope({'fn':fn, 'this':this, 'arguments':arguments, 'forEach':PyJs_forEach_954_}, var)
            var.registers(['fn', 'that'])
            var.put('that', var.get(u"this"))
            @Js
            def PyJs_anonymous_955_(resolve, reject, this, arguments, var=var):
                var = Scope({'resolve':resolve, 'reject':reject, 'this':this, 'arguments':arguments}, var)
                var.registers(['subscription', 'resolve', 'reject'])
                var.get('aFunction')(var.get('fn'))
                @Js
                def PyJs_next_956_(value, this, arguments, var=var):
                    var = Scope({'value':value, 'this':this, 'arguments':arguments, 'next':PyJs_next_956_}, var)
                    var.registers(['value'])
                    try:
                        return var.get('fn')(var.get('value'))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_5472239 = var.own.get('e')
                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                        try:
                            var.get('reject')(var.get('e'))
                            var.get('subscription').callprop('unsubscribe')
                        finally:
                            if PyJsHolder_65_5472239 is not None:
                                var.own['e'] = PyJsHolder_65_5472239
                            else:
                                del var.own['e']
                            del PyJsHolder_65_5472239
                PyJs_next_956_._set_name('next')
                var.put('subscription', var.get('that').callprop('subscribe', Js({'next':PyJs_next_956_,'error':var.get('reject'),'complete':var.get('resolve')})))
            PyJs_anonymous_955_._set_name('anonymous')
            return (var.get('core').get('Promise') or var.get('global').get('Promise')).create(PyJs_anonymous_955_)
        PyJs_forEach_954_._set_name('forEach')
        var.get('redefineAll')(var.get('$Observable').get('prototype'), Js({'subscribe':PyJs_subscribe_953_,'forEach':PyJs_forEach_954_}))
        @Js
        def PyJs_InlineNonPyName_957_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'from':PyJs_InlineNonPyName_957_}, var)
            var.registers(['observable', 'C', 'x', 'method'])
            var.put('C', (var.get(u"this") if PyJsStrictEq(var.get(u"this",throw=False).typeof(),Js('function')) else var.get('$Observable')))
            var.put('method', var.get('getMethod')(var.get('anObject')(var.get('x')).get(var.get('OBSERVABLE'))))
            if var.get('method'):
                var.put('observable', var.get('anObject')(var.get('method').callprop('call', var.get('x'))))
                @Js
                def PyJs_anonymous_958_(observer, this, arguments, var=var):
                    var = Scope({'observer':observer, 'this':this, 'arguments':arguments}, var)
                    var.registers(['observer'])
                    return var.get('observable').callprop('subscribe', var.get('observer'))
                PyJs_anonymous_958_._set_name('anonymous')
                return (var.get('observable') if PyJsStrictEq(var.get('observable').get('constructor'),var.get('C')) else var.get('C').create(PyJs_anonymous_958_))
            @Js
            def PyJs_anonymous_959_(observer, this, arguments, var=var):
                var = Scope({'observer':observer, 'this':this, 'arguments':arguments}, var)
                var.registers(['done', 'observer'])
                var.put('done', Js(False))
                @Js
                def PyJs_anonymous_960_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    if var.get('done').neg():
                        try:
                            @Js
                            def PyJs_anonymous_961_(it, this, arguments, var=var):
                                var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
                                var.registers(['it'])
                                var.get('observer').callprop('next', var.get('it'))
                                if var.get('done'):
                                    return var.get('RETURN')
                            PyJs_anonymous_961_._set_name('anonymous')
                            if PyJsStrictEq(var.get('forOf')(var.get('x'), Js(False), PyJs_anonymous_961_),var.get('RETURN')):
                                return var.get('undefined')
                        except PyJsException as PyJsTempException:
                            PyJsHolder_65_98390720 = var.own.get('e')
                            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                            try:
                                if var.get('done'):
                                    PyJsTempException = JsToPyException(var.get('e'))
                                    raise PyJsTempException
                                var.get('observer').callprop('error', var.get('e'))
                                return var.get('undefined')
                            finally:
                                if PyJsHolder_65_98390720 is not None:
                                    var.own['e'] = PyJsHolder_65_98390720
                                else:
                                    del var.own['e']
                                del PyJsHolder_65_98390720
                        var.get('observer').callprop('complete')
                PyJs_anonymous_960_._set_name('anonymous')
                var.get('microtask')(PyJs_anonymous_960_)
                @Js
                def PyJs_anonymous_962_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.put('done', Js(True))
                PyJs_anonymous_962_._set_name('anonymous')
                return PyJs_anonymous_962_
            PyJs_anonymous_959_._set_name('anonymous')
            return var.get('C').create(PyJs_anonymous_959_)
        PyJs_InlineNonPyName_957_._set_name('from')
        @Js
        def PyJs_of_963_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'of':PyJs_of_963_}, var)
            var.registers(['i', 'items', 'l'])
            #for JS loop
            var.put('i', Js(0.0))
            var.put('l', var.get('arguments').get('length'))
            var.put('items', var.get('Array').create(var.get('l')))
            while (var.get('i')<var.get('l')):
                var.get('items').put(var.get('i'), var.get('arguments').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
            
            @Js
            def PyJs_anonymous_964_(observer, this, arguments, var=var):
                var = Scope({'observer':observer, 'this':this, 'arguments':arguments}, var)
                var.registers(['done', 'observer'])
                var.put('done', Js(False))
                @Js
                def PyJs_anonymous_965_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['j'])
                    if var.get('done').neg():
                        #for JS loop
                        var.put('j', Js(0.0))
                        while (var.get('j')<var.get('items').get('length')):
                            try:
                                var.get('observer').callprop('next', var.get('items').get(var.get('j')))
                                if var.get('done'):
                                    return var.get('undefined')
                            finally:
                                    var.put('j',Js(var.get('j').to_number())+Js(1))
                        var.get('observer').callprop('complete')
                PyJs_anonymous_965_._set_name('anonymous')
                var.get('microtask')(PyJs_anonymous_965_)
                @Js
                def PyJs_anonymous_966_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.put('done', Js(True))
                PyJs_anonymous_966_._set_name('anonymous')
                return PyJs_anonymous_966_
            PyJs_anonymous_964_._set_name('anonymous')
            return (var.get(u"this") if PyJsStrictEq(var.get(u"this",throw=False).typeof(),Js('function')) else var.get('$Observable')).create(PyJs_anonymous_964_)
        PyJs_of_963_._set_name('of')
        var.get('redefineAll')(var.get('$Observable'), Js({'from':PyJs_InlineNonPyName_957_,'of':PyJs_of_963_}))
        @Js
        def PyJs_anonymous_967_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get(u"this")
        PyJs_anonymous_967_._set_name('anonymous')
        var.get('hide')(var.get('$Observable').get('prototype'), var.get('OBSERVABLE'), PyJs_anonymous_967_)
        var.get('$export')(var.get('$export').get('G'), Js({'Observable':var.get('$Observable')}))
        var.get('require')(Js('./_set-species'))(Js('Observable'))
    PyJs_anonymous_940_._set_name('anonymous')
    @Js
    def PyJs_anonymous_968_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['core', 'require', '$export', 'exports', 'promiseResolve', 'module', 'speciesConstructor', 'global'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('core', var.get('require')(Js('./_core')))
        var.put('global', var.get('require')(Js('./_global')))
        var.put('speciesConstructor', var.get('require')(Js('./_species-constructor')))
        var.put('promiseResolve', var.get('require')(Js('./_promise-resolve')))
        @Js
        def PyJs__finally_969_(onFinally, this, arguments, var=var):
            var = Scope({'onFinally':onFinally, 'this':this, 'arguments':arguments, '_finally':PyJs__finally_969_}, var)
            var.registers(['onFinally', 'C', 'isFunction'])
            var.put('C', var.get('speciesConstructor')(var.get(u"this"), (var.get('core').get('Promise') or var.get('global').get('Promise'))))
            var.put('isFunction', (var.get('onFinally',throw=False).typeof()==Js('function')))
            @Js
            def PyJs_anonymous_970_(x, this, arguments, var=var):
                var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
                var.registers(['x'])
                @Js
                def PyJs_anonymous_971_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return var.get('x')
                PyJs_anonymous_971_._set_name('anonymous')
                return var.get('promiseResolve')(var.get('C'), var.get('onFinally')()).callprop('then', PyJs_anonymous_971_)
            PyJs_anonymous_970_._set_name('anonymous')
            @Js
            def PyJs_anonymous_972_(e, this, arguments, var=var):
                var = Scope({'e':e, 'this':this, 'arguments':arguments}, var)
                var.registers(['e'])
                @Js
                def PyJs_anonymous_973_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    PyJsTempException = JsToPyException(var.get('e'))
                    raise PyJsTempException
                PyJs_anonymous_973_._set_name('anonymous')
                return var.get('promiseResolve')(var.get('C'), var.get('onFinally')()).callprop('then', PyJs_anonymous_973_)
            PyJs_anonymous_972_._set_name('anonymous')
            return var.get(u"this").callprop('then', (PyJs_anonymous_970_ if var.get('isFunction') else var.get('onFinally')), (PyJs_anonymous_972_ if var.get('isFunction') else var.get('onFinally')))
        PyJs__finally_969_._set_name('_finally')
        var.get('$export')((var.get('$export').get('P')+var.get('$export').get('R')), Js('Promise'), Js({'finally':PyJs__finally_969_}))
    PyJs_anonymous_968_._set_name('anonymous')
    @Js
    def PyJs_anonymous_974_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'perform', '$export', 'exports', 'module', 'newPromiseCapability'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('newPromiseCapability', var.get('require')(Js('./_new-promise-capability')))
        var.put('perform', var.get('require')(Js('./_perform')))
        @Js
        def PyJs__try_975_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, '_try':PyJs__try_975_}, var)
            var.registers(['result', 'promiseCapability', 'callbackfn'])
            var.put('promiseCapability', var.get('newPromiseCapability').callprop('f', var.get(u"this")))
            var.put('result', var.get('perform')(var.get('callbackfn')))
            (var.get('promiseCapability').get('reject') if var.get('result').get('e') else var.get('promiseCapability').get('resolve'))(var.get('result').get('v'))
            return var.get('promiseCapability').get('promise')
        PyJs__try_975_._set_name('_try')
        var.get('$export')(var.get('$export').get('S'), Js('Promise'), Js({'try':PyJs__try_975_}))
    PyJs_anonymous_974_._set_name('anonymous')
    @Js
    def PyJs_anonymous_976_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'ordinaryDefineOwnMetadata', 'metadata', 'exports', 'module', 'toMetaKey', 'anObject'])
        var.put('metadata', var.get('require')(Js('./_metadata')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('toMetaKey', var.get('metadata').get('key'))
        var.put('ordinaryDefineOwnMetadata', var.get('metadata').get('set'))
        @Js
        def PyJs_defineMetadata_977_(metadataKey, metadataValue, target, targetKey, this, arguments, var=var):
            var = Scope({'metadataKey':metadataKey, 'metadataValue':metadataValue, 'target':target, 'targetKey':targetKey, 'this':this, 'arguments':arguments, 'defineMetadata':PyJs_defineMetadata_977_}, var)
            var.registers(['metadataKey', 'target', 'metadataValue', 'targetKey'])
            var.get('ordinaryDefineOwnMetadata')(var.get('metadataKey'), var.get('metadataValue'), var.get('anObject')(var.get('target')), var.get('toMetaKey')(var.get('targetKey')))
        PyJs_defineMetadata_977_._set_name('defineMetadata')
        var.get('metadata').callprop('exp', Js({'defineMetadata':PyJs_defineMetadata_977_}))
    PyJs_anonymous_976_._set_name('anonymous')
    @Js
    def PyJs_anonymous_978_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'metadata', 'exports', 'getOrCreateMetadataMap', 'store', 'module', 'toMetaKey', 'anObject'])
        var.put('metadata', var.get('require')(Js('./_metadata')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('toMetaKey', var.get('metadata').get('key'))
        var.put('getOrCreateMetadataMap', var.get('metadata').get('map'))
        var.put('store', var.get('metadata').get('store'))
        @Js
        def PyJs_deleteMetadata_979_(metadataKey, target, this, arguments, var=var):
            var = Scope({'metadataKey':metadataKey, 'target':target, 'this':this, 'arguments':arguments, 'deleteMetadata':PyJs_deleteMetadata_979_}, var)
            var.registers(['metadataKey', 'target', 'targetMetadata', 'targetKey', 'metadataMap'])
            var.put('targetKey', (var.get('undefined') if (var.get('arguments').get('length')<Js(3.0)) else var.get('toMetaKey')(var.get('arguments').get('2'))))
            var.put('metadataMap', var.get('getOrCreateMetadataMap')(var.get('anObject')(var.get('target')), var.get('targetKey'), Js(False)))
            if (PyJsStrictEq(var.get('metadataMap'),var.get('undefined')) or var.get('metadataMap').callprop('delete', var.get('metadataKey')).neg()):
                return Js(False)
            if var.get('metadataMap').get('size'):
                return Js(True)
            var.put('targetMetadata', var.get('store').callprop('get', var.get('target')))
            var.get('targetMetadata').callprop('delete', var.get('targetKey'))
            return (var.get('targetMetadata').get('size').neg().neg() or var.get('store').callprop('delete', var.get('target')))
        PyJs_deleteMetadata_979_._set_name('deleteMetadata')
        var.get('metadata').callprop('exp', Js({'deleteMetadata':PyJs_deleteMetadata_979_}))
    PyJs_anonymous_978_._set_name('anonymous')
    @Js
    def PyJs_anonymous_980_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'Set', 'metadata', 'exports', 'module', 'from', 'getPrototypeOf', 'ordinaryMetadataKeys', 'ordinaryOwnMetadataKeys', 'toMetaKey', 'anObject'])
        var.put('Set', var.get('require')(Js('./es6.set')))
        var.put('from', var.get('require')(Js('./_array-from-iterable')))
        var.put('metadata', var.get('require')(Js('./_metadata')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('getPrototypeOf', var.get('require')(Js('./_object-gpo')))
        var.put('ordinaryOwnMetadataKeys', var.get('metadata').get('keys'))
        var.put('toMetaKey', var.get('metadata').get('key'))
        @Js
        def PyJs_ordinaryMetadataKeys_981_(O, P, this, arguments, var=var):
            var = Scope({'O':O, 'P':P, 'this':this, 'arguments':arguments, 'ordinaryMetadataKeys':PyJs_ordinaryMetadataKeys_981_}, var)
            var.registers(['pKeys', 'oKeys', 'O', 'parent', 'P'])
            var.put('oKeys', var.get('ordinaryOwnMetadataKeys')(var.get('O'), var.get('P')))
            var.put('parent', var.get('getPrototypeOf')(var.get('O')))
            if PyJsStrictEq(var.get('parent'),var.get(u"null")):
                return var.get('oKeys')
            var.put('pKeys', var.get('ordinaryMetadataKeys')(var.get('parent'), var.get('P')))
            return ((var.get('from')(var.get('Set').create(var.get('oKeys').callprop('concat', var.get('pKeys')))) if var.get('oKeys').get('length') else var.get('pKeys')) if var.get('pKeys').get('length') else var.get('oKeys'))
        PyJs_ordinaryMetadataKeys_981_._set_name('ordinaryMetadataKeys')
        var.put('ordinaryMetadataKeys', PyJs_ordinaryMetadataKeys_981_)
        @Js
        def PyJs_getMetadataKeys_982_(target, this, arguments, var=var):
            var = Scope({'target':target, 'this':this, 'arguments':arguments, 'getMetadataKeys':PyJs_getMetadataKeys_982_}, var)
            var.registers(['target'])
            return var.get('ordinaryMetadataKeys')(var.get('anObject')(var.get('target')), (var.get('undefined') if (var.get('arguments').get('length')<Js(2.0)) else var.get('toMetaKey')(var.get('arguments').get('1'))))
        PyJs_getMetadataKeys_982_._set_name('getMetadataKeys')
        var.get('metadata').callprop('exp', Js({'getMetadataKeys':PyJs_getMetadataKeys_982_}))
    PyJs_anonymous_980_._set_name('anonymous')
    @Js
    def PyJs_anonymous_983_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'ordinaryGetOwnMetadata', 'metadata', 'exports', 'ordinaryGetMetadata', 'module', 'getPrototypeOf', 'toMetaKey', 'anObject', 'ordinaryHasOwnMetadata'])
        var.put('metadata', var.get('require')(Js('./_metadata')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('getPrototypeOf', var.get('require')(Js('./_object-gpo')))
        var.put('ordinaryHasOwnMetadata', var.get('metadata').get('has'))
        var.put('ordinaryGetOwnMetadata', var.get('metadata').get('get'))
        var.put('toMetaKey', var.get('metadata').get('key'))
        @Js
        def PyJs_ordinaryGetMetadata_984_(MetadataKey, O, P, this, arguments, var=var):
            var = Scope({'MetadataKey':MetadataKey, 'O':O, 'P':P, 'this':this, 'arguments':arguments, 'ordinaryGetMetadata':PyJs_ordinaryGetMetadata_984_}, var)
            var.registers(['hasOwn', 'parent', 'O', 'MetadataKey', 'P'])
            var.put('hasOwn', var.get('ordinaryHasOwnMetadata')(var.get('MetadataKey'), var.get('O'), var.get('P')))
            if var.get('hasOwn'):
                return var.get('ordinaryGetOwnMetadata')(var.get('MetadataKey'), var.get('O'), var.get('P'))
            var.put('parent', var.get('getPrototypeOf')(var.get('O')))
            return (var.get('ordinaryGetMetadata')(var.get('MetadataKey'), var.get('parent'), var.get('P')) if PyJsStrictNeq(var.get('parent'),var.get(u"null")) else var.get('undefined'))
        PyJs_ordinaryGetMetadata_984_._set_name('ordinaryGetMetadata')
        var.put('ordinaryGetMetadata', PyJs_ordinaryGetMetadata_984_)
        @Js
        def PyJs_getMetadata_985_(metadataKey, target, this, arguments, var=var):
            var = Scope({'metadataKey':metadataKey, 'target':target, 'this':this, 'arguments':arguments, 'getMetadata':PyJs_getMetadata_985_}, var)
            var.registers(['metadataKey', 'target'])
            return var.get('ordinaryGetMetadata')(var.get('metadataKey'), var.get('anObject')(var.get('target')), (var.get('undefined') if (var.get('arguments').get('length')<Js(3.0)) else var.get('toMetaKey')(var.get('arguments').get('2'))))
        PyJs_getMetadata_985_._set_name('getMetadata')
        var.get('metadata').callprop('exp', Js({'getMetadata':PyJs_getMetadata_985_}))
    PyJs_anonymous_983_._set_name('anonymous')
    @Js
    def PyJs_anonymous_986_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'metadata', 'exports', 'module', 'ordinaryOwnMetadataKeys', 'toMetaKey', 'anObject'])
        var.put('metadata', var.get('require')(Js('./_metadata')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('ordinaryOwnMetadataKeys', var.get('metadata').get('keys'))
        var.put('toMetaKey', var.get('metadata').get('key'))
        @Js
        def PyJs_getOwnMetadataKeys_987_(target, this, arguments, var=var):
            var = Scope({'target':target, 'this':this, 'arguments':arguments, 'getOwnMetadataKeys':PyJs_getOwnMetadataKeys_987_}, var)
            var.registers(['target'])
            return var.get('ordinaryOwnMetadataKeys')(var.get('anObject')(var.get('target')), (var.get('undefined') if (var.get('arguments').get('length')<Js(2.0)) else var.get('toMetaKey')(var.get('arguments').get('1'))))
        PyJs_getOwnMetadataKeys_987_._set_name('getOwnMetadataKeys')
        var.get('metadata').callprop('exp', Js({'getOwnMetadataKeys':PyJs_getOwnMetadataKeys_987_}))
    PyJs_anonymous_986_._set_name('anonymous')
    @Js
    def PyJs_anonymous_988_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'ordinaryGetOwnMetadata', 'metadata', 'exports', 'module', 'toMetaKey', 'anObject'])
        var.put('metadata', var.get('require')(Js('./_metadata')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('ordinaryGetOwnMetadata', var.get('metadata').get('get'))
        var.put('toMetaKey', var.get('metadata').get('key'))
        @Js
        def PyJs_getOwnMetadata_989_(metadataKey, target, this, arguments, var=var):
            var = Scope({'metadataKey':metadataKey, 'target':target, 'this':this, 'arguments':arguments, 'getOwnMetadata':PyJs_getOwnMetadata_989_}, var)
            var.registers(['metadataKey', 'target'])
            return var.get('ordinaryGetOwnMetadata')(var.get('metadataKey'), var.get('anObject')(var.get('target')), (var.get('undefined') if (var.get('arguments').get('length')<Js(3.0)) else var.get('toMetaKey')(var.get('arguments').get('2'))))
        PyJs_getOwnMetadata_989_._set_name('getOwnMetadata')
        var.get('metadata').callprop('exp', Js({'getOwnMetadata':PyJs_getOwnMetadata_989_}))
    PyJs_anonymous_988_._set_name('anonymous')
    @Js
    def PyJs_anonymous_990_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['ordinaryHasMetadata', 'require', 'metadata', 'exports', 'module', 'getPrototypeOf', 'toMetaKey', 'anObject', 'ordinaryHasOwnMetadata'])
        var.put('metadata', var.get('require')(Js('./_metadata')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('getPrototypeOf', var.get('require')(Js('./_object-gpo')))
        var.put('ordinaryHasOwnMetadata', var.get('metadata').get('has'))
        var.put('toMetaKey', var.get('metadata').get('key'))
        @Js
        def PyJs_ordinaryHasMetadata_991_(MetadataKey, O, P, this, arguments, var=var):
            var = Scope({'MetadataKey':MetadataKey, 'O':O, 'P':P, 'this':this, 'arguments':arguments, 'ordinaryHasMetadata':PyJs_ordinaryHasMetadata_991_}, var)
            var.registers(['hasOwn', 'parent', 'O', 'MetadataKey', 'P'])
            var.put('hasOwn', var.get('ordinaryHasOwnMetadata')(var.get('MetadataKey'), var.get('O'), var.get('P')))
            if var.get('hasOwn'):
                return Js(True)
            var.put('parent', var.get('getPrototypeOf')(var.get('O')))
            return (var.get('ordinaryHasMetadata')(var.get('MetadataKey'), var.get('parent'), var.get('P')) if PyJsStrictNeq(var.get('parent'),var.get(u"null")) else Js(False))
        PyJs_ordinaryHasMetadata_991_._set_name('ordinaryHasMetadata')
        var.put('ordinaryHasMetadata', PyJs_ordinaryHasMetadata_991_)
        @Js
        def PyJs_hasMetadata_992_(metadataKey, target, this, arguments, var=var):
            var = Scope({'metadataKey':metadataKey, 'target':target, 'this':this, 'arguments':arguments, 'hasMetadata':PyJs_hasMetadata_992_}, var)
            var.registers(['metadataKey', 'target'])
            return var.get('ordinaryHasMetadata')(var.get('metadataKey'), var.get('anObject')(var.get('target')), (var.get('undefined') if (var.get('arguments').get('length')<Js(3.0)) else var.get('toMetaKey')(var.get('arguments').get('2'))))
        PyJs_hasMetadata_992_._set_name('hasMetadata')
        var.get('metadata').callprop('exp', Js({'hasMetadata':PyJs_hasMetadata_992_}))
    PyJs_anonymous_990_._set_name('anonymous')
    @Js
    def PyJs_anonymous_993_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'metadata', 'exports', 'module', 'toMetaKey', 'anObject', 'ordinaryHasOwnMetadata'])
        var.put('metadata', var.get('require')(Js('./_metadata')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('ordinaryHasOwnMetadata', var.get('metadata').get('has'))
        var.put('toMetaKey', var.get('metadata').get('key'))
        @Js
        def PyJs_hasOwnMetadata_994_(metadataKey, target, this, arguments, var=var):
            var = Scope({'metadataKey':metadataKey, 'target':target, 'this':this, 'arguments':arguments, 'hasOwnMetadata':PyJs_hasOwnMetadata_994_}, var)
            var.registers(['metadataKey', 'target'])
            return var.get('ordinaryHasOwnMetadata')(var.get('metadataKey'), var.get('anObject')(var.get('target')), (var.get('undefined') if (var.get('arguments').get('length')<Js(3.0)) else var.get('toMetaKey')(var.get('arguments').get('2'))))
        PyJs_hasOwnMetadata_994_._set_name('hasOwnMetadata')
        var.get('metadata').callprop('exp', Js({'hasOwnMetadata':PyJs_hasOwnMetadata_994_}))
    PyJs_anonymous_993_._set_name('anonymous')
    @Js
    def PyJs_anonymous_995_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['aFunction', 'require', 'ordinaryDefineOwnMetadata', '$metadata', 'exports', 'module', 'toMetaKey', 'anObject'])
        var.put('$metadata', var.get('require')(Js('./_metadata')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('toMetaKey', var.get('$metadata').get('key'))
        var.put('ordinaryDefineOwnMetadata', var.get('$metadata').get('set'))
        @Js
        def PyJs_metadata_996_(metadataKey, metadataValue, this, arguments, var=var):
            var = Scope({'metadataKey':metadataKey, 'metadataValue':metadataValue, 'this':this, 'arguments':arguments, 'metadata':PyJs_metadata_996_}, var)
            var.registers(['metadataKey', 'metadataValue'])
            @Js
            def PyJs_decorator_997_(target, targetKey, this, arguments, var=var):
                var = Scope({'target':target, 'targetKey':targetKey, 'this':this, 'arguments':arguments, 'decorator':PyJs_decorator_997_}, var)
                var.registers(['target', 'targetKey'])
                var.get('ordinaryDefineOwnMetadata')(var.get('metadataKey'), var.get('metadataValue'), (var.get('anObject') if PyJsStrictNeq(var.get('targetKey'),var.get('undefined')) else var.get('aFunction'))(var.get('target')), var.get('toMetaKey')(var.get('targetKey')))
            PyJs_decorator_997_._set_name('decorator')
            return PyJs_decorator_997_
        PyJs_metadata_996_._set_name('metadata')
        var.get('$metadata').callprop('exp', Js({'metadata':PyJs_metadata_996_}))
    PyJs_anonymous_995_._set_name('anonymous')
    @Js
    def PyJs_anonymous_998_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('require')(Js('./_set-collection-from'))(Js('Set'))
    PyJs_anonymous_998_._set_name('anonymous')
    @Js
    def PyJs_anonymous_999_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('require')(Js('./_set-collection-of'))(Js('Set'))
    PyJs_anonymous_999_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1000_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')((var.get('$export').get('P')+var.get('$export').get('R')), Js('Set'), Js({'toJSON':var.get('require')(Js('./_collection-to-json'))(Js('Set'))}))
    PyJs_anonymous_1000_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1001_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$fails', 'require', '$export', 'exports', 'module', '$at', 'FORCED'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$at', var.get('require')(Js('./_string-at'))(Js(True)))
        var.put('$fails', var.get('require')(Js('./_fails')))
        @Js
        def PyJs_anonymous_1002_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return PyJsStrictNeq(Js('𠮷').callprop('at', Js(0.0)),Js('𠮷'))
        PyJs_anonymous_1002_._set_name('anonymous')
        var.put('FORCED', var.get('$fails')(PyJs_anonymous_1002_))
        @Js
        def PyJs_at_1003_(pos, this, arguments, var=var):
            var = Scope({'pos':pos, 'this':this, 'arguments':arguments, 'at':PyJs_at_1003_}, var)
            var.registers(['pos'])
            return var.get('$at')(var.get(u"this"), var.get('pos'))
        PyJs_at_1003_._set_name('at')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('FORCED'))), Js('String'), Js({'at':PyJs_at_1003_}))
    PyJs_anonymous_1001_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1004_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'defined', 'isRegExp', 'toLength', 'RegExpProto', '$export', 'exports', 'module', 'getFlags', '$RegExpStringIterator'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('defined', var.get('require')(Js('./_defined')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('isRegExp', var.get('require')(Js('./_is-regexp')))
        var.put('getFlags', var.get('require')(Js('./_flags')))
        var.put('RegExpProto', var.get('RegExp').get('prototype'))
        @Js
        def PyJs_InlineNonPyName_1005_(regexp, string, this, arguments, var=var):
            var = Scope({'regexp':regexp, 'string':string, 'this':this, 'arguments':arguments, '$RegExpStringIterator':PyJs_InlineNonPyName_1005_}, var)
            var.registers(['string', 'regexp'])
            var.get(u"this").put('_r', var.get('regexp'))
            var.get(u"this").put('_s', var.get('string'))
        PyJs_InlineNonPyName_1005_._set_name('$RegExpStringIterator')
        var.put('$RegExpStringIterator', PyJs_InlineNonPyName_1005_)
        @Js
        def PyJs_next_1006_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'next':PyJs_next_1006_}, var)
            var.registers(['match'])
            var.put('match', var.get(u"this").get('_r').callprop('exec', var.get(u"this").get('_s')))
            return Js({'value':var.get('match'),'done':PyJsStrictEq(var.get('match'),var.get(u"null"))})
        PyJs_next_1006_._set_name('next')
        var.get('require')(Js('./_iter-create'))(var.get('$RegExpStringIterator'), Js('RegExp String'), PyJs_next_1006_)
        @Js
        def PyJs_matchAll_1007_(regexp, this, arguments, var=var):
            var = Scope({'regexp':regexp, 'this':this, 'arguments':arguments, 'matchAll':PyJs_matchAll_1007_}, var)
            var.registers(['flags', 'regexp', 'S', 'rx'])
            var.get('defined')(var.get(u"this"))
            if var.get('isRegExp')(var.get('regexp')).neg():
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('regexp')+Js(' is not a regexp!'))))
                raise PyJsTempException
            var.put('S', var.get('String')(var.get(u"this")))
            var.put('flags', (var.get('String')(var.get('regexp').get('flags')) if var.get('RegExpProto').contains(Js('flags')) else var.get('getFlags').callprop('call', var.get('regexp'))))
            var.put('rx', var.get('RegExp').create(var.get('regexp').get('source'), (var.get('flags') if (~var.get('flags').callprop('indexOf', Js('g'))) else (Js('g')+var.get('flags')))))
            var.get('rx').put('lastIndex', var.get('toLength')(var.get('regexp').get('lastIndex')))
            return var.get('$RegExpStringIterator').create(var.get('rx'), var.get('S'))
        PyJs_matchAll_1007_._set_name('matchAll')
        var.get('$export')(var.get('$export').get('P'), Js('String'), Js({'matchAll':PyJs_matchAll_1007_}))
    PyJs_anonymous_1004_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1008_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$export', 'exports', 'module', 'WEBKIT_BUG', '$pad', 'userAgent'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$pad', var.get('require')(Js('./_string-pad')))
        var.put('userAgent', var.get('require')(Js('./_user-agent')))
        var.put('WEBKIT_BUG', JsRegExp('/Version\\/10\\.\\d+(\\.\\d+)?( Mobile\\/\\w+)? Safari\\//').callprop('test', var.get('userAgent')))
        @Js
        def PyJs_padEnd_1009_(maxLength, this, arguments, var=var):
            var = Scope({'maxLength':maxLength, 'this':this, 'arguments':arguments, 'padEnd':PyJs_padEnd_1009_}, var)
            var.registers(['maxLength'])
            return var.get('$pad')(var.get(u"this"), var.get('maxLength'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')), Js(False))
        PyJs_padEnd_1009_._set_name('padEnd')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('WEBKIT_BUG'))), Js('String'), Js({'padEnd':PyJs_padEnd_1009_}))
    PyJs_anonymous_1008_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1010_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$export', 'exports', 'module', 'WEBKIT_BUG', '$pad', 'userAgent'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$pad', var.get('require')(Js('./_string-pad')))
        var.put('userAgent', var.get('require')(Js('./_user-agent')))
        var.put('WEBKIT_BUG', JsRegExp('/Version\\/10\\.\\d+(\\.\\d+)?( Mobile\\/\\w+)? Safari\\//').callprop('test', var.get('userAgent')))
        @Js
        def PyJs_padStart_1011_(maxLength, this, arguments, var=var):
            var = Scope({'maxLength':maxLength, 'this':this, 'arguments':arguments, 'padStart':PyJs_padStart_1011_}, var)
            var.registers(['maxLength'])
            return var.get('$pad')(var.get(u"this"), var.get('maxLength'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')), Js(True))
        PyJs_padStart_1011_._set_name('padStart')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('WEBKIT_BUG'))), Js('String'), Js({'padStart':PyJs_padStart_1011_}))
    PyJs_anonymous_1010_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1012_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1013_(PyJsArg_247472696d_, this, arguments, var=var):
            var = Scope({'$trim':PyJsArg_247472696d_, 'this':this, 'arguments':arguments}, var)
            var.registers(['$trim'])
            @Js
            def PyJs_trimLeft_1014_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'trimLeft':PyJs_trimLeft_1014_}, var)
                var.registers([])
                return var.get('$trim')(var.get(u"this"), Js(1.0))
            PyJs_trimLeft_1014_._set_name('trimLeft')
            return PyJs_trimLeft_1014_
        PyJs_anonymous_1013_._set_name('anonymous')
        var.get('require')(Js('./_string-trim'))(Js('trimLeft'), PyJs_anonymous_1013_, Js('trimStart'))
    PyJs_anonymous_1012_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1015_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1016_(PyJsArg_247472696d_, this, arguments, var=var):
            var = Scope({'$trim':PyJsArg_247472696d_, 'this':this, 'arguments':arguments}, var)
            var.registers(['$trim'])
            @Js
            def PyJs_trimRight_1017_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'trimRight':PyJs_trimRight_1017_}, var)
                var.registers([])
                return var.get('$trim')(var.get(u"this"), Js(2.0))
            PyJs_trimRight_1017_._set_name('trimRight')
            return PyJs_trimRight_1017_
        PyJs_anonymous_1016_._set_name('anonymous')
        var.get('require')(Js('./_string-trim'))(Js('trimRight'), PyJs_anonymous_1016_, Js('trimEnd'))
    PyJs_anonymous_1015_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1018_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('require')(Js('./_wks-define'))(Js('asyncIterator'))
    PyJs_anonymous_1018_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1019_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('require')(Js('./_wks-define'))(Js('observable'))
    PyJs_anonymous_1019_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1020_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('System'), Js({'global':var.get('require')(Js('./_global'))}))
    PyJs_anonymous_1020_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1021_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('require')(Js('./_set-collection-from'))(Js('WeakMap'))
    PyJs_anonymous_1021_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1022_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('require')(Js('./_set-collection-of'))(Js('WeakMap'))
    PyJs_anonymous_1022_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1023_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('require')(Js('./_set-collection-from'))(Js('WeakSet'))
    PyJs_anonymous_1023_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1024_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('require')(Js('./_set-collection-of'))(Js('WeakSet'))
    PyJs_anonymous_1024_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1025_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['hide', 'proto', 'collections', 'ITERATOR', 'i', 'Collection', 'key', 'wks', 'ArrayValues', 'TO_STRING_TAG', 'require', 'redefine', 'module', 'DOMIterables', 'explicit', 'NAME', 'global', 'getKeys', 'exports', 'Iterators', '$iterators'])
        var.put('$iterators', var.get('require')(Js('./es6.array.iterator')))
        var.put('getKeys', var.get('require')(Js('./_object-keys')))
        var.put('redefine', var.get('require')(Js('./_redefine')))
        var.put('global', var.get('require')(Js('./_global')))
        var.put('hide', var.get('require')(Js('./_hide')))
        var.put('Iterators', var.get('require')(Js('./_iterators')))
        var.put('wks', var.get('require')(Js('./_wks')))
        var.put('ITERATOR', var.get('wks')(Js('iterator')))
        var.put('TO_STRING_TAG', var.get('wks')(Js('toStringTag')))
        var.put('ArrayValues', var.get('Iterators').get('Array'))
        var.put('DOMIterables', Js({'CSSRuleList':Js(True),'CSSStyleDeclaration':Js(False),'CSSValueList':Js(False),'ClientRectList':Js(False),'DOMRectList':Js(False),'DOMStringList':Js(False),'DOMTokenList':Js(True),'DataTransferItemList':Js(False),'FileList':Js(False),'HTMLAllCollection':Js(False),'HTMLCollection':Js(False),'HTMLFormElement':Js(False),'HTMLSelectElement':Js(False),'MediaList':Js(True),'MimeTypeArray':Js(False),'NamedNodeMap':Js(False),'NodeList':Js(True),'PaintRequestList':Js(False),'Plugin':Js(False),'PluginArray':Js(False),'SVGLengthList':Js(False),'SVGNumberList':Js(False),'SVGPathSegList':Js(False),'SVGPointList':Js(False),'SVGStringList':Js(False),'SVGTransformList':Js(False),'SourceBufferList':Js(False),'StyleSheetList':Js(True),'TextTrackCueList':Js(False),'TextTrackList':Js(False),'TouchList':Js(False)}))
        #for JS loop
        var.put('collections', var.get('getKeys')(var.get('DOMIterables')))
        var.put('i', Js(0.0))
        while (var.get('i')<var.get('collections').get('length')):
            try:
                var.put('NAME', var.get('collections').get(var.get('i')))
                var.put('explicit', var.get('DOMIterables').get(var.get('NAME')))
                var.put('Collection', var.get('global').get(var.get('NAME')))
                var.put('proto', (var.get('Collection') and var.get('Collection').get('prototype')))
                pass
                if var.get('proto'):
                    if var.get('proto').get(var.get('ITERATOR')).neg():
                        var.get('hide')(var.get('proto'), var.get('ITERATOR'), var.get('ArrayValues'))
                    if var.get('proto').get(var.get('TO_STRING_TAG')).neg():
                        var.get('hide')(var.get('proto'), var.get('TO_STRING_TAG'), var.get('NAME'))
                    var.get('Iterators').put(var.get('NAME'), var.get('ArrayValues'))
                    if var.get('explicit'):
                        for PyJsTemp in var.get('$iterators'):
                            var.put('key', PyJsTemp)
                            if var.get('proto').get(var.get('key')).neg():
                                var.get('redefine')(var.get('proto'), var.get('key'), var.get('$iterators').get(var.get('key')), Js(True))
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
    PyJs_anonymous_1025_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1026_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$task', '$export', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$task', var.get('require')(Js('./_task')))
        var.get('$export')((var.get('$export').get('G')+var.get('$export').get('B')), Js({'setImmediate':var.get('$task').get('set'),'clearImmediate':var.get('$task').get('clear')}))
    PyJs_anonymous_1026_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1027_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'wrap', '$export', 'exports', 'module', 'slice', 'global', 'MSIE', 'userAgent'])
        var.put('global', var.get('require')(Js('./_global')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('userAgent', var.get('require')(Js('./_user-agent')))
        var.put('slice', Js([]).get('slice'))
        var.put('MSIE', JsRegExp('/MSIE .\\./').callprop('test', var.get('userAgent')))
        @Js
        def PyJs_wrap_1028_(set, this, arguments, var=var):
            var = Scope({'set':set, 'this':this, 'arguments':arguments, 'wrap':PyJs_wrap_1028_}, var)
            var.registers(['set'])
            @Js
            def PyJs_anonymous_1029_(fn, time, this, arguments, var=var):
                var = Scope({'fn':fn, 'time':time, 'this':this, 'arguments':arguments}, var)
                var.registers(['fn', 'args', 'time', 'boundArgs'])
                var.put('boundArgs', (var.get('arguments').get('length')>Js(2.0)))
                var.put('args', (var.get('slice').callprop('call', var.get('arguments'), Js(2.0)) if var.get('boundArgs') else Js(False)))
                @Js
                def PyJs_anonymous_1030_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    (var.get('fn') if (var.get('fn',throw=False).typeof()==Js('function')) else var.get('Function')(var.get('fn'))).callprop('apply', var.get(u"this"), var.get('args'))
                PyJs_anonymous_1030_._set_name('anonymous')
                return var.get('set')((PyJs_anonymous_1030_ if var.get('boundArgs') else var.get('fn')), var.get('time'))
            PyJs_anonymous_1029_._set_name('anonymous')
            return PyJs_anonymous_1029_
        PyJs_wrap_1028_._set_name('wrap')
        var.put('wrap', PyJs_wrap_1028_)
        var.get('$export')(((var.get('$export').get('G')+var.get('$export').get('B'))+(var.get('$export').get('F')*var.get('MSIE'))), Js({'setTimeout':var.get('wrap')(var.get('global').get('setTimeout')),'setInterval':var.get('wrap')(var.get('global').get('setInterval'))}))
    PyJs_anonymous_1027_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1031_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('require')(Js('./modules/es6.symbol'))
        var.get('require')(Js('./modules/es6.object.create'))
        var.get('require')(Js('./modules/es6.object.define-property'))
        var.get('require')(Js('./modules/es6.object.define-properties'))
        var.get('require')(Js('./modules/es6.object.get-own-property-descriptor'))
        var.get('require')(Js('./modules/es6.object.get-prototype-of'))
        var.get('require')(Js('./modules/es6.object.keys'))
        var.get('require')(Js('./modules/es6.object.get-own-property-names'))
        var.get('require')(Js('./modules/es6.object.freeze'))
        var.get('require')(Js('./modules/es6.object.seal'))
        var.get('require')(Js('./modules/es6.object.prevent-extensions'))
        var.get('require')(Js('./modules/es6.object.is-frozen'))
        var.get('require')(Js('./modules/es6.object.is-sealed'))
        var.get('require')(Js('./modules/es6.object.is-extensible'))
        var.get('require')(Js('./modules/es6.object.assign'))
        var.get('require')(Js('./modules/es6.object.is'))
        var.get('require')(Js('./modules/es6.object.set-prototype-of'))
        var.get('require')(Js('./modules/es6.object.to-string'))
        var.get('require')(Js('./modules/es6.function.bind'))
        var.get('require')(Js('./modules/es6.function.name'))
        var.get('require')(Js('./modules/es6.function.has-instance'))
        var.get('require')(Js('./modules/es6.parse-int'))
        var.get('require')(Js('./modules/es6.parse-float'))
        var.get('require')(Js('./modules/es6.number.constructor'))
        var.get('require')(Js('./modules/es6.number.to-fixed'))
        var.get('require')(Js('./modules/es6.number.to-precision'))
        var.get('require')(Js('./modules/es6.number.epsilon'))
        var.get('require')(Js('./modules/es6.number.is-finite'))
        var.get('require')(Js('./modules/es6.number.is-integer'))
        var.get('require')(Js('./modules/es6.number.is-nan'))
        var.get('require')(Js('./modules/es6.number.is-safe-integer'))
        var.get('require')(Js('./modules/es6.number.max-safe-integer'))
        var.get('require')(Js('./modules/es6.number.min-safe-integer'))
        var.get('require')(Js('./modules/es6.number.parse-float'))
        var.get('require')(Js('./modules/es6.number.parse-int'))
        var.get('require')(Js('./modules/es6.math.acosh'))
        var.get('require')(Js('./modules/es6.math.asinh'))
        var.get('require')(Js('./modules/es6.math.atanh'))
        var.get('require')(Js('./modules/es6.math.cbrt'))
        var.get('require')(Js('./modules/es6.math.clz32'))
        var.get('require')(Js('./modules/es6.math.cosh'))
        var.get('require')(Js('./modules/es6.math.expm1'))
        var.get('require')(Js('./modules/es6.math.fround'))
        var.get('require')(Js('./modules/es6.math.hypot'))
        var.get('require')(Js('./modules/es6.math.imul'))
        var.get('require')(Js('./modules/es6.math.log10'))
        var.get('require')(Js('./modules/es6.math.log1p'))
        var.get('require')(Js('./modules/es6.math.log2'))
        var.get('require')(Js('./modules/es6.math.sign'))
        var.get('require')(Js('./modules/es6.math.sinh'))
        var.get('require')(Js('./modules/es6.math.tanh'))
        var.get('require')(Js('./modules/es6.math.trunc'))
        var.get('require')(Js('./modules/es6.string.from-code-point'))
        var.get('require')(Js('./modules/es6.string.raw'))
        var.get('require')(Js('./modules/es6.string.trim'))
        var.get('require')(Js('./modules/es6.string.iterator'))
        var.get('require')(Js('./modules/es6.string.code-point-at'))
        var.get('require')(Js('./modules/es6.string.ends-with'))
        var.get('require')(Js('./modules/es6.string.includes'))
        var.get('require')(Js('./modules/es6.string.repeat'))
        var.get('require')(Js('./modules/es6.string.starts-with'))
        var.get('require')(Js('./modules/es6.string.anchor'))
        var.get('require')(Js('./modules/es6.string.big'))
        var.get('require')(Js('./modules/es6.string.blink'))
        var.get('require')(Js('./modules/es6.string.bold'))
        var.get('require')(Js('./modules/es6.string.fixed'))
        var.get('require')(Js('./modules/es6.string.fontcolor'))
        var.get('require')(Js('./modules/es6.string.fontsize'))
        var.get('require')(Js('./modules/es6.string.italics'))
        var.get('require')(Js('./modules/es6.string.link'))
        var.get('require')(Js('./modules/es6.string.small'))
        var.get('require')(Js('./modules/es6.string.strike'))
        var.get('require')(Js('./modules/es6.string.sub'))
        var.get('require')(Js('./modules/es6.string.sup'))
        var.get('require')(Js('./modules/es6.date.now'))
        var.get('require')(Js('./modules/es6.date.to-json'))
        var.get('require')(Js('./modules/es6.date.to-iso-string'))
        var.get('require')(Js('./modules/es6.date.to-string'))
        var.get('require')(Js('./modules/es6.date.to-primitive'))
        var.get('require')(Js('./modules/es6.array.is-array'))
        var.get('require')(Js('./modules/es6.array.from'))
        var.get('require')(Js('./modules/es6.array.of'))
        var.get('require')(Js('./modules/es6.array.join'))
        var.get('require')(Js('./modules/es6.array.slice'))
        var.get('require')(Js('./modules/es6.array.sort'))
        var.get('require')(Js('./modules/es6.array.for-each'))
        var.get('require')(Js('./modules/es6.array.map'))
        var.get('require')(Js('./modules/es6.array.filter'))
        var.get('require')(Js('./modules/es6.array.some'))
        var.get('require')(Js('./modules/es6.array.every'))
        var.get('require')(Js('./modules/es6.array.reduce'))
        var.get('require')(Js('./modules/es6.array.reduce-right'))
        var.get('require')(Js('./modules/es6.array.index-of'))
        var.get('require')(Js('./modules/es6.array.last-index-of'))
        var.get('require')(Js('./modules/es6.array.copy-within'))
        var.get('require')(Js('./modules/es6.array.fill'))
        var.get('require')(Js('./modules/es6.array.find'))
        var.get('require')(Js('./modules/es6.array.find-index'))
        var.get('require')(Js('./modules/es6.array.species'))
        var.get('require')(Js('./modules/es6.array.iterator'))
        var.get('require')(Js('./modules/es6.regexp.constructor'))
        var.get('require')(Js('./modules/es6.regexp.exec'))
        var.get('require')(Js('./modules/es6.regexp.to-string'))
        var.get('require')(Js('./modules/es6.regexp.flags'))
        var.get('require')(Js('./modules/es6.regexp.match'))
        var.get('require')(Js('./modules/es6.regexp.replace'))
        var.get('require')(Js('./modules/es6.regexp.search'))
        var.get('require')(Js('./modules/es6.regexp.split'))
        var.get('require')(Js('./modules/es6.promise'))
        var.get('require')(Js('./modules/es6.map'))
        var.get('require')(Js('./modules/es6.set'))
        var.get('require')(Js('./modules/es6.weak-map'))
        var.get('require')(Js('./modules/es6.weak-set'))
        var.get('require')(Js('./modules/es6.typed.array-buffer'))
        var.get('require')(Js('./modules/es6.typed.data-view'))
        var.get('require')(Js('./modules/es6.typed.int8-array'))
        var.get('require')(Js('./modules/es6.typed.uint8-array'))
        var.get('require')(Js('./modules/es6.typed.uint8-clamped-array'))
        var.get('require')(Js('./modules/es6.typed.int16-array'))
        var.get('require')(Js('./modules/es6.typed.uint16-array'))
        var.get('require')(Js('./modules/es6.typed.int32-array'))
        var.get('require')(Js('./modules/es6.typed.uint32-array'))
        var.get('require')(Js('./modules/es6.typed.float32-array'))
        var.get('require')(Js('./modules/es6.typed.float64-array'))
        var.get('require')(Js('./modules/es6.reflect.apply'))
        var.get('require')(Js('./modules/es6.reflect.construct'))
        var.get('require')(Js('./modules/es6.reflect.define-property'))
        var.get('require')(Js('./modules/es6.reflect.delete-property'))
        var.get('require')(Js('./modules/es6.reflect.enumerate'))
        var.get('require')(Js('./modules/es6.reflect.get'))
        var.get('require')(Js('./modules/es6.reflect.get-own-property-descriptor'))
        var.get('require')(Js('./modules/es6.reflect.get-prototype-of'))
        var.get('require')(Js('./modules/es6.reflect.has'))
        var.get('require')(Js('./modules/es6.reflect.is-extensible'))
        var.get('require')(Js('./modules/es6.reflect.own-keys'))
        var.get('require')(Js('./modules/es6.reflect.prevent-extensions'))
        var.get('require')(Js('./modules/es6.reflect.set'))
        var.get('require')(Js('./modules/es6.reflect.set-prototype-of'))
        var.get('require')(Js('./modules/es7.array.includes'))
        var.get('require')(Js('./modules/es7.array.flat-map'))
        var.get('require')(Js('./modules/es7.array.flatten'))
        var.get('require')(Js('./modules/es7.string.at'))
        var.get('require')(Js('./modules/es7.string.pad-start'))
        var.get('require')(Js('./modules/es7.string.pad-end'))
        var.get('require')(Js('./modules/es7.string.trim-left'))
        var.get('require')(Js('./modules/es7.string.trim-right'))
        var.get('require')(Js('./modules/es7.string.match-all'))
        var.get('require')(Js('./modules/es7.symbol.async-iterator'))
        var.get('require')(Js('./modules/es7.symbol.observable'))
        var.get('require')(Js('./modules/es7.object.get-own-property-descriptors'))
        var.get('require')(Js('./modules/es7.object.values'))
        var.get('require')(Js('./modules/es7.object.entries'))
        var.get('require')(Js('./modules/es7.object.define-getter'))
        var.get('require')(Js('./modules/es7.object.define-setter'))
        var.get('require')(Js('./modules/es7.object.lookup-getter'))
        var.get('require')(Js('./modules/es7.object.lookup-setter'))
        var.get('require')(Js('./modules/es7.map.to-json'))
        var.get('require')(Js('./modules/es7.set.to-json'))
        var.get('require')(Js('./modules/es7.map.of'))
        var.get('require')(Js('./modules/es7.set.of'))
        var.get('require')(Js('./modules/es7.weak-map.of'))
        var.get('require')(Js('./modules/es7.weak-set.of'))
        var.get('require')(Js('./modules/es7.map.from'))
        var.get('require')(Js('./modules/es7.set.from'))
        var.get('require')(Js('./modules/es7.weak-map.from'))
        var.get('require')(Js('./modules/es7.weak-set.from'))
        var.get('require')(Js('./modules/es7.global'))
        var.get('require')(Js('./modules/es7.system.global'))
        var.get('require')(Js('./modules/es7.error.is-error'))
        var.get('require')(Js('./modules/es7.math.clamp'))
        var.get('require')(Js('./modules/es7.math.deg-per-rad'))
        var.get('require')(Js('./modules/es7.math.degrees'))
        var.get('require')(Js('./modules/es7.math.fscale'))
        var.get('require')(Js('./modules/es7.math.iaddh'))
        var.get('require')(Js('./modules/es7.math.isubh'))
        var.get('require')(Js('./modules/es7.math.imulh'))
        var.get('require')(Js('./modules/es7.math.rad-per-deg'))
        var.get('require')(Js('./modules/es7.math.radians'))
        var.get('require')(Js('./modules/es7.math.scale'))
        var.get('require')(Js('./modules/es7.math.umulh'))
        var.get('require')(Js('./modules/es7.math.signbit'))
        var.get('require')(Js('./modules/es7.promise.finally'))
        var.get('require')(Js('./modules/es7.promise.try'))
        var.get('require')(Js('./modules/es7.reflect.define-metadata'))
        var.get('require')(Js('./modules/es7.reflect.delete-metadata'))
        var.get('require')(Js('./modules/es7.reflect.get-metadata'))
        var.get('require')(Js('./modules/es7.reflect.get-metadata-keys'))
        var.get('require')(Js('./modules/es7.reflect.get-own-metadata'))
        var.get('require')(Js('./modules/es7.reflect.get-own-metadata-keys'))
        var.get('require')(Js('./modules/es7.reflect.has-metadata'))
        var.get('require')(Js('./modules/es7.reflect.has-own-metadata'))
        var.get('require')(Js('./modules/es7.reflect.metadata'))
        var.get('require')(Js('./modules/es7.asap'))
        var.get('require')(Js('./modules/es7.observable'))
        var.get('require')(Js('./modules/web.timers'))
        var.get('require')(Js('./modules/web.immediate'))
        var.get('require')(Js('./modules/web.dom.iterable'))
        var.get('module').put('exports', var.get('require')(Js('./modules/_core')))
    PyJs_anonymous_1031_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1032_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_1033_(PyJsArg_676c6f62616c_, this, arguments, var=var):
            var = Scope({'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['global'])
            @Js
            def PyJs_anonymous_1034_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                @Js
                def PyJs_anonymous_1035_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['generateRegExp', 'endsWithLineTerminator', 'updateDeeply', 'escapeless', 'estraverse', 'renumber', 'safeConcatenation', 'FORMAT_MINIFY', 'escapeAllowedCharacter', 'join', 'flattenToString', 'addIndent', 'parenthesize', 'generateVerbatim', 'generateStatement', 'directive', 'withIndent', 'addCommentsToStatement', 'quotes', 'maybeBlock', 'extra', 'calculateSpaces', 'hexadecimal', 'generateIdentifier', 'noEmptySpace', 'toSourceNodeWhenNeeded', 'stringRepeat', 'escapeRegExpCharacter', 'indent', 'maybeBlockSuffix', 'generateComment', 'semicolons', 'getDefaultOptions', 'space', 'newline', 'json', 'Syntax', 'generateFunctionBody', 'generateExpression', 'FORMAT_DEFAULTS', 'parse', 'generateNumber', 'Precedence', 'generate', 'SourceNode', 'BinaryPrecedence', 'escapeDisallowedCharacter', 'hasLineTerminator', 'esutils', 'generatePattern', 'isArray', 'adjustMultilineComment', 'sourceMap', 'escapeDirective', 'base', 'parentheses', 'escapeString'])
                    @Js
                    def PyJsHoisted_getDefaultOptions_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return Js({'indent':var.get(u"null"),'base':var.get(u"null"),'parse':var.get(u"null"),'comment':Js(False),'format':Js({'indent':Js({'style':Js('    '),'base':Js(0.0),'adjustMultilineComment':Js(False)}),'newline':Js('\n'),'space':Js(' '),'json':Js(False),'renumber':Js(False),'hexadecimal':Js(False),'quotes':Js('single'),'escapeless':Js(False),'compact':Js(False),'parentheses':Js(True),'semicolons':Js(True),'safeConcatenation':Js(False)}),'moz':Js({'comprehensionExpressionStartsWithAssignment':Js(False),'starlessGenerator':Js(False),'parenthesizedComprehensionBlock':Js(False)}),'sourceMap':var.get(u"null"),'sourceMapRoot':var.get(u"null"),'sourceMapWithCode':Js(False),'directive':Js(False),'verbatim':var.get(u"null")})
                    PyJsHoisted_getDefaultOptions_.func_name = 'getDefaultOptions'
                    var.put('getDefaultOptions', PyJsHoisted_getDefaultOptions_)
                    @Js
                    def PyJsHoisted_stringRepeat_(str, num, this, arguments, var=var):
                        var = Scope({'str':str, 'num':num, 'this':this, 'arguments':arguments}, var)
                        var.registers(['str', 'num', 'result'])
                        var.put('result', Js(''))
                        #for JS loop
                        var.put('num', Js(0.0), '|')
                        while (var.get('num')>Js(0.0)):
                            try:
                                if (var.get('num')&Js(1.0)):
                                    var.put('result', var.get('str'), '+')
                            finally:
                                    PyJsComma(var.put('num', Js(1.0), '>>>'),var.put('str', var.get('str'), '+'))
                        return var.get('result')
                    PyJsHoisted_stringRepeat_.func_name = 'stringRepeat'
                    var.put('stringRepeat', PyJsHoisted_stringRepeat_)
                    @Js
                    def PyJsHoisted_hasLineTerminator_(str, this, arguments, var=var):
                        var = Scope({'str':str, 'this':this, 'arguments':arguments}, var)
                        var.registers(['str'])
                        return JsRegExp('/[\\r\\n]/g').callprop('test', var.get('str'))
                    PyJsHoisted_hasLineTerminator_.func_name = 'hasLineTerminator'
                    var.put('hasLineTerminator', PyJsHoisted_hasLineTerminator_)
                    @Js
                    def PyJsHoisted_endsWithLineTerminator_(str, this, arguments, var=var):
                        var = Scope({'str':str, 'this':this, 'arguments':arguments}, var)
                        var.registers(['str', 'len'])
                        var.put('len', var.get('str').get('length'))
                        return (var.get('len') and var.get('esutils').get('code').callprop('isLineTerminator', var.get('str').callprop('charCodeAt', (var.get('len')-Js(1.0)))))
                    PyJsHoisted_endsWithLineTerminator_.func_name = 'endsWithLineTerminator'
                    var.put('endsWithLineTerminator', PyJsHoisted_endsWithLineTerminator_)
                    @Js
                    def PyJsHoisted_updateDeeply_(target, override, this, arguments, var=var):
                        var = Scope({'target':target, 'override':override, 'this':this, 'arguments':arguments}, var)
                        var.registers(['target', 'val', 'isHashObject', 'key', 'override'])
                        @Js
                        def PyJsHoisted_isHashObject_(target, this, arguments, var=var):
                            var = Scope({'target':target, 'this':this, 'arguments':arguments}, var)
                            var.registers(['target'])
                            return ((PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('target',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('target'))),Js('object')) and var.get('target').instanceof(var.get('Object'))) and var.get('target').instanceof(var.get('RegExp')).neg())
                        PyJsHoisted_isHashObject_.func_name = 'isHashObject'
                        var.put('isHashObject', PyJsHoisted_isHashObject_)
                        pass
                        pass
                        for PyJsTemp in var.get('override'):
                            var.put('key', PyJsTemp)
                            if var.get('override').callprop('hasOwnProperty', var.get('key')):
                                var.put('val', var.get('override').get(var.get('key')))
                                if var.get('isHashObject')(var.get('val')):
                                    if var.get('isHashObject')(var.get('target').get(var.get('key'))):
                                        var.get('updateDeeply')(var.get('target').get(var.get('key')), var.get('val'))
                                    else:
                                        var.get('target').put(var.get('key'), var.get('updateDeeply')(Js({}), var.get('val')))
                                else:
                                    var.get('target').put(var.get('key'), var.get('val'))
                        return var.get('target')
                    PyJsHoisted_updateDeeply_.func_name = 'updateDeeply'
                    var.put('updateDeeply', PyJsHoisted_updateDeeply_)
                    @Js
                    def PyJsHoisted_generateNumber_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['temp', 'exponent', 'pos', 'result', 'point', 'value'])
                        pass
                        if PyJsStrictNeq(var.get('value'),var.get('value')):
                            PyJsTempException = JsToPyException(var.get('Error').create(Js('Numeric literal whose value is NaN')))
                            raise PyJsTempException
                        if ((var.get('value')<Js(0.0)) or (PyJsStrictEq(var.get('value'),Js(0.0)) and ((Js(1.0)/var.get('value'))<Js(0.0)))):
                            PyJsTempException = JsToPyException(var.get('Error').create(Js('Numeric literal whose value is negative')))
                            raise PyJsTempException
                        if PyJsStrictEq(var.get('value'),(Js(1.0)/Js(0.0))):
                            return (Js('null') if var.get('json') else (Js('1e400') if var.get('renumber') else Js('1e+400')))
                        var.put('result', (Js('')+var.get('value')))
                        if (var.get('renumber').neg() or (var.get('result').get('length')<Js(3.0))):
                            return var.get('result')
                        var.put('point', var.get('result').callprop('indexOf', Js('.')))
                        if ((var.get('json').neg() and PyJsStrictEq(var.get('result').callprop('charCodeAt', Js(0.0)),Js(48))) and PyJsStrictEq(var.get('point'),Js(1.0))):
                            var.put('point', Js(0.0))
                            var.put('result', var.get('result').callprop('slice', Js(1.0)))
                        var.put('temp', var.get('result'))
                        var.put('result', var.get('result').callprop('replace', Js('e+'), Js('e')))
                        var.put('exponent', Js(0.0))
                        if (var.put('pos', var.get('temp').callprop('indexOf', Js('e')))>Js(0.0)):
                            var.put('exponent', (+var.get('temp').callprop('slice', (var.get('pos')+Js(1.0)))))
                            var.put('temp', var.get('temp').callprop('slice', Js(0.0), var.get('pos')))
                        if (var.get('point')>=Js(0.0)):
                            var.put('exponent', ((var.get('temp').get('length')-var.get('point'))-Js(1.0)), '-')
                            var.put('temp', ((+(var.get('temp').callprop('slice', Js(0.0), var.get('point'))+var.get('temp').callprop('slice', (var.get('point')+Js(1.0)))))+Js('')))
                        var.put('pos', Js(0.0))
                        while PyJsStrictEq(var.get('temp').callprop('charCodeAt', ((var.get('temp').get('length')+var.get('pos'))-Js(1.0))),Js(48)):
                            var.put('pos',Js(var.get('pos').to_number())-Js(1))
                        if PyJsStrictNeq(var.get('pos'),Js(0.0)):
                            var.put('exponent', var.get('pos'), '-')
                            var.put('temp', var.get('temp').callprop('slice', Js(0.0), var.get('pos')))
                        if PyJsStrictNeq(var.get('exponent'),Js(0.0)):
                            var.put('temp', (Js('e')+var.get('exponent')), '+')
                        def PyJs_LONG_1040_(var=var):
                            return (((var.get('temp').get('length')<var.get('result').get('length')) or (((var.get('hexadecimal') and (var.get('value')>Js(1000000000000.0))) and PyJsStrictEq(var.get('Math').callprop('floor', var.get('value')),var.get('value'))) and (var.put('temp', (Js('0x')+var.get('value').callprop('toString', Js(16.0)))).get('length')<var.get('result').get('length')))) and PyJsStrictEq((+var.get('temp')),var.get('value')))
                        if PyJs_LONG_1040_():
                            var.put('result', var.get('temp'))
                        return var.get('result')
                    PyJsHoisted_generateNumber_.func_name = 'generateNumber'
                    var.put('generateNumber', PyJsHoisted_generateNumber_)
                    @Js
                    def PyJsHoisted_escapeRegExpCharacter_(ch, previousIsBackslash, this, arguments, var=var):
                        var = Scope({'ch':ch, 'previousIsBackslash':previousIsBackslash, 'this':this, 'arguments':arguments}, var)
                        var.registers(['ch', 'previousIsBackslash'])
                        if PyJsStrictEq((var.get('ch')&(~Js(1.0))),Js(8232)):
                            return ((Js('u') if var.get('previousIsBackslash') else Js('\\u'))+(Js('2028') if PyJsStrictEq(var.get('ch'),Js(8232)) else Js('2029')))
                        else:
                            if (PyJsStrictEq(var.get('ch'),Js(10.0)) or PyJsStrictEq(var.get('ch'),Js(13.0))):
                                return ((Js('') if var.get('previousIsBackslash') else Js('\\'))+(Js('n') if PyJsStrictEq(var.get('ch'),Js(10.0)) else Js('r')))
                        return var.get('String').callprop('fromCharCode', var.get('ch'))
                    PyJsHoisted_escapeRegExpCharacter_.func_name = 'escapeRegExpCharacter'
                    var.put('escapeRegExpCharacter', PyJsHoisted_escapeRegExpCharacter_)
                    @Js
                    def PyJsHoisted_generateRegExp_(reg, this, arguments, var=var):
                        var = Scope({'reg':reg, 'this':this, 'arguments':arguments}, var)
                        var.registers(['ch', 'i', 'reg', 'flags', 'result', 'iz', 'match', 'previousIsBackslash', 'characterInBrack'])
                        pass
                        var.put('result', var.get('reg').callprop('toString'))
                        if var.get('reg').get('source'):
                            var.put('match', var.get('result').callprop('match', JsRegExp('/\\/([^/]*)$/')))
                            if var.get('match').neg():
                                return var.get('result')
                            var.put('flags', var.get('match').get('1'))
                            var.put('result', Js(''))
                            var.put('characterInBrack', Js(False))
                            var.put('previousIsBackslash', Js(False))
                            #for JS loop
                            PyJsComma(var.put('i', Js(0.0)),var.put('iz', var.get('reg').get('source').get('length')))
                            while (var.get('i')<var.get('iz')):
                                try:
                                    var.put('ch', var.get('reg').get('source').callprop('charCodeAt', var.get('i')))
                                    if var.get('previousIsBackslash').neg():
                                        if var.get('characterInBrack'):
                                            if PyJsStrictEq(var.get('ch'),Js(93.0)):
                                                var.put('characterInBrack', Js(False))
                                        else:
                                            if PyJsStrictEq(var.get('ch'),Js(47.0)):
                                                var.put('result', Js('\\'), '+')
                                            else:
                                                if PyJsStrictEq(var.get('ch'),Js(91.0)):
                                                    var.put('characterInBrack', Js(True))
                                        var.put('result', var.get('escapeRegExpCharacter')(var.get('ch'), var.get('previousIsBackslash')), '+')
                                        var.put('previousIsBackslash', PyJsStrictEq(var.get('ch'),Js(92.0)))
                                    else:
                                        var.put('result', var.get('escapeRegExpCharacter')(var.get('ch'), var.get('previousIsBackslash')), '+')
                                        var.put('previousIsBackslash', Js(False))
                                finally:
                                        var.put('i',Js(var.get('i').to_number())+Js(1))
                            return (((Js('/')+var.get('result'))+Js('/'))+var.get('flags'))
                        return var.get('result')
                    PyJsHoisted_generateRegExp_.func_name = 'generateRegExp'
                    var.put('generateRegExp', PyJsHoisted_generateRegExp_)
                    @Js
                    def PyJsHoisted_escapeAllowedCharacter_(code, next, this, arguments, var=var):
                        var = Scope({'code':code, 'next':next, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'hex', 'next', 'code'])
                        var.put('result', Js('\\'))
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get('code'))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(8)):
                                SWITCHED = True
                                var.put('result', Js('b'), '+')
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(12)):
                                SWITCHED = True
                                var.put('result', Js('f'), '+')
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(9)):
                                SWITCHED = True
                                var.put('result', Js('t'), '+')
                                break
                            if True:
                                SWITCHED = True
                                var.put('hex', var.get('code').callprop('toString', Js(16.0)).callprop('toUpperCase'))
                                if (var.get('json') or (var.get('code')>Js(255))):
                                    var.put('result', ((Js('u')+Js('0000').callprop('slice', var.get('hex').get('length')))+var.get('hex')), '+')
                                else:
                                    if (PyJsStrictEq(var.get('code'),Js(0)) and var.get('esutils').get('code').callprop('isDecimalDigit', var.get('next')).neg()):
                                        var.put('result', Js('0'), '+')
                                    else:
                                        if PyJsStrictEq(var.get('code'),Js(11)):
                                            var.put('result', Js('x0B'), '+')
                                        else:
                                            var.put('result', ((Js('x')+Js('00').callprop('slice', var.get('hex').get('length')))+var.get('hex')), '+')
                                break
                            SWITCHED = True
                            break
                        return var.get('result')
                    PyJsHoisted_escapeAllowedCharacter_.func_name = 'escapeAllowedCharacter'
                    var.put('escapeAllowedCharacter', PyJsHoisted_escapeAllowedCharacter_)
                    @Js
                    def PyJsHoisted_escapeDisallowedCharacter_(code, this, arguments, var=var):
                        var = Scope({'code':code, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'code'])
                        var.put('result', Js('\\'))
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get('code'))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(92)):
                                SWITCHED = True
                                var.put('result', Js('\\'), '+')
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(10)):
                                SWITCHED = True
                                var.put('result', Js('n'), '+')
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(13)):
                                SWITCHED = True
                                var.put('result', Js('r'), '+')
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(8232)):
                                SWITCHED = True
                                var.put('result', Js('u2028'), '+')
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(8233)):
                                SWITCHED = True
                                var.put('result', Js('u2029'), '+')
                                break
                            if True:
                                SWITCHED = True
                                PyJsTempException = JsToPyException(var.get('Error').create(Js('Incorrectly classified character')))
                                raise PyJsTempException
                            SWITCHED = True
                            break
                        return var.get('result')
                    PyJsHoisted_escapeDisallowedCharacter_.func_name = 'escapeDisallowedCharacter'
                    var.put('escapeDisallowedCharacter', PyJsHoisted_escapeDisallowedCharacter_)
                    @Js
                    def PyJsHoisted_escapeDirective_(str, this, arguments, var=var):
                        var = Scope({'str':str, 'this':this, 'arguments':arguments}, var)
                        var.registers(['code', 'str', 'i', 'quote', 'iz'])
                        pass
                        var.put('quote', (Js('"') if PyJsStrictEq(var.get('quotes'),Js('double')) else Js("'")))
                        #for JS loop
                        PyJsComma(var.put('i', Js(0.0)),var.put('iz', var.get('str').get('length')))
                        while (var.get('i')<var.get('iz')):
                            try:
                                var.put('code', var.get('str').callprop('charCodeAt', var.get('i')))
                                if PyJsStrictEq(var.get('code'),Js(39)):
                                    var.put('quote', Js('"'))
                                    break
                                else:
                                    if PyJsStrictEq(var.get('code'),Js(34)):
                                        var.put('quote', Js("'"))
                                        break
                                    else:
                                        if PyJsStrictEq(var.get('code'),Js(92)):
                                            var.put('i',Js(var.get('i').to_number())+Js(1))
                            finally:
                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                        return ((var.get('quote')+var.get('str'))+var.get('quote'))
                    PyJsHoisted_escapeDirective_.func_name = 'escapeDirective'
                    var.put('escapeDirective', PyJsHoisted_escapeDirective_)
                    @Js
                    def PyJsHoisted_escapeString_(str, this, arguments, var=var):
                        var = Scope({'str':str, 'this':this, 'arguments':arguments}, var)
                        var.registers(['code', 'str', 'i', 'single', 'quote', 'result', 'doubleQuotes', 'singleQuotes', 'len'])
                        var.put('result', Js(''))
                        var.put('singleQuotes', Js(0.0))
                        var.put('doubleQuotes', Js(0.0))
                        #for JS loop
                        PyJsComma(var.put('i', Js(0.0)),var.put('len', var.get('str').get('length')))
                        while (var.get('i')<var.get('len')):
                            try:
                                var.put('code', var.get('str').callprop('charCodeAt', var.get('i')))
                                if PyJsStrictEq(var.get('code'),Js(39)):
                                    var.put('singleQuotes',Js(var.get('singleQuotes').to_number())+Js(1))
                                else:
                                    if PyJsStrictEq(var.get('code'),Js(34)):
                                        var.put('doubleQuotes',Js(var.get('doubleQuotes').to_number())+Js(1))
                                    else:
                                        if (PyJsStrictEq(var.get('code'),Js(47)) and var.get('json')):
                                            var.put('result', Js('\\'), '+')
                                        else:
                                            if (var.get('esutils').get('code').callprop('isLineTerminator', var.get('code')) or PyJsStrictEq(var.get('code'),Js(92))):
                                                var.put('result', var.get('escapeDisallowedCharacter')(var.get('code')), '+')
                                                continue
                                            else:
                                                if ((var.get('json') and (var.get('code')<Js(32))) or ((var.get('json') or var.get('escapeless')) or ((var.get('code')>=Js(32)) and (var.get('code')<=Js(126)))).neg()):
                                                    var.put('result', var.get('escapeAllowedCharacter')(var.get('code'), var.get('str').callprop('charCodeAt', (var.get('i')+Js(1.0)))), '+')
                                                    continue
                                var.put('result', var.get('String').callprop('fromCharCode', var.get('code')), '+')
                            finally:
                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                        var.put('single', (PyJsStrictEq(var.get('quotes'),Js('double')) or (PyJsStrictEq(var.get('quotes'),Js('auto')) and (var.get('doubleQuotes')<var.get('singleQuotes')))).neg())
                        var.put('quote', (Js("'") if var.get('single') else Js('"')))
                        if (var.get('singleQuotes') if var.get('single') else var.get('doubleQuotes')).neg():
                            return ((var.get('quote')+var.get('result'))+var.get('quote'))
                        var.put('str', var.get('result'))
                        var.put('result', var.get('quote'))
                        #for JS loop
                        PyJsComma(var.put('i', Js(0.0)),var.put('len', var.get('str').get('length')))
                        while (var.get('i')<var.get('len')):
                            try:
                                var.put('code', var.get('str').callprop('charCodeAt', var.get('i')))
                                if ((PyJsStrictEq(var.get('code'),Js(39)) and var.get('single')) or (PyJsStrictEq(var.get('code'),Js(34)) and var.get('single').neg())):
                                    var.put('result', Js('\\'), '+')
                                var.put('result', var.get('String').callprop('fromCharCode', var.get('code')), '+')
                            finally:
                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                        return (var.get('result')+var.get('quote'))
                    PyJsHoisted_escapeString_.func_name = 'escapeString'
                    var.put('escapeString', PyJsHoisted_escapeString_)
                    @Js
                    def PyJsHoisted_flattenToString_(arr, this, arguments, var=var):
                        var = Scope({'arr':arr, 'this':this, 'arguments':arguments}, var)
                        var.registers(['i', 'arr', 'result', 'iz', 'elem'])
                        var.put('result', Js(''))
                        #for JS loop
                        PyJsComma(var.put('i', Js(0.0)),var.put('iz', var.get('arr').get('length')))
                        while (var.get('i')<var.get('iz')):
                            try:
                                var.put('elem', var.get('arr').get(var.get('i')))
                                var.put('result', (var.get('flattenToString')(var.get('elem')) if var.get('isArray')(var.get('elem')) else var.get('elem')), '+')
                            finally:
                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                        return var.get('result')
                    PyJsHoisted_flattenToString_.func_name = 'flattenToString'
                    var.put('flattenToString', PyJsHoisted_flattenToString_)
                    @Js
                    def PyJsHoisted_toSourceNodeWhenNeeded_(generated, node, this, arguments, var=var):
                        var = Scope({'generated':generated, 'node':node, 'this':this, 'arguments':arguments}, var)
                        var.registers(['node', 'generated'])
                        if var.get('sourceMap').neg():
                            if var.get('isArray')(var.get('generated')):
                                return var.get('flattenToString')(var.get('generated'))
                            else:
                                return var.get('generated')
                        if (var.get('node')==var.get(u"null")):
                            if var.get('generated').instanceof(var.get('SourceNode')):
                                return var.get('generated')
                            else:
                                var.put('node', Js({}))
                        if (var.get('node').get('loc')==var.get(u"null")):
                            return var.get('SourceNode').create(var.get(u"null"), var.get(u"null"), var.get('sourceMap'), var.get('generated'), (var.get('node').get('name') or var.get(u"null")))
                        return var.get('SourceNode').create(var.get('node').get('loc').get('start').get('line'), var.get('node').get('loc').get('start').get('column'), ((var.get('node').get('loc').get('source') or var.get(u"null")) if PyJsStrictEq(var.get('sourceMap'),Js(True)) else var.get('sourceMap')), var.get('generated'), (var.get('node').get('name') or var.get(u"null")))
                    PyJsHoisted_toSourceNodeWhenNeeded_.func_name = 'toSourceNodeWhenNeeded'
                    var.put('toSourceNodeWhenNeeded', PyJsHoisted_toSourceNodeWhenNeeded_)
                    @Js
                    def PyJsHoisted_noEmptySpace_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return (var.get('space') if var.get('space') else Js(' '))
                    PyJsHoisted_noEmptySpace_.func_name = 'noEmptySpace'
                    var.put('noEmptySpace', PyJsHoisted_noEmptySpace_)
                    @Js
                    def PyJsHoisted_join_(left, right, this, arguments, var=var):
                        var = Scope({'left':left, 'right':right, 'this':this, 'arguments':arguments}, var)
                        var.registers(['left', 'rightCharCode', 'rightSource', 'leftCharCode', 'leftSource', 'right'])
                        var.put('leftSource', var.get('toSourceNodeWhenNeeded')(var.get('left')).callprop('toString'))
                        var.put('rightSource', var.get('toSourceNodeWhenNeeded')(var.get('right')).callprop('toString'))
                        var.put('leftCharCode', var.get('leftSource').callprop('charCodeAt', (var.get('leftSource').get('length')-Js(1.0))))
                        var.put('rightCharCode', var.get('rightSource').callprop('charCodeAt', Js(0.0)))
                        def PyJs_LONG_1041_(var=var):
                            return ((((PyJsStrictEq(var.get('leftCharCode'),Js(43)) or PyJsStrictEq(var.get('leftCharCode'),Js(45))) and PyJsStrictEq(var.get('leftCharCode'),var.get('rightCharCode'))) or (var.get('esutils').get('code').callprop('isIdentifierPart', var.get('leftCharCode')) and var.get('esutils').get('code').callprop('isIdentifierPart', var.get('rightCharCode')))) or (PyJsStrictEq(var.get('leftCharCode'),Js(47)) and PyJsStrictEq(var.get('rightCharCode'),Js(105))))
                        if PyJs_LONG_1041_():
                            return Js([var.get('left'), var.get('noEmptySpace')(), var.get('right')])
                        else:
                            if (((var.get('esutils').get('code').callprop('isWhiteSpace', var.get('leftCharCode')) or var.get('esutils').get('code').callprop('isLineTerminator', var.get('leftCharCode'))) or var.get('esutils').get('code').callprop('isWhiteSpace', var.get('rightCharCode'))) or var.get('esutils').get('code').callprop('isLineTerminator', var.get('rightCharCode'))):
                                return Js([var.get('left'), var.get('right')])
                        return Js([var.get('left'), var.get('space'), var.get('right')])
                    PyJsHoisted_join_.func_name = 'join'
                    var.put('join', PyJsHoisted_join_)
                    @Js
                    def PyJsHoisted_addIndent_(stmt, this, arguments, var=var):
                        var = Scope({'stmt':stmt, 'this':this, 'arguments':arguments}, var)
                        var.registers(['stmt'])
                        return Js([var.get('base'), var.get('stmt')])
                    PyJsHoisted_addIndent_.func_name = 'addIndent'
                    var.put('addIndent', PyJsHoisted_addIndent_)
                    @Js
                    def PyJsHoisted_withIndent_(fn, this, arguments, var=var):
                        var = Scope({'fn':fn, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'previousBase', 'fn'])
                        pass
                        var.put('previousBase', var.get('base'))
                        var.put('base', var.get('indent'), '+')
                        var.put('result', var.get('fn').callprop('call', var.get(u"this"), var.get('base')))
                        var.put('base', var.get('previousBase'))
                        return var.get('result')
                    PyJsHoisted_withIndent_.func_name = 'withIndent'
                    var.put('withIndent', PyJsHoisted_withIndent_)
                    @Js
                    def PyJsHoisted_calculateSpaces_(str, this, arguments, var=var):
                        var = Scope({'str':str, 'this':this, 'arguments':arguments}, var)
                        var.registers(['str', 'i'])
                        pass
                        #for JS loop
                        var.put('i', (var.get('str').get('length')-Js(1.0)))
                        while (var.get('i')>=Js(0.0)):
                            try:
                                if var.get('esutils').get('code').callprop('isLineTerminator', var.get('str').callprop('charCodeAt', var.get('i'))):
                                    break
                            finally:
                                    var.put('i',Js(var.get('i').to_number())-Js(1))
                        return ((var.get('str').get('length')-Js(1.0))-var.get('i'))
                    PyJsHoisted_calculateSpaces_.func_name = 'calculateSpaces'
                    var.put('calculateSpaces', PyJsHoisted_calculateSpaces_)
                    @Js
                    def PyJsHoisted_adjustMultilineComment_(value, specialBase, this, arguments, var=var):
                        var = Scope({'value':value, 'specialBase':specialBase, 'this':this, 'arguments':arguments}, var)
                        var.registers(['line', 'sn', 'specialBase', 'spaces', 'i', 'j', 'previousBase', 'array', 'value', 'len'])
                        pass
                        var.put('array', var.get('value').callprop('split', JsRegExp('/\\r\\n|[\\r\\n]/')))
                        var.put('spaces', var.get('Number').get('MAX_VALUE'))
                        #for JS loop
                        PyJsComma(var.put('i', Js(1.0)),var.put('len', var.get('array').get('length')))
                        while (var.get('i')<var.get('len')):
                            try:
                                var.put('line', var.get('array').get(var.get('i')))
                                var.put('j', Js(0.0))
                                while ((var.get('j')<var.get('line').get('length')) and var.get('esutils').get('code').callprop('isWhiteSpace', var.get('line').callprop('charCodeAt', var.get('j')))):
                                    var.put('j',Js(var.get('j').to_number())+Js(1))
                                if (var.get('spaces')>var.get('j')):
                                    var.put('spaces', var.get('j'))
                            finally:
                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                        if PyJsStrictNeq(var.get('specialBase',throw=False).typeof(),Js('undefined')):
                            var.put('previousBase', var.get('base'))
                            if PyJsStrictEq(var.get('array').get('1').get(var.get('spaces')),Js('*')):
                                var.put('specialBase', Js(' '), '+')
                            var.put('base', var.get('specialBase'))
                        else:
                            if (var.get('spaces')&Js(1.0)):
                                var.put('spaces',Js(var.get('spaces').to_number())-Js(1))
                            var.put('previousBase', var.get('base'))
                        #for JS loop
                        PyJsComma(var.put('i', Js(1.0)),var.put('len', var.get('array').get('length')))
                        while (var.get('i')<var.get('len')):
                            try:
                                var.put('sn', var.get('toSourceNodeWhenNeeded')(var.get('addIndent')(var.get('array').get(var.get('i')).callprop('slice', var.get('spaces')))))
                                var.get('array').put(var.get('i'), (var.get('sn').callprop('join', Js('')) if var.get('sourceMap') else var.get('sn')))
                            finally:
                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                        var.put('base', var.get('previousBase'))
                        return var.get('array').callprop('join', Js('\n'))
                    PyJsHoisted_adjustMultilineComment_.func_name = 'adjustMultilineComment'
                    var.put('adjustMultilineComment', PyJsHoisted_adjustMultilineComment_)
                    @Js
                    def PyJsHoisted_generateComment_(comment, specialBase, this, arguments, var=var):
                        var = Scope({'comment':comment, 'specialBase':specialBase, 'this':this, 'arguments':arguments}, var)
                        var.registers(['specialBase', 'comment'])
                        if PyJsStrictEq(var.get('comment').get('type'),Js('Line')):
                            if var.get('endsWithLineTerminator')(var.get('comment').get('value')):
                                return (Js('//')+var.get('comment').get('value'))
                            else:
                                return ((Js('//')+var.get('comment').get('value'))+Js('\n'))
                        if (var.get('extra').get('format').get('indent').get('adjustMultilineComment') and JsRegExp('/[\\n\\r]/').callprop('test', var.get('comment').get('value'))):
                            return var.get('adjustMultilineComment')(((Js('/*')+var.get('comment').get('value'))+Js('*/')), var.get('specialBase'))
                        return ((Js('/*')+var.get('comment').get('value'))+Js('*/'))
                    PyJsHoisted_generateComment_.func_name = 'generateComment'
                    var.put('generateComment', PyJsHoisted_generateComment_)
                    @Js
                    def PyJsHoisted_addCommentsToStatement_(stmt, result, this, arguments, var=var):
                        var = Scope({'stmt':stmt, 'result':result, 'this':this, 'arguments':arguments}, var)
                        var.registers(['tailingToStatement', 'comment', 'specialBase', 'i', 'stmt', 'result', 'save', 'fragment', 'len'])
                        pass
                        if (var.get('stmt').get('leadingComments') and (var.get('stmt').get('leadingComments').get('length')>Js(0.0))):
                            var.put('save', var.get('result'))
                            var.put('comment', var.get('stmt').get('leadingComments').get('0'))
                            var.put('result', Js([]))
                            if ((var.get('safeConcatenation') and PyJsStrictEq(var.get('stmt').get('type'),var.get('Syntax').get('Program'))) and PyJsStrictEq(var.get('stmt').get('body').get('length'),Js(0.0))):
                                var.get('result').callprop('push', Js('\n'))
                            var.get('result').callprop('push', var.get('generateComment')(var.get('comment')))
                            if var.get('endsWithLineTerminator')(var.get('toSourceNodeWhenNeeded')(var.get('result')).callprop('toString')).neg():
                                var.get('result').callprop('push', Js('\n'))
                            #for JS loop
                            PyJsComma(var.put('i', Js(1.0)),var.put('len', var.get('stmt').get('leadingComments').get('length')))
                            while (var.get('i')<var.get('len')):
                                try:
                                    var.put('comment', var.get('stmt').get('leadingComments').get(var.get('i')))
                                    var.put('fragment', Js([var.get('generateComment')(var.get('comment'))]))
                                    if var.get('endsWithLineTerminator')(var.get('toSourceNodeWhenNeeded')(var.get('fragment')).callprop('toString')).neg():
                                        var.get('fragment').callprop('push', Js('\n'))
                                    var.get('result').callprop('push', var.get('addIndent')(var.get('fragment')))
                                finally:
                                        var.put('i',Js(var.get('i').to_number())+Js(1))
                            var.get('result').callprop('push', var.get('addIndent')(var.get('save')))
                        if var.get('stmt').get('trailingComments'):
                            var.put('tailingToStatement', var.get('endsWithLineTerminator')(var.get('toSourceNodeWhenNeeded')(var.get('result')).callprop('toString')).neg())
                            var.put('specialBase', var.get('stringRepeat')(Js(' '), var.get('calculateSpaces')(var.get('toSourceNodeWhenNeeded')(Js([var.get('base'), var.get('result'), var.get('indent')])).callprop('toString'))))
                            #for JS loop
                            PyJsComma(var.put('i', Js(0.0)),var.put('len', var.get('stmt').get('trailingComments').get('length')))
                            while (var.get('i')<var.get('len')):
                                try:
                                    var.put('comment', var.get('stmt').get('trailingComments').get(var.get('i')))
                                    if var.get('tailingToStatement'):
                                        if PyJsStrictEq(var.get('i'),Js(0.0)):
                                            var.put('result', Js([var.get('result'), var.get('indent')]))
                                        else:
                                            var.put('result', Js([var.get('result'), var.get('specialBase')]))
                                        var.get('result').callprop('push', var.get('generateComment')(var.get('comment'), var.get('specialBase')))
                                    else:
                                        var.put('result', Js([var.get('result'), var.get('addIndent')(var.get('generateComment')(var.get('comment')))]))
                                    if (PyJsStrictNeq(var.get('i'),(var.get('len')-Js(1.0))) and var.get('endsWithLineTerminator')(var.get('toSourceNodeWhenNeeded')(var.get('result')).callprop('toString')).neg()):
                                        var.put('result', Js([var.get('result'), Js('\n')]))
                                finally:
                                        var.put('i',Js(var.get('i').to_number())+Js(1))
                        return var.get('result')
                    PyJsHoisted_addCommentsToStatement_.func_name = 'addCommentsToStatement'
                    var.put('addCommentsToStatement', PyJsHoisted_addCommentsToStatement_)
                    @Js
                    def PyJsHoisted_parenthesize_(text, current, should, this, arguments, var=var):
                        var = Scope({'text':text, 'current':current, 'should':should, 'this':this, 'arguments':arguments}, var)
                        var.registers(['text', 'should', 'current'])
                        if (var.get('current')<var.get('should')):
                            return Js([Js('('), var.get('text'), Js(')')])
                        return var.get('text')
                    PyJsHoisted_parenthesize_.func_name = 'parenthesize'
                    var.put('parenthesize', PyJsHoisted_parenthesize_)
                    @Js
                    def PyJsHoisted_maybeBlock_(stmt, semicolonOptional, functionBody, this, arguments, var=var):
                        var = Scope({'stmt':stmt, 'semicolonOptional':semicolonOptional, 'functionBody':functionBody, 'this':this, 'arguments':arguments}, var)
                        var.registers(['noLeadingComment', 'functionBody', 'result', 'stmt', 'semicolonOptional'])
                        pass
                        var.put('noLeadingComment', (var.get('extra').get('comment').neg() or var.get('stmt').get('leadingComments').neg()))
                        if (PyJsStrictEq(var.get('stmt').get('type'),var.get('Syntax').get('BlockStatement')) and var.get('noLeadingComment')):
                            return Js([var.get('space'), var.get('generateStatement')(var.get('stmt'), Js({'functionBody':var.get('functionBody')}))])
                        if (PyJsStrictEq(var.get('stmt').get('type'),var.get('Syntax').get('EmptyStatement')) and var.get('noLeadingComment')):
                            return Js(';')
                        @Js
                        def PyJs_anonymous_1042_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            var.put('result', Js([var.get('newline'), var.get('addIndent')(var.get('generateStatement')(var.get('stmt'), Js({'semicolonOptional':var.get('semicolonOptional'),'functionBody':var.get('functionBody')})))]))
                        PyJs_anonymous_1042_._set_name('anonymous')
                        var.get('withIndent')(PyJs_anonymous_1042_)
                        return var.get('result')
                    PyJsHoisted_maybeBlock_.func_name = 'maybeBlock'
                    var.put('maybeBlock', PyJsHoisted_maybeBlock_)
                    @Js
                    def PyJsHoisted_maybeBlockSuffix_(stmt, result, this, arguments, var=var):
                        var = Scope({'stmt':stmt, 'result':result, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'stmt', 'ends'])
                        var.put('ends', var.get('endsWithLineTerminator')(var.get('toSourceNodeWhenNeeded')(var.get('result')).callprop('toString')))
                        if ((PyJsStrictEq(var.get('stmt').get('type'),var.get('Syntax').get('BlockStatement')) and (var.get('extra').get('comment').neg() or var.get('stmt').get('leadingComments').neg())) and var.get('ends').neg()):
                            return Js([var.get('result'), var.get('space')])
                        if var.get('ends'):
                            return Js([var.get('result'), var.get('base')])
                        return Js([var.get('result'), var.get('newline'), var.get('base')])
                    PyJsHoisted_maybeBlockSuffix_.func_name = 'maybeBlockSuffix'
                    var.put('maybeBlockSuffix', PyJsHoisted_maybeBlockSuffix_)
                    @Js
                    def PyJsHoisted_generateVerbatim_(expr, option, this, arguments, var=var):
                        var = Scope({'expr':expr, 'option':option, 'this':this, 'arguments':arguments}, var)
                        var.registers(['option', 'result', 'i', 'expr'])
                        pass
                        var.put('result', var.get('expr').get(var.get('extra').get('verbatim')).callprop('split', JsRegExp('/\\r\\n|\\n/')))
                        #for JS loop
                        var.put('i', Js(1.0))
                        while (var.get('i')<var.get('result').get('length')):
                            try:
                                var.get('result').put(var.get('i'), ((var.get('newline')+var.get('base'))+var.get('result').get(var.get('i'))))
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                        var.put('result', var.get('parenthesize')(var.get('result'), var.get('Precedence').get('Sequence'), var.get('option').get('precedence')))
                        return var.get('toSourceNodeWhenNeeded')(var.get('result'), var.get('expr'))
                    PyJsHoisted_generateVerbatim_.func_name = 'generateVerbatim'
                    var.put('generateVerbatim', PyJsHoisted_generateVerbatim_)
                    @Js
                    def PyJsHoisted_generateIdentifier_(node, this, arguments, var=var):
                        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
                        var.registers(['node'])
                        return var.get('toSourceNodeWhenNeeded')(var.get('node').get('name'), var.get('node'))
                    PyJsHoisted_generateIdentifier_.func_name = 'generateIdentifier'
                    var.put('generateIdentifier', PyJsHoisted_generateIdentifier_)
                    @Js
                    def PyJsHoisted_generatePattern_(node, options, this, arguments, var=var):
                        var = Scope({'node':node, 'options':options, 'this':this, 'arguments':arguments}, var)
                        var.registers(['node', 'result', 'options'])
                        pass
                        if PyJsStrictEq(var.get('node').get('type'),var.get('Syntax').get('Identifier')):
                            var.put('result', var.get('generateIdentifier')(var.get('node')))
                        else:
                            var.put('result', var.get('generateExpression')(var.get('node'), Js({'precedence':var.get('options').get('precedence'),'allowIn':var.get('options').get('allowIn'),'allowCall':Js(True)})))
                        return var.get('result')
                    PyJsHoisted_generatePattern_.func_name = 'generatePattern'
                    var.put('generatePattern', PyJsHoisted_generatePattern_)
                    @Js
                    def PyJsHoisted_generateFunctionBody_(node, this, arguments, var=var):
                        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
                        var.registers(['node', 'i', 'expr', 'result', 'arrow', 'len'])
                        pass
                        var.put('arrow', PyJsStrictEq(var.get('node').get('type'),var.get('Syntax').get('ArrowFunctionExpression')))
                        if ((var.get('arrow') and PyJsStrictEq(var.get('node').get('params').get('length'),Js(1.0))) and PyJsStrictEq(var.get('node').get('params').get('0').get('type'),var.get('Syntax').get('Identifier'))):
                            var.put('result', Js([var.get('generateIdentifier')(var.get('node').get('params').get('0'))]))
                        else:
                            var.put('result', Js([Js('(')]))
                            #for JS loop
                            PyJsComma(var.put('i', Js(0.0)),var.put('len', var.get('node').get('params').get('length')))
                            while (var.get('i')<var.get('len')):
                                try:
                                    var.get('result').callprop('push', var.get('generatePattern')(var.get('node').get('params').get(var.get('i')), Js({'precedence':var.get('Precedence').get('Assignment'),'allowIn':Js(True)})))
                                    if ((var.get('i')+Js(1.0))<var.get('len')):
                                        var.get('result').callprop('push', (Js(',')+var.get('space')))
                                finally:
                                        var.put('i',Js(var.get('i').to_number())+Js(1))
                            var.get('result').callprop('push', Js(')'))
                        if var.get('arrow'):
                            var.get('result').callprop('push', var.get('space'), Js('=>'))
                        if var.get('node').get('expression'):
                            var.get('result').callprop('push', var.get('space'))
                            var.put('expr', var.get('generateExpression')(var.get('node').get('body'), Js({'precedence':var.get('Precedence').get('Assignment'),'allowIn':Js(True),'allowCall':Js(True)})))
                            if PyJsStrictEq(var.get('expr').callprop('toString').callprop('charAt', Js(0.0)),Js('{')):
                                var.put('expr', Js([Js('('), var.get('expr'), Js(')')]))
                            var.get('result').callprop('push', var.get('expr'))
                        else:
                            var.get('result').callprop('push', var.get('maybeBlock')(var.get('node').get('body'), Js(False), Js(True)))
                        return var.get('result')
                    PyJsHoisted_generateFunctionBody_.func_name = 'generateFunctionBody'
                    var.put('generateFunctionBody', PyJsHoisted_generateFunctionBody_)
                    @Js
                    def PyJsHoisted_generateExpression_(expr, option, this, arguments, var=var):
                        var = Scope({'expr':expr, 'option':option, 'this':this, 'arguments':arguments}, var)
                        var.registers(['allowUnparenthesizedNew', 'i', 'expr', 'type', 'precedence', 'allowIn', 'len', 'raw', 'leftCharCode', 'currentPrecedence', 'result', 'leftSource', 'allowCall', 'rightCharCode', 'fragment', 'property', 'option', 'isGenerator', 'multiline'])
                        pass
                        var.put('precedence', var.get('option').get('precedence'))
                        var.put('allowIn', var.get('option').get('allowIn'))
                        var.put('allowCall', var.get('option').get('allowCall'))
                        var.put('type', (var.get('expr').get('type') or var.get('option').get('type')))
                        if (var.get('extra').get('verbatim') and var.get('expr').callprop('hasOwnProperty', var.get('extra').get('verbatim'))):
                            return var.get('generateVerbatim')(var.get('expr'), var.get('option'))
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get('type'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('SequenceExpression')):
                                SWITCHED = True
                                var.put('result', Js([]))
                                var.put('allowIn', (var.get('Precedence').get('Sequence')<var.get('precedence')), '|')
                                #for JS loop
                                PyJsComma(var.put('i', Js(0.0)),var.put('len', var.get('expr').get('expressions').get('length')))
                                while (var.get('i')<var.get('len')):
                                    try:
                                        var.get('result').callprop('push', var.get('generateExpression')(var.get('expr').get('expressions').get(var.get('i')), Js({'precedence':var.get('Precedence').get('Assignment'),'allowIn':var.get('allowIn'),'allowCall':Js(True)})))
                                        if ((var.get('i')+Js(1.0))<var.get('len')):
                                            var.get('result').callprop('push', (Js(',')+var.get('space')))
                                    finally:
                                            var.put('i',Js(var.get('i').to_number())+Js(1))
                                var.put('result', var.get('parenthesize')(var.get('result'), var.get('Precedence').get('Sequence'), var.get('precedence')))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('AssignmentExpression')):
                                SWITCHED = True
                                var.put('allowIn', (var.get('Precedence').get('Assignment')<var.get('precedence')), '|')
                                def PyJs_LONG_1043_(var=var):
                                    return var.get('parenthesize')(Js([var.get('generateExpression')(var.get('expr').get('left'), Js({'precedence':var.get('Precedence').get('Call'),'allowIn':var.get('allowIn'),'allowCall':Js(True)})), ((var.get('space')+var.get('expr').get('operator'))+var.get('space')), var.get('generateExpression')(var.get('expr').get('right'), Js({'precedence':var.get('Precedence').get('Assignment'),'allowIn':var.get('allowIn'),'allowCall':Js(True)}))]), var.get('Precedence').get('Assignment'), var.get('precedence'))
                                var.put('result', PyJs_LONG_1043_())
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('ArrowFunctionExpression')):
                                SWITCHED = True
                                var.put('allowIn', (var.get('Precedence').get('ArrowFunction')<var.get('precedence')), '|')
                                var.put('result', var.get('parenthesize')(var.get('generateFunctionBody')(var.get('expr')), var.get('Precedence').get('ArrowFunction'), var.get('precedence')))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('ConditionalExpression')):
                                SWITCHED = True
                                var.put('allowIn', (var.get('Precedence').get('Conditional')<var.get('precedence')), '|')
                                def PyJs_LONG_1044_(var=var):
                                    return var.get('parenthesize')(Js([var.get('generateExpression')(var.get('expr').get('test'), Js({'precedence':var.get('Precedence').get('LogicalOR'),'allowIn':var.get('allowIn'),'allowCall':Js(True)})), ((var.get('space')+Js('?'))+var.get('space')), var.get('generateExpression')(var.get('expr').get('consequent'), Js({'precedence':var.get('Precedence').get('Assignment'),'allowIn':var.get('allowIn'),'allowCall':Js(True)})), ((var.get('space')+Js(':'))+var.get('space')), var.get('generateExpression')(var.get('expr').get('alternate'), Js({'precedence':var.get('Precedence').get('Assignment'),'allowIn':var.get('allowIn'),'allowCall':Js(True)}))]), var.get('Precedence').get('Conditional'), var.get('precedence'))
                                var.put('result', PyJs_LONG_1044_())
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('LogicalExpression')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('BinaryExpression')):
                                SWITCHED = True
                                var.put('currentPrecedence', var.get('BinaryPrecedence').get(var.get('expr').get('operator')))
                                var.put('allowIn', (var.get('currentPrecedence')<var.get('precedence')), '|')
                                var.put('fragment', var.get('generateExpression')(var.get('expr').get('left'), Js({'precedence':var.get('currentPrecedence'),'allowIn':var.get('allowIn'),'allowCall':Js(True)})))
                                var.put('leftSource', var.get('fragment').callprop('toString'))
                                if (PyJsStrictEq(var.get('leftSource').callprop('charCodeAt', (var.get('leftSource').get('length')-Js(1.0))),Js(47)) and var.get('esutils').get('code').callprop('isIdentifierPart', var.get('expr').get('operator').callprop('charCodeAt', Js(0.0)))):
                                    var.put('result', Js([var.get('fragment'), var.get('noEmptySpace')(), var.get('expr').get('operator')]))
                                else:
                                    var.put('result', var.get('join')(var.get('fragment'), var.get('expr').get('operator')))
                                var.put('fragment', var.get('generateExpression')(var.get('expr').get('right'), Js({'precedence':(var.get('currentPrecedence')+Js(1.0)),'allowIn':var.get('allowIn'),'allowCall':Js(True)})))
                                if ((PyJsStrictEq(var.get('expr').get('operator'),Js('/')) and PyJsStrictEq(var.get('fragment').callprop('toString').callprop('charAt', Js(0.0)),Js('/'))) or (PyJsStrictEq(var.get('expr').get('operator').callprop('slice', (-Js(1.0))),Js('<')) and PyJsStrictEq(var.get('fragment').callprop('toString').callprop('slice', Js(0.0), Js(3.0)),Js('!--')))):
                                    var.get('result').callprop('push', var.get('noEmptySpace')(), var.get('fragment'))
                                else:
                                    var.put('result', var.get('join')(var.get('result'), var.get('fragment')))
                                if (PyJsStrictEq(var.get('expr').get('operator'),Js('in')) and var.get('allowIn').neg()):
                                    var.put('result', Js([Js('('), var.get('result'), Js(')')]))
                                else:
                                    var.put('result', var.get('parenthesize')(var.get('result'), var.get('currentPrecedence'), var.get('precedence')))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('CallExpression')):
                                SWITCHED = True
                                var.put('result', Js([var.get('generateExpression')(var.get('expr').get('callee'), Js({'precedence':var.get('Precedence').get('Call'),'allowIn':Js(True),'allowCall':Js(True),'allowUnparenthesizedNew':Js(False)}))]))
                                var.get('result').callprop('push', Js('('))
                                #for JS loop
                                PyJsComma(var.put('i', Js(0.0)),var.put('len', var.get('expr').get('arguments').get('length')))
                                while (var.get('i')<var.get('len')):
                                    try:
                                        var.get('result').callprop('push', var.get('generateExpression')(var.get('expr').get('arguments').get(var.get('i')), Js({'precedence':var.get('Precedence').get('Assignment'),'allowIn':Js(True),'allowCall':Js(True)})))
                                        if ((var.get('i')+Js(1.0))<var.get('len')):
                                            var.get('result').callprop('push', (Js(',')+var.get('space')))
                                    finally:
                                            var.put('i',Js(var.get('i').to_number())+Js(1))
                                var.get('result').callprop('push', Js(')'))
                                if var.get('allowCall').neg():
                                    var.put('result', Js([Js('('), var.get('result'), Js(')')]))
                                else:
                                    var.put('result', var.get('parenthesize')(var.get('result'), var.get('Precedence').get('Call'), var.get('precedence')))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('NewExpression')):
                                SWITCHED = True
                                var.put('len', var.get('expr').get('arguments').get('length'))
                                var.put('allowUnparenthesizedNew', (PyJsStrictEq(var.get('option').get('allowUnparenthesizedNew'),var.get('undefined')) or var.get('option').get('allowUnparenthesizedNew')))
                                var.put('result', var.get('join')(Js('new'), var.get('generateExpression')(var.get('expr').get('callee'), Js({'precedence':var.get('Precedence').get('New'),'allowIn':Js(True),'allowCall':Js(False),'allowUnparenthesizedNew':((var.get('allowUnparenthesizedNew') and var.get('parentheses').neg()) and PyJsStrictEq(var.get('len'),Js(0.0)))}))))
                                if ((var.get('allowUnparenthesizedNew').neg() or var.get('parentheses')) or (var.get('len')>Js(0.0))):
                                    var.get('result').callprop('push', Js('('))
                                    #for JS loop
                                    var.put('i', Js(0.0))
                                    while (var.get('i')<var.get('len')):
                                        try:
                                            var.get('result').callprop('push', var.get('generateExpression')(var.get('expr').get('arguments').get(var.get('i')), Js({'precedence':var.get('Precedence').get('Assignment'),'allowIn':Js(True),'allowCall':Js(True)})))
                                            if ((var.get('i')+Js(1.0))<var.get('len')):
                                                var.get('result').callprop('push', (Js(',')+var.get('space')))
                                        finally:
                                                var.put('i',Js(var.get('i').to_number())+Js(1))
                                    var.get('result').callprop('push', Js(')'))
                                var.put('result', var.get('parenthesize')(var.get('result'), var.get('Precedence').get('New'), var.get('precedence')))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('MemberExpression')):
                                SWITCHED = True
                                var.put('result', Js([var.get('generateExpression')(var.get('expr').get('object'), Js({'precedence':var.get('Precedence').get('Call'),'allowIn':Js(True),'allowCall':var.get('allowCall'),'allowUnparenthesizedNew':Js(False)}))]))
                                if var.get('expr').get('computed'):
                                    var.get('result').callprop('push', Js('['), var.get('generateExpression')(var.get('expr').get('property'), Js({'precedence':var.get('Precedence').get('Sequence'),'allowIn':Js(True),'allowCall':var.get('allowCall')})), Js(']'))
                                else:
                                    if (PyJsStrictEq(var.get('expr').get('object').get('type'),var.get('Syntax').get('Literal')) and PyJsStrictEq(var.get('expr').get('object').get('value').typeof(),Js('number'))):
                                        var.put('fragment', var.get('toSourceNodeWhenNeeded')(var.get('result')).callprop('toString'))
                                        def PyJs_LONG_1045_(var=var):
                                            return ((((var.get('fragment').callprop('indexOf', Js('.'))<Js(0.0)) and JsRegExp('/[eExX]/').callprop('test', var.get('fragment')).neg()) and var.get('esutils').get('code').callprop('isDecimalDigit', var.get('fragment').callprop('charCodeAt', (var.get('fragment').get('length')-Js(1.0))))) and ((var.get('fragment').get('length')>=Js(2.0)) and PyJsStrictEq(var.get('fragment').callprop('charCodeAt', Js(0.0)),Js(48.0))).neg())
                                        if PyJs_LONG_1045_():
                                            var.get('result').callprop('push', Js('.'))
                                    var.get('result').callprop('push', Js('.'), var.get('generateIdentifier')(var.get('expr').get('property')))
                                var.put('result', var.get('parenthesize')(var.get('result'), var.get('Precedence').get('Member'), var.get('precedence')))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('UnaryExpression')):
                                SWITCHED = True
                                var.put('fragment', var.get('generateExpression')(var.get('expr').get('argument'), Js({'precedence':var.get('Precedence').get('Unary'),'allowIn':Js(True),'allowCall':Js(True)})))
                                if PyJsStrictEq(var.get('space'),Js('')):
                                    var.put('result', var.get('join')(var.get('expr').get('operator'), var.get('fragment')))
                                else:
                                    var.put('result', Js([var.get('expr').get('operator')]))
                                    if (var.get('expr').get('operator').get('length')>Js(2.0)):
                                        var.put('result', var.get('join')(var.get('result'), var.get('fragment')))
                                    else:
                                        var.put('leftSource', var.get('toSourceNodeWhenNeeded')(var.get('result')).callprop('toString'))
                                        var.put('leftCharCode', var.get('leftSource').callprop('charCodeAt', (var.get('leftSource').get('length')-Js(1.0))))
                                        var.put('rightCharCode', var.get('fragment').callprop('toString').callprop('charCodeAt', Js(0.0)))
                                        if (((PyJsStrictEq(var.get('leftCharCode'),Js(43)) or PyJsStrictEq(var.get('leftCharCode'),Js(45))) and PyJsStrictEq(var.get('leftCharCode'),var.get('rightCharCode'))) or (var.get('esutils').get('code').callprop('isIdentifierPart', var.get('leftCharCode')) and var.get('esutils').get('code').callprop('isIdentifierPart', var.get('rightCharCode')))):
                                            var.get('result').callprop('push', var.get('noEmptySpace')(), var.get('fragment'))
                                        else:
                                            var.get('result').callprop('push', var.get('fragment'))
                                var.put('result', var.get('parenthesize')(var.get('result'), var.get('Precedence').get('Unary'), var.get('precedence')))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('YieldExpression')):
                                SWITCHED = True
                                if var.get('expr').get('delegate'):
                                    var.put('result', Js('yield*'))
                                else:
                                    var.put('result', Js('yield'))
                                if var.get('expr').get('argument'):
                                    var.put('result', var.get('join')(var.get('result'), var.get('generateExpression')(var.get('expr').get('argument'), Js({'precedence':var.get('Precedence').get('Yield'),'allowIn':Js(True),'allowCall':Js(True)}))))
                                var.put('result', var.get('parenthesize')(var.get('result'), var.get('Precedence').get('Yield'), var.get('precedence')))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('UpdateExpression')):
                                SWITCHED = True
                                if var.get('expr').get('prefix'):
                                    var.put('result', var.get('parenthesize')(Js([var.get('expr').get('operator'), var.get('generateExpression')(var.get('expr').get('argument'), Js({'precedence':var.get('Precedence').get('Unary'),'allowIn':Js(True),'allowCall':Js(True)}))]), var.get('Precedence').get('Unary'), var.get('precedence')))
                                else:
                                    var.put('result', var.get('parenthesize')(Js([var.get('generateExpression')(var.get('expr').get('argument'), Js({'precedence':var.get('Precedence').get('Postfix'),'allowIn':Js(True),'allowCall':Js(True)})), var.get('expr').get('operator')]), var.get('Precedence').get('Postfix'), var.get('precedence')))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('FunctionExpression')):
                                SWITCHED = True
                                var.put('isGenerator', (var.get('expr').get('generator') and var.get('extra').get('moz').get('starlessGenerator').neg()))
                                var.put('result', (Js('function*') if var.get('isGenerator') else Js('function')))
                                if var.get('expr').get('id'):
                                    var.put('result', Js([var.get('result'), (var.get('space') if var.get('isGenerator') else var.get('noEmptySpace')()), var.get('generateIdentifier')(var.get('expr').get('id')), var.get('generateFunctionBody')(var.get('expr'))]))
                                else:
                                    var.put('result', Js([(var.get('result')+var.get('space')), var.get('generateFunctionBody')(var.get('expr'))]))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('ArrayPattern')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('ArrayExpression')):
                                SWITCHED = True
                                if var.get('expr').get('elements').get('length').neg():
                                    var.put('result', Js('[]'))
                                    break
                                var.put('multiline', (var.get('expr').get('elements').get('length')>Js(1.0)))
                                var.put('result', Js([Js('['), (var.get('newline') if var.get('multiline') else Js(''))]))
                                @Js
                                def PyJs_anonymous_1046_(indent, this, arguments, var=var):
                                    var = Scope({'indent':indent, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['indent'])
                                    #for JS loop
                                    PyJsComma(var.put('i', Js(0.0)),var.put('len', var.get('expr').get('elements').get('length')))
                                    while (var.get('i')<var.get('len')):
                                        try:
                                            if var.get('expr').get('elements').get(var.get('i')).neg():
                                                if var.get('multiline'):
                                                    var.get('result').callprop('push', var.get('indent'))
                                                if PyJsStrictEq((var.get('i')+Js(1.0)),var.get('len')):
                                                    var.get('result').callprop('push', Js(','))
                                            else:
                                                var.get('result').callprop('push', (var.get('indent') if var.get('multiline') else Js('')), var.get('generateExpression')(var.get('expr').get('elements').get(var.get('i')), Js({'precedence':var.get('Precedence').get('Assignment'),'allowIn':Js(True),'allowCall':Js(True)})))
                                            if ((var.get('i')+Js(1.0))<var.get('len')):
                                                var.get('result').callprop('push', (Js(',')+(var.get('newline') if var.get('multiline') else var.get('space'))))
                                        finally:
                                                var.put('i',Js(var.get('i').to_number())+Js(1))
                                PyJs_anonymous_1046_._set_name('anonymous')
                                var.get('withIndent')(PyJs_anonymous_1046_)
                                if (var.get('multiline') and var.get('endsWithLineTerminator')(var.get('toSourceNodeWhenNeeded')(var.get('result')).callprop('toString')).neg()):
                                    var.get('result').callprop('push', var.get('newline'))
                                var.get('result').callprop('push', (var.get('base') if var.get('multiline') else Js('')), Js(']'))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('Property')):
                                SWITCHED = True
                                if (PyJsStrictEq(var.get('expr').get('kind'),Js('get')) or PyJsStrictEq(var.get('expr').get('kind'),Js('set'))):
                                    var.put('result', Js([var.get('expr').get('kind'), var.get('noEmptySpace')(), var.get('generateExpression')(var.get('expr').get('key'), Js({'precedence':var.get('Precedence').get('Sequence'),'allowIn':Js(True),'allowCall':Js(True)})), var.get('generateFunctionBody')(var.get('expr').get('value'))]))
                                else:
                                    if var.get('expr').get('shorthand'):
                                        var.put('result', var.get('generateExpression')(var.get('expr').get('key'), Js({'precedence':var.get('Precedence').get('Sequence'),'allowIn':Js(True),'allowCall':Js(True)})))
                                    else:
                                        if var.get('expr').get('method'):
                                            var.put('result', Js([]))
                                            if var.get('expr').get('value').get('generator'):
                                                var.get('result').callprop('push', Js('*'))
                                            var.get('result').callprop('push', var.get('generateExpression')(var.get('expr').get('key'), Js({'precedence':var.get('Precedence').get('Sequence'),'allowIn':Js(True),'allowCall':Js(True)})), var.get('generateFunctionBody')(var.get('expr').get('value')))
                                        else:
                                            var.put('result', Js([var.get('generateExpression')(var.get('expr').get('key'), Js({'precedence':var.get('Precedence').get('Sequence'),'allowIn':Js(True),'allowCall':Js(True)})), (Js(':')+var.get('space')), var.get('generateExpression')(var.get('expr').get('value'), Js({'precedence':var.get('Precedence').get('Assignment'),'allowIn':Js(True),'allowCall':Js(True)}))]))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('ObjectExpression')):
                                SWITCHED = True
                                if var.get('expr').get('properties').get('length').neg():
                                    var.put('result', Js('{}'))
                                    break
                                var.put('multiline', (var.get('expr').get('properties').get('length')>Js(1.0)))
                                @Js
                                def PyJs_anonymous_1047_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                    var.registers([])
                                    var.put('fragment', var.get('generateExpression')(var.get('expr').get('properties').get('0'), Js({'precedence':var.get('Precedence').get('Sequence'),'allowIn':Js(True),'allowCall':Js(True),'type':var.get('Syntax').get('Property')})))
                                PyJs_anonymous_1047_._set_name('anonymous')
                                var.get('withIndent')(PyJs_anonymous_1047_)
                                if var.get('multiline').neg():
                                    if var.get('hasLineTerminator')(var.get('toSourceNodeWhenNeeded')(var.get('fragment')).callprop('toString')).neg():
                                        var.put('result', Js([Js('{'), var.get('space'), var.get('fragment'), var.get('space'), Js('}')]))
                                        break
                                @Js
                                def PyJs_anonymous_1048_(indent, this, arguments, var=var):
                                    var = Scope({'indent':indent, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['indent'])
                                    var.put('result', Js([Js('{'), var.get('newline'), var.get('indent'), var.get('fragment')]))
                                    if var.get('multiline'):
                                        var.get('result').callprop('push', (Js(',')+var.get('newline')))
                                        #for JS loop
                                        PyJsComma(var.put('i', Js(1.0)),var.put('len', var.get('expr').get('properties').get('length')))
                                        while (var.get('i')<var.get('len')):
                                            try:
                                                var.get('result').callprop('push', var.get('indent'), var.get('generateExpression')(var.get('expr').get('properties').get(var.get('i')), Js({'precedence':var.get('Precedence').get('Sequence'),'allowIn':Js(True),'allowCall':Js(True),'type':var.get('Syntax').get('Property')})))
                                                if ((var.get('i')+Js(1.0))<var.get('len')):
                                                    var.get('result').callprop('push', (Js(',')+var.get('newline')))
                                            finally:
                                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                                PyJs_anonymous_1048_._set_name('anonymous')
                                var.get('withIndent')(PyJs_anonymous_1048_)
                                if var.get('endsWithLineTerminator')(var.get('toSourceNodeWhenNeeded')(var.get('result')).callprop('toString')).neg():
                                    var.get('result').callprop('push', var.get('newline'))
                                var.get('result').callprop('push', var.get('base'), Js('}'))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('ObjectPattern')):
                                SWITCHED = True
                                if var.get('expr').get('properties').get('length').neg():
                                    var.put('result', Js('{}'))
                                    break
                                var.put('multiline', Js(False))
                                if PyJsStrictEq(var.get('expr').get('properties').get('length'),Js(1.0)):
                                    var.put('property', var.get('expr').get('properties').get('0'))
                                    if PyJsStrictNeq(var.get('property').get('value').get('type'),var.get('Syntax').get('Identifier')):
                                        var.put('multiline', Js(True))
                                else:
                                    #for JS loop
                                    PyJsComma(var.put('i', Js(0.0)),var.put('len', var.get('expr').get('properties').get('length')))
                                    while (var.get('i')<var.get('len')):
                                        try:
                                            var.put('property', var.get('expr').get('properties').get(var.get('i')))
                                            if var.get('property').get('shorthand').neg():
                                                var.put('multiline', Js(True))
                                                break
                                        finally:
                                                var.put('i',Js(var.get('i').to_number())+Js(1))
                                var.put('result', Js([Js('{'), (var.get('newline') if var.get('multiline') else Js(''))]))
                                @Js
                                def PyJs_anonymous_1049_(indent, this, arguments, var=var):
                                    var = Scope({'indent':indent, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['indent'])
                                    #for JS loop
                                    PyJsComma(var.put('i', Js(0.0)),var.put('len', var.get('expr').get('properties').get('length')))
                                    while (var.get('i')<var.get('len')):
                                        try:
                                            var.get('result').callprop('push', (var.get('indent') if var.get('multiline') else Js('')), var.get('generateExpression')(var.get('expr').get('properties').get(var.get('i')), Js({'precedence':var.get('Precedence').get('Sequence'),'allowIn':Js(True),'allowCall':Js(True)})))
                                            if ((var.get('i')+Js(1.0))<var.get('len')):
                                                var.get('result').callprop('push', (Js(',')+(var.get('newline') if var.get('multiline') else var.get('space'))))
                                        finally:
                                                var.put('i',Js(var.get('i').to_number())+Js(1))
                                PyJs_anonymous_1049_._set_name('anonymous')
                                var.get('withIndent')(PyJs_anonymous_1049_)
                                if (var.get('multiline') and var.get('endsWithLineTerminator')(var.get('toSourceNodeWhenNeeded')(var.get('result')).callprop('toString')).neg()):
                                    var.get('result').callprop('push', var.get('newline'))
                                var.get('result').callprop('push', (var.get('base') if var.get('multiline') else Js('')), Js('}'))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('ThisExpression')):
                                SWITCHED = True
                                var.put('result', Js('this'))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('Identifier')):
                                SWITCHED = True
                                var.put('result', var.get('generateIdentifier')(var.get('expr')))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('Literal')):
                                SWITCHED = True
                                if (var.get('expr').callprop('hasOwnProperty', Js('raw')) and var.get('parse')):
                                    try:
                                        var.put('raw', var.get('parse')(var.get('expr').get('raw')).get('body').get('0').get('expression'))
                                        if PyJsStrictEq(var.get('raw').get('type'),var.get('Syntax').get('Literal')):
                                            if PyJsStrictEq(var.get('raw').get('value'),var.get('expr').get('value')):
                                                var.put('result', var.get('expr').get('raw'))
                                                break
                                    except PyJsException as PyJsTempException:
                                        PyJsHolder_65_98145569 = var.own.get('e')
                                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                        try:
                                            pass
                                        finally:
                                            if PyJsHolder_65_98145569 is not None:
                                                var.own['e'] = PyJsHolder_65_98145569
                                            else:
                                                del var.own['e']
                                            del PyJsHolder_65_98145569
                                if PyJsStrictEq(var.get('expr').get('value'),var.get(u"null")):
                                    var.put('result', Js('null'))
                                    break
                                if PyJsStrictEq(var.get('expr').get('value').typeof(),Js('string')):
                                    var.put('result', var.get('escapeString')(var.get('expr').get('value')))
                                    break
                                if PyJsStrictEq(var.get('expr').get('value').typeof(),Js('number')):
                                    var.put('result', var.get('generateNumber')(var.get('expr').get('value')))
                                    break
                                if PyJsStrictEq(var.get('expr').get('value').typeof(),Js('boolean')):
                                    var.put('result', (Js('true') if var.get('expr').get('value') else Js('false')))
                                    break
                                var.put('result', var.get('generateRegExp')(var.get('expr').get('value')))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('GeneratorExpression')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('ComprehensionExpression')):
                                SWITCHED = True
                                var.put('result', (Js([Js('(')]) if PyJsStrictEq(var.get('type'),var.get('Syntax').get('GeneratorExpression')) else Js([Js('[')])))
                                if var.get('extra').get('moz').get('comprehensionExpressionStartsWithAssignment'):
                                    var.put('fragment', var.get('generateExpression')(var.get('expr').get('body'), Js({'precedence':var.get('Precedence').get('Assignment'),'allowIn':Js(True),'allowCall':Js(True)})))
                                    var.get('result').callprop('push', var.get('fragment'))
                                if var.get('expr').get('blocks'):
                                    @Js
                                    def PyJs_anonymous_1050_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        #for JS loop
                                        PyJsComma(var.put('i', Js(0.0)),var.put('len', var.get('expr').get('blocks').get('length')))
                                        while (var.get('i')<var.get('len')):
                                            try:
                                                var.put('fragment', var.get('generateExpression')(var.get('expr').get('blocks').get(var.get('i')), Js({'precedence':var.get('Precedence').get('Sequence'),'allowIn':Js(True),'allowCall':Js(True)})))
                                                if ((var.get('i')>Js(0.0)) or var.get('extra').get('moz').get('comprehensionExpressionStartsWithAssignment')):
                                                    var.put('result', var.get('join')(var.get('result'), var.get('fragment')))
                                                else:
                                                    var.get('result').callprop('push', var.get('fragment'))
                                            finally:
                                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                                    PyJs_anonymous_1050_._set_name('anonymous')
                                    var.get('withIndent')(PyJs_anonymous_1050_)
                                if var.get('expr').get('filter'):
                                    var.put('result', var.get('join')(var.get('result'), (Js('if')+var.get('space'))))
                                    var.put('fragment', var.get('generateExpression')(var.get('expr').get('filter'), Js({'precedence':var.get('Precedence').get('Sequence'),'allowIn':Js(True),'allowCall':Js(True)})))
                                    if var.get('extra').get('moz').get('parenthesizedComprehensionBlock'):
                                        var.put('result', var.get('join')(var.get('result'), Js([Js('('), var.get('fragment'), Js(')')])))
                                    else:
                                        var.put('result', var.get('join')(var.get('result'), var.get('fragment')))
                                if var.get('extra').get('moz').get('comprehensionExpressionStartsWithAssignment').neg():
                                    var.put('fragment', var.get('generateExpression')(var.get('expr').get('body'), Js({'precedence':var.get('Precedence').get('Assignment'),'allowIn':Js(True),'allowCall':Js(True)})))
                                    var.put('result', var.get('join')(var.get('result'), var.get('fragment')))
                                var.get('result').callprop('push', (Js(')') if PyJsStrictEq(var.get('type'),var.get('Syntax').get('GeneratorExpression')) else Js(']')))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('ComprehensionBlock')):
                                SWITCHED = True
                                if PyJsStrictEq(var.get('expr').get('left').get('type'),var.get('Syntax').get('VariableDeclaration')):
                                    var.put('fragment', Js([var.get('expr').get('left').get('kind'), var.get('noEmptySpace')(), var.get('generateStatement')(var.get('expr').get('left').get('declarations').get('0'), Js({'allowIn':Js(False)}))]))
                                else:
                                    var.put('fragment', var.get('generateExpression')(var.get('expr').get('left'), Js({'precedence':var.get('Precedence').get('Call'),'allowIn':Js(True),'allowCall':Js(True)})))
                                var.put('fragment', var.get('join')(var.get('fragment'), (Js('of') if var.get('expr').get('of') else Js('in'))))
                                var.put('fragment', var.get('join')(var.get('fragment'), var.get('generateExpression')(var.get('expr').get('right'), Js({'precedence':var.get('Precedence').get('Sequence'),'allowIn':Js(True),'allowCall':Js(True)}))))
                                if var.get('extra').get('moz').get('parenthesizedComprehensionBlock'):
                                    var.put('result', Js([((Js('for')+var.get('space'))+Js('(')), var.get('fragment'), Js(')')]))
                                else:
                                    var.put('result', var.get('join')((Js('for')+var.get('space')), var.get('fragment')))
                                break
                            if True:
                                SWITCHED = True
                                PyJsTempException = JsToPyException(var.get('Error').create((Js('Unknown expression type: ')+var.get('expr').get('type'))))
                                raise PyJsTempException
                            SWITCHED = True
                            break
                        return var.get('toSourceNodeWhenNeeded')(var.get('result'), var.get('expr'))
                    PyJsHoisted_generateExpression_.func_name = 'generateExpression'
                    var.put('generateExpression', PyJsHoisted_generateExpression_)
                    @Js
                    def PyJsHoisted_generateStatement_(stmt, option, this, arguments, var=var):
                        var = Scope({'stmt':stmt, 'option':option, 'this':this, 'arguments':arguments}, var)
                        var.registers(['option', 'node', 'functionBody', 'semicolon', 'i', 'isGenerator', 'result', 'directiveContext', 'stmt', 'allowIn', 'fragment', 'len'])
                        pass
                        var.put('allowIn', Js(True))
                        var.put('semicolon', Js(';'))
                        var.put('functionBody', Js(False))
                        var.put('directiveContext', Js(False))
                        if var.get('option'):
                            var.put('allowIn', (PyJsStrictEq(var.get('option').get('allowIn'),var.get('undefined')) or var.get('option').get('allowIn')))
                            if (var.get('semicolons').neg() and PyJsStrictEq(var.get('option').get('semicolonOptional'),Js(True))):
                                var.put('semicolon', Js(''))
                            var.put('functionBody', var.get('option').get('functionBody'))
                            var.put('directiveContext', var.get('option').get('directiveContext'))
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get('stmt').get('type'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('BlockStatement')):
                                SWITCHED = True
                                var.put('result', Js([Js('{'), var.get('newline')]))
                                @Js
                                def PyJs_anonymous_1051_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                    var.registers([])
                                    #for JS loop
                                    PyJsComma(var.put('i', Js(0.0)),var.put('len', var.get('stmt').get('body').get('length')))
                                    while (var.get('i')<var.get('len')):
                                        try:
                                            var.put('fragment', var.get('addIndent')(var.get('generateStatement')(var.get('stmt').get('body').get(var.get('i')), Js({'semicolonOptional':PyJsStrictEq(var.get('i'),(var.get('len')-Js(1.0))),'directiveContext':var.get('functionBody')}))))
                                            var.get('result').callprop('push', var.get('fragment'))
                                            if var.get('endsWithLineTerminator')(var.get('toSourceNodeWhenNeeded')(var.get('fragment')).callprop('toString')).neg():
                                                var.get('result').callprop('push', var.get('newline'))
                                        finally:
                                                var.put('i',Js(var.get('i').to_number())+Js(1))
                                PyJs_anonymous_1051_._set_name('anonymous')
                                var.get('withIndent')(PyJs_anonymous_1051_)
                                var.get('result').callprop('push', var.get('addIndent')(Js('}')))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('BreakStatement')):
                                SWITCHED = True
                                if var.get('stmt').get('label'):
                                    var.put('result', ((Js('break ')+var.get('stmt').get('label').get('name'))+var.get('semicolon')))
                                else:
                                    var.put('result', (Js('break')+var.get('semicolon')))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('ContinueStatement')):
                                SWITCHED = True
                                if var.get('stmt').get('label'):
                                    var.put('result', ((Js('continue ')+var.get('stmt').get('label').get('name'))+var.get('semicolon')))
                                else:
                                    var.put('result', (Js('continue')+var.get('semicolon')))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('DirectiveStatement')):
                                SWITCHED = True
                                if var.get('stmt').get('raw'):
                                    var.put('result', (var.get('stmt').get('raw')+var.get('semicolon')))
                                else:
                                    var.put('result', (var.get('escapeDirective')(var.get('stmt').get('directive'))+var.get('semicolon')))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('DoWhileStatement')):
                                SWITCHED = True
                                var.put('result', var.get('join')(Js('do'), var.get('maybeBlock')(var.get('stmt').get('body'))))
                                var.put('result', var.get('maybeBlockSuffix')(var.get('stmt').get('body'), var.get('result')))
                                var.put('result', var.get('join')(var.get('result'), Js([((Js('while')+var.get('space'))+Js('(')), var.get('generateExpression')(var.get('stmt').get('test'), Js({'precedence':var.get('Precedence').get('Sequence'),'allowIn':Js(True),'allowCall':Js(True)})), (Js(')')+var.get('semicolon'))])))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('CatchClause')):
                                SWITCHED = True
                                @Js
                                def PyJs_anonymous_1052_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                    var.registers(['guard'])
                                    pass
                                    var.put('result', Js([((Js('catch')+var.get('space'))+Js('(')), var.get('generateExpression')(var.get('stmt').get('param'), Js({'precedence':var.get('Precedence').get('Sequence'),'allowIn':Js(True),'allowCall':Js(True)})), Js(')')]))
                                    if var.get('stmt').get('guard'):
                                        var.put('guard', var.get('generateExpression')(var.get('stmt').get('guard'), Js({'precedence':var.get('Precedence').get('Sequence'),'allowIn':Js(True),'allowCall':Js(True)})))
                                        var.get('result').callprop('splice', Js(2.0), Js(0.0), Js(' if '), var.get('guard'))
                                PyJs_anonymous_1052_._set_name('anonymous')
                                var.get('withIndent')(PyJs_anonymous_1052_)
                                var.get('result').callprop('push', var.get('maybeBlock')(var.get('stmt').get('body')))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('DebuggerStatement')):
                                SWITCHED = True
                                var.put('result', (Js('debugger')+var.get('semicolon')))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('EmptyStatement')):
                                SWITCHED = True
                                var.put('result', Js(';'))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('ExportDeclaration')):
                                SWITCHED = True
                                var.put('result', Js('export '))
                                if var.get('stmt').get('declaration'):
                                    var.put('result', Js([var.get('result'), var.get('generateStatement')(var.get('stmt').get('declaration'), Js({'semicolonOptional':PyJsStrictEq(var.get('semicolon'),Js(''))}))]))
                                    break
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('ExpressionStatement')):
                                SWITCHED = True
                                var.put('result', Js([var.get('generateExpression')(var.get('stmt').get('expression'), Js({'precedence':var.get('Precedence').get('Sequence'),'allowIn':Js(True),'allowCall':Js(True)}))]))
                                var.put('fragment', var.get('toSourceNodeWhenNeeded')(var.get('result')).callprop('toString'))
                                def PyJs_LONG_1053_(var=var):
                                    return ((PyJsStrictEq(var.get('fragment').callprop('charAt', Js(0.0)),Js('{')) or (PyJsStrictEq(var.get('fragment').callprop('slice', Js(0.0), Js(8.0)),Js('function')) and (Js('* (').callprop('indexOf', var.get('fragment').callprop('charAt', Js(8.0)))>=Js(0.0)))) or (((var.get('directive') and var.get('directiveContext')) and PyJsStrictEq(var.get('stmt').get('expression').get('type'),var.get('Syntax').get('Literal'))) and PyJsStrictEq(var.get('stmt').get('expression').get('value').typeof(),Js('string'))))
                                if PyJs_LONG_1053_():
                                    var.put('result', Js([Js('('), var.get('result'), (Js(')')+var.get('semicolon'))]))
                                else:
                                    var.get('result').callprop('push', var.get('semicolon'))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('VariableDeclarator')):
                                SWITCHED = True
                                if var.get('stmt').get('init'):
                                    def PyJs_LONG_1054_(var=var):
                                        return var.put('result', Js([var.get('generateExpression')(var.get('stmt').get('id'), Js({'precedence':var.get('Precedence').get('Assignment'),'allowIn':var.get('allowIn'),'allowCall':Js(True)})), var.get('space'), Js('='), var.get('space'), var.get('generateExpression')(var.get('stmt').get('init'), Js({'precedence':var.get('Precedence').get('Assignment'),'allowIn':var.get('allowIn'),'allowCall':Js(True)}))]))
                                    PyJs_LONG_1054_()
                                else:
                                    var.put('result', var.get('generatePattern')(var.get('stmt').get('id'), Js({'precedence':var.get('Precedence').get('Assignment'),'allowIn':var.get('allowIn')})))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('VariableDeclaration')):
                                SWITCHED = True
                                var.put('result', Js([var.get('stmt').get('kind')]))
                                if ((PyJsStrictEq(var.get('stmt').get('declarations').get('length'),Js(1.0)) and var.get('stmt').get('declarations').get('0').get('init')) and PyJsStrictEq(var.get('stmt').get('declarations').get('0').get('init').get('type'),var.get('Syntax').get('FunctionExpression'))):
                                    var.get('result').callprop('push', var.get('noEmptySpace')(), var.get('generateStatement')(var.get('stmt').get('declarations').get('0'), Js({'allowIn':var.get('allowIn')})))
                                else:
                                    @Js
                                    def PyJs_anonymous_1055_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.put('node', var.get('stmt').get('declarations').get('0'))
                                        if (var.get('extra').get('comment') and var.get('node').get('leadingComments')):
                                            var.get('result').callprop('push', Js('\n'), var.get('addIndent')(var.get('generateStatement')(var.get('node'), Js({'allowIn':var.get('allowIn')}))))
                                        else:
                                            var.get('result').callprop('push', var.get('noEmptySpace')(), var.get('generateStatement')(var.get('node'), Js({'allowIn':var.get('allowIn')})))
                                        #for JS loop
                                        PyJsComma(var.put('i', Js(1.0)),var.put('len', var.get('stmt').get('declarations').get('length')))
                                        while (var.get('i')<var.get('len')):
                                            try:
                                                var.put('node', var.get('stmt').get('declarations').get(var.get('i')))
                                                if (var.get('extra').get('comment') and var.get('node').get('leadingComments')):
                                                    var.get('result').callprop('push', (Js(',')+var.get('newline')), var.get('addIndent')(var.get('generateStatement')(var.get('node'), Js({'allowIn':var.get('allowIn')}))))
                                                else:
                                                    var.get('result').callprop('push', (Js(',')+var.get('space')), var.get('generateStatement')(var.get('node'), Js({'allowIn':var.get('allowIn')})))
                                            finally:
                                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                                    PyJs_anonymous_1055_._set_name('anonymous')
                                    var.get('withIndent')(PyJs_anonymous_1055_)
                                var.get('result').callprop('push', var.get('semicolon'))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('ThrowStatement')):
                                SWITCHED = True
                                var.put('result', Js([var.get('join')(Js('throw'), var.get('generateExpression')(var.get('stmt').get('argument'), Js({'precedence':var.get('Precedence').get('Sequence'),'allowIn':Js(True),'allowCall':Js(True)}))), var.get('semicolon')]))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('TryStatement')):
                                SWITCHED = True
                                var.put('result', Js([Js('try'), var.get('maybeBlock')(var.get('stmt').get('block'))]))
                                var.put('result', var.get('maybeBlockSuffix')(var.get('stmt').get('block'), var.get('result')))
                                if var.get('stmt').get('handlers'):
                                    #for JS loop
                                    PyJsComma(var.put('i', Js(0.0)),var.put('len', var.get('stmt').get('handlers').get('length')))
                                    while (var.get('i')<var.get('len')):
                                        try:
                                            var.put('result', var.get('join')(var.get('result'), var.get('generateStatement')(var.get('stmt').get('handlers').get(var.get('i')))))
                                            if (var.get('stmt').get('finalizer') or PyJsStrictNeq((var.get('i')+Js(1.0)),var.get('len'))):
                                                var.put('result', var.get('maybeBlockSuffix')(var.get('stmt').get('handlers').get(var.get('i')).get('body'), var.get('result')))
                                        finally:
                                                var.put('i',Js(var.get('i').to_number())+Js(1))
                                else:
                                    var.get('stmt').put('guardedHandlers', (var.get('stmt').get('guardedHandlers') or Js([])))
                                    #for JS loop
                                    PyJsComma(var.put('i', Js(0.0)),var.put('len', var.get('stmt').get('guardedHandlers').get('length')))
                                    while (var.get('i')<var.get('len')):
                                        try:
                                            var.put('result', var.get('join')(var.get('result'), var.get('generateStatement')(var.get('stmt').get('guardedHandlers').get(var.get('i')))))
                                            if (var.get('stmt').get('finalizer') or PyJsStrictNeq((var.get('i')+Js(1.0)),var.get('len'))):
                                                var.put('result', var.get('maybeBlockSuffix')(var.get('stmt').get('guardedHandlers').get(var.get('i')).get('body'), var.get('result')))
                                        finally:
                                                var.put('i',Js(var.get('i').to_number())+Js(1))
                                    if var.get('stmt').get('handler'):
                                        if var.get('isArray')(var.get('stmt').get('handler')):
                                            #for JS loop
                                            PyJsComma(var.put('i', Js(0.0)),var.put('len', var.get('stmt').get('handler').get('length')))
                                            while (var.get('i')<var.get('len')):
                                                try:
                                                    var.put('result', var.get('join')(var.get('result'), var.get('generateStatement')(var.get('stmt').get('handler').get(var.get('i')))))
                                                    if (var.get('stmt').get('finalizer') or PyJsStrictNeq((var.get('i')+Js(1.0)),var.get('len'))):
                                                        var.put('result', var.get('maybeBlockSuffix')(var.get('stmt').get('handler').get(var.get('i')).get('body'), var.get('result')))
                                                finally:
                                                        var.put('i',Js(var.get('i').to_number())+Js(1))
                                        else:
                                            var.put('result', var.get('join')(var.get('result'), var.get('generateStatement')(var.get('stmt').get('handler'))))
                                            if var.get('stmt').get('finalizer'):
                                                var.put('result', var.get('maybeBlockSuffix')(var.get('stmt').get('handler').get('body'), var.get('result')))
                                if var.get('stmt').get('finalizer'):
                                    var.put('result', var.get('join')(var.get('result'), Js([Js('finally'), var.get('maybeBlock')(var.get('stmt').get('finalizer'))])))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('SwitchStatement')):
                                SWITCHED = True
                                @Js
                                def PyJs_anonymous_1056_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                    var.registers([])
                                    var.put('result', Js([((Js('switch')+var.get('space'))+Js('(')), var.get('generateExpression')(var.get('stmt').get('discriminant'), Js({'precedence':var.get('Precedence').get('Sequence'),'allowIn':Js(True),'allowCall':Js(True)})), (((Js(')')+var.get('space'))+Js('{'))+var.get('newline'))]))
                                PyJs_anonymous_1056_._set_name('anonymous')
                                var.get('withIndent')(PyJs_anonymous_1056_)
                                if var.get('stmt').get('cases'):
                                    #for JS loop
                                    PyJsComma(var.put('i', Js(0.0)),var.put('len', var.get('stmt').get('cases').get('length')))
                                    while (var.get('i')<var.get('len')):
                                        try:
                                            var.put('fragment', var.get('addIndent')(var.get('generateStatement')(var.get('stmt').get('cases').get(var.get('i')), Js({'semicolonOptional':PyJsStrictEq(var.get('i'),(var.get('len')-Js(1.0)))}))))
                                            var.get('result').callprop('push', var.get('fragment'))
                                            if var.get('endsWithLineTerminator')(var.get('toSourceNodeWhenNeeded')(var.get('fragment')).callprop('toString')).neg():
                                                var.get('result').callprop('push', var.get('newline'))
                                        finally:
                                                var.put('i',Js(var.get('i').to_number())+Js(1))
                                var.get('result').callprop('push', var.get('addIndent')(Js('}')))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('SwitchCase')):
                                SWITCHED = True
                                @Js
                                def PyJs_anonymous_1057_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                    var.registers([])
                                    if var.get('stmt').get('test'):
                                        var.put('result', Js([var.get('join')(Js('case'), var.get('generateExpression')(var.get('stmt').get('test'), Js({'precedence':var.get('Precedence').get('Sequence'),'allowIn':Js(True),'allowCall':Js(True)}))), Js(':')]))
                                    else:
                                        var.put('result', Js([Js('default:')]))
                                    var.put('i', Js(0.0))
                                    var.put('len', var.get('stmt').get('consequent').get('length'))
                                    if (var.get('len') and PyJsStrictEq(var.get('stmt').get('consequent').get('0').get('type'),var.get('Syntax').get('BlockStatement'))):
                                        var.put('fragment', var.get('maybeBlock')(var.get('stmt').get('consequent').get('0')))
                                        var.get('result').callprop('push', var.get('fragment'))
                                        var.put('i', Js(1.0))
                                    if (PyJsStrictNeq(var.get('i'),var.get('len')) and var.get('endsWithLineTerminator')(var.get('toSourceNodeWhenNeeded')(var.get('result')).callprop('toString')).neg()):
                                        var.get('result').callprop('push', var.get('newline'))
                                    #for JS loop
                                    
                                    while (var.get('i')<var.get('len')):
                                        try:
                                            var.put('fragment', var.get('addIndent')(var.get('generateStatement')(var.get('stmt').get('consequent').get(var.get('i')), Js({'semicolonOptional':(PyJsStrictEq(var.get('i'),(var.get('len')-Js(1.0))) and PyJsStrictEq(var.get('semicolon'),Js('')))}))))
                                            var.get('result').callprop('push', var.get('fragment'))
                                            if (PyJsStrictNeq((var.get('i')+Js(1.0)),var.get('len')) and var.get('endsWithLineTerminator')(var.get('toSourceNodeWhenNeeded')(var.get('fragment')).callprop('toString')).neg()):
                                                var.get('result').callprop('push', var.get('newline'))
                                        finally:
                                                var.put('i',Js(var.get('i').to_number())+Js(1))
                                PyJs_anonymous_1057_._set_name('anonymous')
                                var.get('withIndent')(PyJs_anonymous_1057_)
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('IfStatement')):
                                SWITCHED = True
                                @Js
                                def PyJs_anonymous_1058_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                    var.registers([])
                                    var.put('result', Js([((Js('if')+var.get('space'))+Js('(')), var.get('generateExpression')(var.get('stmt').get('test'), Js({'precedence':var.get('Precedence').get('Sequence'),'allowIn':Js(True),'allowCall':Js(True)})), Js(')')]))
                                PyJs_anonymous_1058_._set_name('anonymous')
                                var.get('withIndent')(PyJs_anonymous_1058_)
                                if var.get('stmt').get('alternate'):
                                    var.get('result').callprop('push', var.get('maybeBlock')(var.get('stmt').get('consequent')))
                                    var.put('result', var.get('maybeBlockSuffix')(var.get('stmt').get('consequent'), var.get('result')))
                                    if PyJsStrictEq(var.get('stmt').get('alternate').get('type'),var.get('Syntax').get('IfStatement')):
                                        var.put('result', var.get('join')(var.get('result'), Js([Js('else '), var.get('generateStatement')(var.get('stmt').get('alternate'), Js({'semicolonOptional':PyJsStrictEq(var.get('semicolon'),Js(''))}))])))
                                    else:
                                        var.put('result', var.get('join')(var.get('result'), var.get('join')(Js('else'), var.get('maybeBlock')(var.get('stmt').get('alternate'), PyJsStrictEq(var.get('semicolon'),Js(''))))))
                                else:
                                    var.get('result').callprop('push', var.get('maybeBlock')(var.get('stmt').get('consequent'), PyJsStrictEq(var.get('semicolon'),Js(''))))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('ForStatement')):
                                SWITCHED = True
                                @Js
                                def PyJs_anonymous_1059_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                    var.registers([])
                                    var.put('result', Js([((Js('for')+var.get('space'))+Js('('))]))
                                    if var.get('stmt').get('init'):
                                        if PyJsStrictEq(var.get('stmt').get('init').get('type'),var.get('Syntax').get('VariableDeclaration')):
                                            var.get('result').callprop('push', var.get('generateStatement')(var.get('stmt').get('init'), Js({'allowIn':Js(False)})))
                                        else:
                                            var.get('result').callprop('push', var.get('generateExpression')(var.get('stmt').get('init'), Js({'precedence':var.get('Precedence').get('Sequence'),'allowIn':Js(False),'allowCall':Js(True)})), Js(';'))
                                    else:
                                        var.get('result').callprop('push', Js(';'))
                                    if var.get('stmt').get('test'):
                                        var.get('result').callprop('push', var.get('space'), var.get('generateExpression')(var.get('stmt').get('test'), Js({'precedence':var.get('Precedence').get('Sequence'),'allowIn':Js(True),'allowCall':Js(True)})), Js(';'))
                                    else:
                                        var.get('result').callprop('push', Js(';'))
                                    if var.get('stmt').get('update'):
                                        var.get('result').callprop('push', var.get('space'), var.get('generateExpression')(var.get('stmt').get('update'), Js({'precedence':var.get('Precedence').get('Sequence'),'allowIn':Js(True),'allowCall':Js(True)})), Js(')'))
                                    else:
                                        var.get('result').callprop('push', Js(')'))
                                PyJs_anonymous_1059_._set_name('anonymous')
                                var.get('withIndent')(PyJs_anonymous_1059_)
                                var.get('result').callprop('push', var.get('maybeBlock')(var.get('stmt').get('body'), PyJsStrictEq(var.get('semicolon'),Js(''))))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('ForInStatement')):
                                SWITCHED = True
                                var.put('result', Js([((Js('for')+var.get('space'))+Js('('))]))
                                @Js
                                def PyJs_anonymous_1060_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                    var.registers([])
                                    if PyJsStrictEq(var.get('stmt').get('left').get('type'),var.get('Syntax').get('VariableDeclaration')):
                                        @Js
                                        def PyJs_anonymous_1061_(this, arguments, var=var):
                                            var = Scope({'this':this, 'arguments':arguments}, var)
                                            var.registers([])
                                            var.get('result').callprop('push', (var.get('stmt').get('left').get('kind')+var.get('noEmptySpace')()), var.get('generateStatement')(var.get('stmt').get('left').get('declarations').get('0'), Js({'allowIn':Js(False)})))
                                        PyJs_anonymous_1061_._set_name('anonymous')
                                        var.get('withIndent')(PyJs_anonymous_1061_)
                                    else:
                                        var.get('result').callprop('push', var.get('generateExpression')(var.get('stmt').get('left'), Js({'precedence':var.get('Precedence').get('Call'),'allowIn':Js(True),'allowCall':Js(True)})))
                                    var.put('result', var.get('join')(var.get('result'), Js('in')))
                                    var.put('result', Js([var.get('join')(var.get('result'), var.get('generateExpression')(var.get('stmt').get('right'), Js({'precedence':var.get('Precedence').get('Sequence'),'allowIn':Js(True),'allowCall':Js(True)}))), Js(')')]))
                                PyJs_anonymous_1060_._set_name('anonymous')
                                var.get('withIndent')(PyJs_anonymous_1060_)
                                var.get('result').callprop('push', var.get('maybeBlock')(var.get('stmt').get('body'), PyJsStrictEq(var.get('semicolon'),Js(''))))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('LabeledStatement')):
                                SWITCHED = True
                                var.put('result', Js([(var.get('stmt').get('label').get('name')+Js(':')), var.get('maybeBlock')(var.get('stmt').get('body'), PyJsStrictEq(var.get('semicolon'),Js('')))]))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('Program')):
                                SWITCHED = True
                                var.put('len', var.get('stmt').get('body').get('length'))
                                var.put('result', Js([(Js('\n') if (var.get('safeConcatenation') and (var.get('len')>Js(0.0))) else Js(''))]))
                                #for JS loop
                                var.put('i', Js(0.0))
                                while (var.get('i')<var.get('len')):
                                    try:
                                        var.put('fragment', var.get('addIndent')(var.get('generateStatement')(var.get('stmt').get('body').get(var.get('i')), Js({'semicolonOptional':(var.get('safeConcatenation').neg() and PyJsStrictEq(var.get('i'),(var.get('len')-Js(1.0)))),'directiveContext':Js(True)}))))
                                        var.get('result').callprop('push', var.get('fragment'))
                                        if (((var.get('i')+Js(1.0))<var.get('len')) and var.get('endsWithLineTerminator')(var.get('toSourceNodeWhenNeeded')(var.get('fragment')).callprop('toString')).neg()):
                                            var.get('result').callprop('push', var.get('newline'))
                                    finally:
                                            var.put('i',Js(var.get('i').to_number())+Js(1))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('FunctionDeclaration')):
                                SWITCHED = True
                                var.put('isGenerator', (var.get('stmt').get('generator') and var.get('extra').get('moz').get('starlessGenerator').neg()))
                                var.put('result', Js([(Js('function*') if var.get('isGenerator') else Js('function')), (var.get('space') if var.get('isGenerator') else var.get('noEmptySpace')()), var.get('generateIdentifier')(var.get('stmt').get('id')), var.get('generateFunctionBody')(var.get('stmt'))]))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('ReturnStatement')):
                                SWITCHED = True
                                if var.get('stmt').get('argument'):
                                    var.put('result', Js([var.get('join')(Js('return'), var.get('generateExpression')(var.get('stmt').get('argument'), Js({'precedence':var.get('Precedence').get('Sequence'),'allowIn':Js(True),'allowCall':Js(True)}))), var.get('semicolon')]))
                                else:
                                    var.put('result', Js([(Js('return')+var.get('semicolon'))]))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('WhileStatement')):
                                SWITCHED = True
                                @Js
                                def PyJs_anonymous_1062_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                    var.registers([])
                                    var.put('result', Js([((Js('while')+var.get('space'))+Js('(')), var.get('generateExpression')(var.get('stmt').get('test'), Js({'precedence':var.get('Precedence').get('Sequence'),'allowIn':Js(True),'allowCall':Js(True)})), Js(')')]))
                                PyJs_anonymous_1062_._set_name('anonymous')
                                var.get('withIndent')(PyJs_anonymous_1062_)
                                var.get('result').callprop('push', var.get('maybeBlock')(var.get('stmt').get('body'), PyJsStrictEq(var.get('semicolon'),Js(''))))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('WithStatement')):
                                SWITCHED = True
                                @Js
                                def PyJs_anonymous_1063_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                    var.registers([])
                                    var.put('result', Js([((Js('with')+var.get('space'))+Js('(')), var.get('generateExpression')(var.get('stmt').get('object'), Js({'precedence':var.get('Precedence').get('Sequence'),'allowIn':Js(True),'allowCall':Js(True)})), Js(')')]))
                                PyJs_anonymous_1063_._set_name('anonymous')
                                var.get('withIndent')(PyJs_anonymous_1063_)
                                var.get('result').callprop('push', var.get('maybeBlock')(var.get('stmt').get('body'), PyJsStrictEq(var.get('semicolon'),Js(''))))
                                break
                            if True:
                                SWITCHED = True
                                PyJsTempException = JsToPyException(var.get('Error').create((Js('Unknown statement type: ')+var.get('stmt').get('type'))))
                                raise PyJsTempException
                            SWITCHED = True
                            break
                        if var.get('extra').get('comment'):
                            var.put('result', var.get('addCommentsToStatement')(var.get('stmt'), var.get('result')))
                        var.put('fragment', var.get('toSourceNodeWhenNeeded')(var.get('result')).callprop('toString'))
                        if (((PyJsStrictEq(var.get('stmt').get('type'),var.get('Syntax').get('Program')) and var.get('safeConcatenation').neg()) and PyJsStrictEq(var.get('newline'),Js(''))) and PyJsStrictEq(var.get('fragment').callprop('charAt', (var.get('fragment').get('length')-Js(1.0))),Js('\n'))):
                            var.put('result', (var.get('toSourceNodeWhenNeeded')(var.get('result')).callprop('replaceRight', JsRegExp('/\\s+$/'), Js('')) if var.get('sourceMap') else var.get('fragment').callprop('replace', JsRegExp('/\\s+$/'), Js(''))))
                        return var.get('toSourceNodeWhenNeeded')(var.get('result'), var.get('stmt'))
                    PyJsHoisted_generateStatement_.func_name = 'generateStatement'
                    var.put('generateStatement', PyJsHoisted_generateStatement_)
                    @Js
                    def PyJsHoisted_generate_(node, options, this, arguments, var=var):
                        var = Scope({'node':node, 'options':options, 'this':this, 'arguments':arguments}, var)
                        var.registers(['node', 'result', 'defaultOptions', 'pair', 'options'])
                        var.put('defaultOptions', var.get('getDefaultOptions')())
                        if (var.get('options')!=var.get(u"null")):
                            if PyJsStrictEq(var.get('options').get('indent').typeof(),Js('string')):
                                var.get('defaultOptions').get('format').get('indent').put('style', var.get('options').get('indent'))
                            if PyJsStrictEq(var.get('options').get('base').typeof(),Js('number')):
                                var.get('defaultOptions').get('format').get('indent').put('base', var.get('options').get('base'))
                            var.put('options', var.get('updateDeeply')(var.get('defaultOptions'), var.get('options')))
                            var.put('indent', var.get('options').get('format').get('indent').get('style'))
                            if PyJsStrictEq(var.get('options').get('base').typeof(),Js('string')):
                                var.put('base', var.get('options').get('base'))
                            else:
                                var.put('base', var.get('stringRepeat')(var.get('indent'), var.get('options').get('format').get('indent').get('base')))
                        else:
                            var.put('options', var.get('defaultOptions'))
                            var.put('indent', var.get('options').get('format').get('indent').get('style'))
                            var.put('base', var.get('stringRepeat')(var.get('indent'), var.get('options').get('format').get('indent').get('base')))
                        var.put('json', var.get('options').get('format').get('json'))
                        var.put('renumber', var.get('options').get('format').get('renumber'))
                        var.put('hexadecimal', (Js(False) if var.get('json') else var.get('options').get('format').get('hexadecimal')))
                        var.put('quotes', (Js('double') if var.get('json') else var.get('options').get('format').get('quotes')))
                        var.put('escapeless', var.get('options').get('format').get('escapeless'))
                        var.put('newline', var.get('options').get('format').get('newline'))
                        var.put('space', var.get('options').get('format').get('space'))
                        if var.get('options').get('format').get('compact'):
                            var.put('newline', var.put('space', var.put('indent', var.put('base', Js('')))))
                        var.put('parentheses', var.get('options').get('format').get('parentheses'))
                        var.put('semicolons', var.get('options').get('format').get('semicolons'))
                        var.put('safeConcatenation', var.get('options').get('format').get('safeConcatenation'))
                        var.put('directive', var.get('options').get('directive'))
                        var.put('parse', (var.get(u"null") if var.get('json') else var.get('options').get('parse')))
                        var.put('sourceMap', var.get('options').get('sourceMap'))
                        var.put('extra', var.get('options'))
                        if var.get('sourceMap'):
                            if var.get('exports').get('browser').neg():
                                var.put('SourceNode', var.get('require')(Js('source-map')).get('SourceNode'))
                            else:
                                var.put('SourceNode', var.get('global').get('sourceMap').get('SourceNode'))
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get('node').get('type'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('BlockStatement')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('BreakStatement')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('CatchClause')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('ContinueStatement')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('DirectiveStatement')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('DoWhileStatement')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('DebuggerStatement')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('EmptyStatement')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('ExpressionStatement')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('ForStatement')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('ForInStatement')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('FunctionDeclaration')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('IfStatement')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('LabeledStatement')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('Program')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('ReturnStatement')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('SwitchStatement')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('SwitchCase')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('ThrowStatement')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('TryStatement')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('VariableDeclaration')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('VariableDeclarator')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('WhileStatement')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('WithStatement')):
                                SWITCHED = True
                                var.put('result', var.get('generateStatement')(var.get('node')))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('AssignmentExpression')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('ArrayExpression')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('ArrayPattern')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('BinaryExpression')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('CallExpression')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('ConditionalExpression')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('FunctionExpression')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('Identifier')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('Literal')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('LogicalExpression')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('MemberExpression')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('NewExpression')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('ObjectExpression')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('ObjectPattern')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('Property')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('SequenceExpression')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('ThisExpression')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('UnaryExpression')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('UpdateExpression')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('Syntax').get('YieldExpression')):
                                SWITCHED = True
                                var.put('result', var.get('generateExpression')(var.get('node'), Js({'precedence':var.get('Precedence').get('Sequence'),'allowIn':Js(True),'allowCall':Js(True)})))
                                break
                            if True:
                                SWITCHED = True
                                PyJsTempException = JsToPyException(var.get('Error').create((Js('Unknown node type: ')+var.get('node').get('type'))))
                                raise PyJsTempException
                            SWITCHED = True
                            break
                        if var.get('sourceMap').neg():
                            return var.get('result').callprop('toString')
                        var.put('pair', var.get('result').callprop('toStringWithSourceMap', Js({'file':var.get('options').get('file'),'sourceRoot':var.get('options').get('sourceMapRoot')})))
                        if var.get('options').get('sourceContent'):
                            var.get('pair').get('map').callprop('setSourceContent', var.get('options').get('sourceMap'), var.get('options').get('sourceContent'))
                        if var.get('options').get('sourceMapWithCode'):
                            return var.get('pair')
                        return var.get('pair').get('map').callprop('toString')
                    PyJsHoisted_generate_.func_name = 'generate'
                    var.put('generate', PyJsHoisted_generate_)
                    Js('use strict')
                    pass
                    var.put('estraverse', var.get('require')(Js('estraverse')))
                    var.put('esutils', var.get('require')(Js('esutils')))
                    def PyJs_LONG_1036_(var=var):
                        return var.put('Syntax', Js({'AssignmentExpression':Js('AssignmentExpression'),'ArrayExpression':Js('ArrayExpression'),'ArrayPattern':Js('ArrayPattern'),'ArrowFunctionExpression':Js('ArrowFunctionExpression'),'BlockStatement':Js('BlockStatement'),'BinaryExpression':Js('BinaryExpression'),'BreakStatement':Js('BreakStatement'),'CallExpression':Js('CallExpression'),'CatchClause':Js('CatchClause'),'ComprehensionBlock':Js('ComprehensionBlock'),'ComprehensionExpression':Js('ComprehensionExpression'),'ConditionalExpression':Js('ConditionalExpression'),'ContinueStatement':Js('ContinueStatement'),'DirectiveStatement':Js('DirectiveStatement'),'DoWhileStatement':Js('DoWhileStatement'),'DebuggerStatement':Js('DebuggerStatement'),'EmptyStatement':Js('EmptyStatement'),'ExportDeclaration':Js('ExportDeclaration'),'ExpressionStatement':Js('ExpressionStatement'),'ForStatement':Js('ForStatement'),'ForInStatement':Js('ForInStatement'),'FunctionDeclaration':Js('FunctionDeclaration'),'FunctionExpression':Js('FunctionExpression'),'GeneratorExpression':Js('GeneratorExpression'),'Identifier':Js('Identifier'),'IfStatement':Js('IfStatement'),'Literal':Js('Literal'),'LabeledStatement':Js('LabeledStatement'),'LogicalExpression':Js('LogicalExpression'),'MemberExpression':Js('MemberExpression'),'NewExpression':Js('NewExpression'),'ObjectExpression':Js('ObjectExpression'),'ObjectPattern':Js('ObjectPattern'),'Program':Js('Program'),'Property':Js('Property'),'ReturnStatement':Js('ReturnStatement'),'SequenceExpression':Js('SequenceExpression'),'SwitchStatement':Js('SwitchStatement'),'SwitchCase':Js('SwitchCase'),'ThisExpression':Js('ThisExpression'),'ThrowStatement':Js('ThrowStatement'),'TryStatement':Js('TryStatement'),'UnaryExpression':Js('UnaryExpression'),'UpdateExpression':Js('UpdateExpression'),'VariableDeclaration':Js('VariableDeclaration'),'VariableDeclarator':Js('VariableDeclarator'),'WhileStatement':Js('WhileStatement'),'WithStatement':Js('WithStatement'),'YieldExpression':Js('YieldExpression')}))
                    PyJs_LONG_1036_()
                    def PyJs_LONG_1037_(var=var):
                        return var.put('Precedence', Js({'Sequence':Js(0.0),'Yield':Js(1.0),'Assignment':Js(1.0),'Conditional':Js(2.0),'ArrowFunction':Js(2.0),'LogicalOR':Js(3.0),'LogicalAND':Js(4.0),'BitwiseOR':Js(5.0),'BitwiseXOR':Js(6.0),'BitwiseAND':Js(7.0),'Equality':Js(8.0),'Relational':Js(9.0),'BitwiseSHIFT':Js(10.0),'Additive':Js(11.0),'Multiplicative':Js(12.0),'Unary':Js(13.0),'Postfix':Js(14.0),'Call':Js(15.0),'New':Js(16.0),'Member':Js(17.0),'Primary':Js(18.0)}))
                    PyJs_LONG_1037_()
                    def PyJs_LONG_1038_(var=var):
                        return var.put('BinaryPrecedence', Js({'||':var.get('Precedence').get('LogicalOR'),'&&':var.get('Precedence').get('LogicalAND'),'|':var.get('Precedence').get('BitwiseOR'),'^':var.get('Precedence').get('BitwiseXOR'),'&':var.get('Precedence').get('BitwiseAND'),'==':var.get('Precedence').get('Equality'),'!=':var.get('Precedence').get('Equality'),'===':var.get('Precedence').get('Equality'),'!==':var.get('Precedence').get('Equality'),'is':var.get('Precedence').get('Equality'),'isnt':var.get('Precedence').get('Equality'),'<':var.get('Precedence').get('Relational'),'>':var.get('Precedence').get('Relational'),'<=':var.get('Precedence').get('Relational'),'>=':var.get('Precedence').get('Relational'),'in':var.get('Precedence').get('Relational'),'instanceof':var.get('Precedence').get('Relational'),'<<':var.get('Precedence').get('BitwiseSHIFT'),'>>':var.get('Precedence').get('BitwiseSHIFT'),'>>>':var.get('Precedence').get('BitwiseSHIFT'),'+':var.get('Precedence').get('Additive'),'-':var.get('Precedence').get('Additive'),'*':var.get('Precedence').get('Multiplicative'),'%':var.get('Precedence').get('Multiplicative'),'/':var.get('Precedence').get('Multiplicative')}))
                    PyJs_LONG_1038_()
                    pass
                    pass
                    var.put('isArray', var.get('Array').get('isArray'))
                    if var.get('isArray').neg():
                        @Js
                        def PyJs_isArray_1039_(array, this, arguments, var=var):
                            var = Scope({'array':array, 'this':this, 'arguments':arguments, 'isArray':PyJs_isArray_1039_}, var)
                            var.registers(['array'])
                            return PyJsStrictEq(var.get('Object').get('prototype').get('toString').callprop('call', var.get('array')),Js('[object Array]'))
                        PyJs_isArray_1039_._set_name('isArray')
                        var.put('isArray', PyJs_isArray_1039_)
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    var.put('FORMAT_MINIFY', Js({'indent':Js({'style':Js(''),'base':Js(0.0)}),'renumber':Js(True),'hexadecimal':Js(True),'quotes':Js('auto'),'escapeless':Js(True),'compact':Js(True),'parentheses':Js(False),'semicolons':Js(False)}))
                    var.put('FORMAT_DEFAULTS', var.get('getDefaultOptions')().get('format'))
                    var.get('exports').put('version', var.get('require')(Js('./package.json')).get('version'))
                    var.get('exports').put('generate', var.get('generate'))
                    var.get('exports').put('attachComments', var.get('estraverse').get('attachComments'))
                    var.get('exports').put('browser', Js(False))
                    var.get('exports').put('FORMAT_MINIFY', var.get('FORMAT_MINIFY'))
                    var.get('exports').put('FORMAT_DEFAULTS', var.get('FORMAT_DEFAULTS'))
                PyJs_anonymous_1035_._set_name('anonymous')
                PyJs_anonymous_1035_()
            PyJs_anonymous_1034_._set_name('anonymous')
            PyJs_anonymous_1034_.callprop('call', var.get(u"this"))
        PyJs_anonymous_1033_._set_name('anonymous')
        PyJs_anonymous_1033_.callprop('call', var.get(u"this"), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else Js({})))))
    PyJs_anonymous_1032_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1064_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_1065_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['isHexDigit', 'isIdentifierStart', 'isWhiteSpace', 'Regex', 'isIdentifierPart', 'isDecimalDigit', 'isLineTerminator', 'isOctalDigit'])
            @Js
            def PyJsHoisted_isDecimalDigit_(ch, this, arguments, var=var):
                var = Scope({'ch':ch, 'this':this, 'arguments':arguments}, var)
                var.registers(['ch'])
                return ((var.get('ch')>=Js(48.0)) and (var.get('ch')<=Js(57.0)))
            PyJsHoisted_isDecimalDigit_.func_name = 'isDecimalDigit'
            var.put('isDecimalDigit', PyJsHoisted_isDecimalDigit_)
            @Js
            def PyJsHoisted_isHexDigit_(ch, this, arguments, var=var):
                var = Scope({'ch':ch, 'this':this, 'arguments':arguments}, var)
                var.registers(['ch'])
                return ((var.get('isDecimalDigit')(var.get('ch')) or ((Js(97.0)<=var.get('ch')) and (var.get('ch')<=Js(102.0)))) or ((Js(65.0)<=var.get('ch')) and (var.get('ch')<=Js(70.0))))
            PyJsHoisted_isHexDigit_.func_name = 'isHexDigit'
            var.put('isHexDigit', PyJsHoisted_isHexDigit_)
            @Js
            def PyJsHoisted_isOctalDigit_(ch, this, arguments, var=var):
                var = Scope({'ch':ch, 'this':this, 'arguments':arguments}, var)
                var.registers(['ch'])
                return ((var.get('ch')>=Js(48.0)) and (var.get('ch')<=Js(55.0)))
            PyJsHoisted_isOctalDigit_.func_name = 'isOctalDigit'
            var.put('isOctalDigit', PyJsHoisted_isOctalDigit_)
            @Js
            def PyJsHoisted_isWhiteSpace_(ch, this, arguments, var=var):
                var = Scope({'ch':ch, 'this':this, 'arguments':arguments}, var)
                var.registers(['ch'])
                def PyJs_LONG_1068_(var=var):
                    return (((((PyJsStrictEq(var.get('ch'),Js(32)) or PyJsStrictEq(var.get('ch'),Js(9))) or PyJsStrictEq(var.get('ch'),Js(11))) or PyJsStrictEq(var.get('ch'),Js(12))) or PyJsStrictEq(var.get('ch'),Js(160))) or ((var.get('ch')>=Js(5760)) and (Js([Js(5760), Js(6158), Js(8192), Js(8193), Js(8194), Js(8195), Js(8196), Js(8197), Js(8198), Js(8199), Js(8200), Js(8201), Js(8202), Js(8239), Js(8287), Js(12288), Js(65279)]).callprop('indexOf', var.get('ch'))>=Js(0.0))))
                return PyJs_LONG_1068_()
            PyJsHoisted_isWhiteSpace_.func_name = 'isWhiteSpace'
            var.put('isWhiteSpace', PyJsHoisted_isWhiteSpace_)
            @Js
            def PyJsHoisted_isLineTerminator_(ch, this, arguments, var=var):
                var = Scope({'ch':ch, 'this':this, 'arguments':arguments}, var)
                var.registers(['ch'])
                return (((PyJsStrictEq(var.get('ch'),Js(10)) or PyJsStrictEq(var.get('ch'),Js(13))) or PyJsStrictEq(var.get('ch'),Js(8232))) or PyJsStrictEq(var.get('ch'),Js(8233)))
            PyJsHoisted_isLineTerminator_.func_name = 'isLineTerminator'
            var.put('isLineTerminator', PyJsHoisted_isLineTerminator_)
            @Js
            def PyJsHoisted_isIdentifierStart_(ch, this, arguments, var=var):
                var = Scope({'ch':ch, 'this':this, 'arguments':arguments}, var)
                var.registers(['ch'])
                def PyJs_LONG_1069_(var=var):
                    return (((((PyJsStrictEq(var.get('ch'),Js(36.0)) or PyJsStrictEq(var.get('ch'),Js(95.0))) or ((var.get('ch')>=Js(65.0)) and (var.get('ch')<=Js(90.0)))) or ((var.get('ch')>=Js(97.0)) and (var.get('ch')<=Js(122.0)))) or PyJsStrictEq(var.get('ch'),Js(92.0))) or ((var.get('ch')>=Js(128)) and var.get('Regex').get('NonAsciiIdentifierStart').callprop('test', var.get('String').callprop('fromCharCode', var.get('ch')))))
                return PyJs_LONG_1069_()
            PyJsHoisted_isIdentifierStart_.func_name = 'isIdentifierStart'
            var.put('isIdentifierStart', PyJsHoisted_isIdentifierStart_)
            @Js
            def PyJsHoisted_isIdentifierPart_(ch, this, arguments, var=var):
                var = Scope({'ch':ch, 'this':this, 'arguments':arguments}, var)
                var.registers(['ch'])
                def PyJs_LONG_1070_(var=var):
                    return ((((((PyJsStrictEq(var.get('ch'),Js(36.0)) or PyJsStrictEq(var.get('ch'),Js(95.0))) or ((var.get('ch')>=Js(65.0)) and (var.get('ch')<=Js(90.0)))) or ((var.get('ch')>=Js(97.0)) and (var.get('ch')<=Js(122.0)))) or ((var.get('ch')>=Js(48.0)) and (var.get('ch')<=Js(57.0)))) or PyJsStrictEq(var.get('ch'),Js(92.0))) or ((var.get('ch')>=Js(128)) and var.get('Regex').get('NonAsciiIdentifierPart').callprop('test', var.get('String').callprop('fromCharCode', var.get('ch')))))
                return PyJs_LONG_1070_()
            PyJsHoisted_isIdentifierPart_.func_name = 'isIdentifierPart'
            var.put('isIdentifierPart', PyJsHoisted_isIdentifierPart_)
            Js('use strict')
            pass
            def PyJs_LONG_1066_(var=var):
                return var.get('RegExp').create(Js('[ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԧԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠࢢ-ࢬऄ-हऽॐक़-ॡॱ-ॷॹ-ॿঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-ళవ-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛰᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤜᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚗꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꪀ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ]'))
            def PyJs_LONG_1067_(var=var):
                return var.get('RegExp').create(Js('[ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮ̀-ʹͶͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧԱ-Ֆՙա-և֑-ׇֽֿׁׂׅׄא-תװ-ײؐ-ؚؠ-٩ٮ-ۓە-ۜ۟-۪ۨ-ۼۿܐ-݊ݍ-ޱ߀-ߵߺࠀ-࠭ࡀ-࡛ࢠࢢ-ࢬࣤ-ࣾऀ-ॣ०-९ॱ-ॷॹ-ॿঁ-ঃঅ-ঌএঐও-নপ-রলশ-হ়-ৄেৈো-ৎৗড়ঢ়য়-ৣ০-ৱਁ-ਃਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹ਼ਾ-ੂੇੈੋ-੍ੑਖ਼-ੜਫ਼੦-ੵઁ-ઃઅ-ઍએ-ઑઓ-નપ-રલળવ-હ઼-ૅે-ૉો-્ૐૠ-ૣ૦-૯ଁ-ଃଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହ଼-ୄେୈୋ-୍ୖୗଡ଼ଢ଼ୟ-ୣ୦-୯ୱஂஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹா-ூெ-ைொ-்ௐௗ௦-௯ఁ-ఃఅ-ఌఎ-ఐఒ-నప-ళవ-హఽ-ౄె-ైొ-్ౕౖౘౙౠ-ౣ౦-౯ಂಃಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹ಼-ೄೆ-ೈೊ-್ೕೖೞೠ-ೣ೦-೯ೱೲംഃഅ-ഌഎ-ഐഒ-ഺഽ-ൄെ-ൈൊ-ൎൗൠ-ൣ൦-൯ൺ-ൿංඃඅ-ඖක-නඳ-රලව-ෆ්ා-ුූෘ-ෟෲෳก-ฺเ-๎๐-๙ກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ູົ-ຽເ-ໄໆ່-ໍ໐-໙ໜ-ໟༀ༘༙༠-༩༹༵༷༾-ཇཉ-ཬཱ-྄྆-ྗྙ-ྼ࿆က-၉ၐ-ႝႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚ፝-፟ᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛰᜀ-ᜌᜎ-᜔ᜠ-᜴ᝀ-ᝓᝠ-ᝬᝮ-ᝰᝲᝳក-៓ៗៜ៝០-៩᠋-᠍᠐-᠙ᠠ-ᡷᢀ-ᢪᢰ-ᣵᤀ-ᤜᤠ-ᤫᤰ-᤻᥆-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉ᧐-᧙ᨀ-ᨛᨠ-ᩞ᩠-᩿᩼-᪉᪐-᪙ᪧᬀ-ᭋ᭐-᭙᭫-᭳ᮀ-᯳ᰀ-᰷᱀-᱉ᱍ-ᱽ᳐-᳔᳒-ᳶᴀ-ᷦ᷼-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ\u200c\u200d‿⁀⁔ⁱⁿₐ-ₜ⃐-⃥⃜⃡-⃰ℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯ⵿-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⷠ-ⷿⸯ々-〇〡-〯〱-〵〸-〼ぁ-ゖ゙゚ゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘫꙀ-꙯ꙴ-꙽ꙿ-ꚗꚟ-꛱ꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꠧꡀ-ꡳꢀ-꣄꣐-꣙꣠-ꣷꣻ꤀-꤭ꤰ-꥓ꥠ-ꥼꦀ-꧀ꧏ-꧙ꨀ-ꨶꩀ-ꩍ꩐-꩙ꩠ-ꩶꩺꩻꪀ-ꫂꫛ-ꫝꫠ-ꫯꫲ-꫶ꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꯀ-ꯪ꯬꯭꯰-꯹가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻ︀-️︠-︦︳︴﹍-﹏ﹰ-ﹴﹶ-ﻼ０-９Ａ-Ｚ＿ａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ]'))
            var.put('Regex', Js({'NonAsciiIdentifierStart':PyJs_LONG_1066_(),'NonAsciiIdentifierPart':PyJs_LONG_1067_()}))
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            var.get('module').put('exports', Js({'isDecimalDigit':var.get('isDecimalDigit'),'isHexDigit':var.get('isHexDigit'),'isOctalDigit':var.get('isOctalDigit'),'isWhiteSpace':var.get('isWhiteSpace'),'isLineTerminator':var.get('isLineTerminator'),'isIdentifierStart':var.get('isIdentifierStart'),'isIdentifierPart':var.get('isIdentifierPart')}))
        PyJs_anonymous_1065_._set_name('anonymous')
        PyJs_anonymous_1065_()
    PyJs_anonymous_1064_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1071_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_1072_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['code', 'isRestrictedWord', 'isIdentifierName', 'isStrictModeReservedWordES6', 'isKeywordES6', 'isKeywordES5'])
            @Js
            def PyJsHoisted_isStrictModeReservedWordES6_(id, this, arguments, var=var):
                var = Scope({'id':id, 'this':this, 'arguments':arguments}, var)
                var.registers(['id'])
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get('id'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('implements')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('interface')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('package')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('private')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('protected')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('public')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('static')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('let')):
                        SWITCHED = True
                        return Js(True)
                    if True:
                        SWITCHED = True
                        return Js(False)
                    SWITCHED = True
                    break
            PyJsHoisted_isStrictModeReservedWordES6_.func_name = 'isStrictModeReservedWordES6'
            var.put('isStrictModeReservedWordES6', PyJsHoisted_isStrictModeReservedWordES6_)
            @Js
            def PyJsHoisted_isKeywordES5_(id, strict, this, arguments, var=var):
                var = Scope({'id':id, 'strict':strict, 'this':this, 'arguments':arguments}, var)
                var.registers(['id', 'strict'])
                if (var.get('strict').neg() and PyJsStrictEq(var.get('id'),Js('yield'))):
                    return Js(False)
                return var.get('isKeywordES6')(var.get('id'), var.get('strict'))
            PyJsHoisted_isKeywordES5_.func_name = 'isKeywordES5'
            var.put('isKeywordES5', PyJsHoisted_isKeywordES5_)
            @Js
            def PyJsHoisted_isKeywordES6_(id, strict, this, arguments, var=var):
                var = Scope({'id':id, 'strict':strict, 'this':this, 'arguments':arguments}, var)
                var.registers(['id', 'strict'])
                if (var.get('strict') and var.get('isStrictModeReservedWordES6')(var.get('id'))):
                    return Js(True)
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get('id').get('length'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                        SWITCHED = True
                        return ((PyJsStrictEq(var.get('id'),Js('if')) or PyJsStrictEq(var.get('id'),Js('in'))) or PyJsStrictEq(var.get('id'),Js('do')))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                        SWITCHED = True
                        return (((PyJsStrictEq(var.get('id'),Js('var')) or PyJsStrictEq(var.get('id'),Js('for'))) or PyJsStrictEq(var.get('id'),Js('new'))) or PyJsStrictEq(var.get('id'),Js('try')))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js(4.0)):
                        SWITCHED = True
                        return (((((PyJsStrictEq(var.get('id'),Js('this')) or PyJsStrictEq(var.get('id'),Js('else'))) or PyJsStrictEq(var.get('id'),Js('case'))) or PyJsStrictEq(var.get('id'),Js('void'))) or PyJsStrictEq(var.get('id'),Js('with'))) or PyJsStrictEq(var.get('id'),Js('enum')))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js(5.0)):
                        SWITCHED = True
                        return (((((((PyJsStrictEq(var.get('id'),Js('while')) or PyJsStrictEq(var.get('id'),Js('break'))) or PyJsStrictEq(var.get('id'),Js('catch'))) or PyJsStrictEq(var.get('id'),Js('throw'))) or PyJsStrictEq(var.get('id'),Js('const'))) or PyJsStrictEq(var.get('id'),Js('yield'))) or PyJsStrictEq(var.get('id'),Js('class'))) or PyJsStrictEq(var.get('id'),Js('super')))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js(6.0)):
                        SWITCHED = True
                        return (((((PyJsStrictEq(var.get('id'),Js('return')) or PyJsStrictEq(var.get('id'),Js('typeof'))) or PyJsStrictEq(var.get('id'),Js('delete'))) or PyJsStrictEq(var.get('id'),Js('switch'))) or PyJsStrictEq(var.get('id'),Js('export'))) or PyJsStrictEq(var.get('id'),Js('import')))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js(7.0)):
                        SWITCHED = True
                        return ((PyJsStrictEq(var.get('id'),Js('default')) or PyJsStrictEq(var.get('id'),Js('finally'))) or PyJsStrictEq(var.get('id'),Js('extends')))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js(8.0)):
                        SWITCHED = True
                        return ((PyJsStrictEq(var.get('id'),Js('function')) or PyJsStrictEq(var.get('id'),Js('continue'))) or PyJsStrictEq(var.get('id'),Js('debugger')))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js(10.0)):
                        SWITCHED = True
                        return PyJsStrictEq(var.get('id'),Js('instanceof'))
                    if True:
                        SWITCHED = True
                        return Js(False)
                    SWITCHED = True
                    break
            PyJsHoisted_isKeywordES6_.func_name = 'isKeywordES6'
            var.put('isKeywordES6', PyJsHoisted_isKeywordES6_)
            @Js
            def PyJsHoisted_isRestrictedWord_(id, this, arguments, var=var):
                var = Scope({'id':id, 'this':this, 'arguments':arguments}, var)
                var.registers(['id'])
                return (PyJsStrictEq(var.get('id'),Js('eval')) or PyJsStrictEq(var.get('id'),Js('arguments')))
            PyJsHoisted_isRestrictedWord_.func_name = 'isRestrictedWord'
            var.put('isRestrictedWord', PyJsHoisted_isRestrictedWord_)
            @Js
            def PyJsHoisted_isIdentifierName_(id, this, arguments, var=var):
                var = Scope({'id':id, 'this':this, 'arguments':arguments}, var)
                var.registers(['id', 'ch', 'i', 'iz'])
                pass
                if PyJsStrictEq(var.get('id').get('length'),Js(0.0)):
                    return Js(False)
                var.put('ch', var.get('id').callprop('charCodeAt', Js(0.0)))
                if (var.get('code').callprop('isIdentifierStart', var.get('ch')).neg() or PyJsStrictEq(var.get('ch'),Js(92.0))):
                    return Js(False)
                #for JS loop
                PyJsComma(var.put('i', Js(1.0)),var.put('iz', var.get('id').get('length')))
                while (var.get('i')<var.get('iz')):
                    try:
                        var.put('ch', var.get('id').callprop('charCodeAt', var.get('i')))
                        if (var.get('code').callprop('isIdentifierPart', var.get('ch')).neg() or PyJsStrictEq(var.get('ch'),Js(92.0))):
                            return Js(False)
                    finally:
                            var.put('i',Js(var.get('i').to_number())+Js(1))
                return Js(True)
            PyJsHoisted_isIdentifierName_.func_name = 'isIdentifierName'
            var.put('isIdentifierName', PyJsHoisted_isIdentifierName_)
            Js('use strict')
            var.put('code', var.get('require')(Js('./code')))
            pass
            pass
            pass
            pass
            pass
            var.get('module').put('exports', Js({'isKeywordES5':var.get('isKeywordES5'),'isKeywordES6':var.get('isKeywordES6'),'isRestrictedWord':var.get('isRestrictedWord'),'isIdentifierName':var.get('isIdentifierName')}))
        PyJs_anonymous_1072_._set_name('anonymous')
        PyJs_anonymous_1072_()
    PyJs_anonymous_1071_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1073_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_1074_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            Js('use strict')
            var.get('exports').put('code', var.get('require')(Js('./code')))
            var.get('exports').put('keyword', var.get('require')(Js('./keyword')))
        PyJs_anonymous_1074_._set_name('anonymous')
        PyJs_anonymous_1074_()
    PyJs_anonymous_1073_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1075_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('exports').put('SourceMapGenerator', var.get('require')(Js('./source-map/source-map-generator')).get('SourceMapGenerator'))
        var.get('exports').put('SourceMapConsumer', var.get('require')(Js('./source-map/source-map-consumer')).get('SourceMapConsumer'))
        var.get('exports').put('SourceNode', var.get('require')(Js('./source-map/source-node')).get('SourceNode'))
    PyJs_anonymous_1075_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1076_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'define', 'module', 'exports'])
        if PyJsStrictNeq(var.get('define',throw=False).typeof(),Js('function')):
            var.put('define', var.get('require')(Js('amdefine'))(var.get('module'), var.get('require')))
        @Js
        def PyJs_anonymous_1077_(require, exports, module, this, arguments, var=var):
            var = Scope({'require':require, 'exports':exports, 'module':module, 'this':this, 'arguments':arguments}, var)
            var.registers(['require', 'ArraySet', 'exports', 'module', 'util'])
            @Js
            def PyJsHoisted_ArraySet_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get(u"this").put('_array', Js([]))
                var.get(u"this").put('_set', Js({}))
            PyJsHoisted_ArraySet_.func_name = 'ArraySet'
            var.put('ArraySet', PyJsHoisted_ArraySet_)
            var.put('util', var.get('require')(Js('./util')))
            pass
            @Js
            def PyJs_ArraySet_fromArray_1078_(aArray, aAllowDuplicates, this, arguments, var=var):
                var = Scope({'aArray':aArray, 'aAllowDuplicates':aAllowDuplicates, 'this':this, 'arguments':arguments, 'ArraySet_fromArray':PyJs_ArraySet_fromArray_1078_}, var)
                var.registers(['aArray', 'i', 'aAllowDuplicates', 'set', 'len'])
                var.put('set', var.get('ArraySet').create())
                #for JS loop
                var.put('i', Js(0.0))
                var.put('len', var.get('aArray').get('length'))
                while (var.get('i')<var.get('len')):
                    try:
                        var.get('set').callprop('add', var.get('aArray').get(var.get('i')), var.get('aAllowDuplicates'))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get('set')
            PyJs_ArraySet_fromArray_1078_._set_name('ArraySet_fromArray')
            var.get('ArraySet').put('fromArray', PyJs_ArraySet_fromArray_1078_)
            @Js
            def PyJs_ArraySet_add_1079_(aStr, aAllowDuplicates, this, arguments, var=var):
                var = Scope({'aStr':aStr, 'aAllowDuplicates':aAllowDuplicates, 'this':this, 'arguments':arguments, 'ArraySet_add':PyJs_ArraySet_add_1079_}, var)
                var.registers(['aStr', 'aAllowDuplicates', 'isDuplicate', 'idx'])
                var.put('isDuplicate', var.get(u"this").callprop('has', var.get('aStr')))
                var.put('idx', var.get(u"this").get('_array').get('length'))
                if (var.get('isDuplicate').neg() or var.get('aAllowDuplicates')):
                    var.get(u"this").get('_array').callprop('push', var.get('aStr'))
                if var.get('isDuplicate').neg():
                    var.get(u"this").get('_set').put(var.get('util').callprop('toSetString', var.get('aStr')), var.get('idx'))
            PyJs_ArraySet_add_1079_._set_name('ArraySet_add')
            var.get('ArraySet').get('prototype').put('add', PyJs_ArraySet_add_1079_)
            @Js
            def PyJs_ArraySet_has_1080_(aStr, this, arguments, var=var):
                var = Scope({'aStr':aStr, 'this':this, 'arguments':arguments, 'ArraySet_has':PyJs_ArraySet_has_1080_}, var)
                var.registers(['aStr'])
                return var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get(u"this").get('_set'), var.get('util').callprop('toSetString', var.get('aStr')))
            PyJs_ArraySet_has_1080_._set_name('ArraySet_has')
            var.get('ArraySet').get('prototype').put('has', PyJs_ArraySet_has_1080_)
            @Js
            def PyJs_ArraySet_indexOf_1081_(aStr, this, arguments, var=var):
                var = Scope({'aStr':aStr, 'this':this, 'arguments':arguments, 'ArraySet_indexOf':PyJs_ArraySet_indexOf_1081_}, var)
                var.registers(['aStr'])
                if var.get(u"this").callprop('has', var.get('aStr')):
                    return var.get(u"this").get('_set').get(var.get('util').callprop('toSetString', var.get('aStr')))
                PyJsTempException = JsToPyException(var.get('Error').create(((Js('"')+var.get('aStr'))+Js('" is not in the set.'))))
                raise PyJsTempException
            PyJs_ArraySet_indexOf_1081_._set_name('ArraySet_indexOf')
            var.get('ArraySet').get('prototype').put('indexOf', PyJs_ArraySet_indexOf_1081_)
            @Js
            def PyJs_ArraySet_at_1082_(aIdx, this, arguments, var=var):
                var = Scope({'aIdx':aIdx, 'this':this, 'arguments':arguments, 'ArraySet_at':PyJs_ArraySet_at_1082_}, var)
                var.registers(['aIdx'])
                if ((var.get('aIdx')>=Js(0.0)) and (var.get('aIdx')<var.get(u"this").get('_array').get('length'))):
                    return var.get(u"this").get('_array').get(var.get('aIdx'))
                PyJsTempException = JsToPyException(var.get('Error').create((Js('No element indexed by ')+var.get('aIdx'))))
                raise PyJsTempException
            PyJs_ArraySet_at_1082_._set_name('ArraySet_at')
            var.get('ArraySet').get('prototype').put('at', PyJs_ArraySet_at_1082_)
            @Js
            def PyJs_ArraySet_toArray_1083_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'ArraySet_toArray':PyJs_ArraySet_toArray_1083_}, var)
                var.registers([])
                return var.get(u"this").get('_array').callprop('slice')
            PyJs_ArraySet_toArray_1083_._set_name('ArraySet_toArray')
            var.get('ArraySet').get('prototype').put('toArray', PyJs_ArraySet_toArray_1083_)
            var.get('exports').put('ArraySet', var.get('ArraySet'))
        PyJs_anonymous_1077_._set_name('anonymous')
        var.get('define')(PyJs_anonymous_1077_)
    PyJs_anonymous_1076_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1084_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'define', 'module', 'exports'])
        if PyJsStrictNeq(var.get('define',throw=False).typeof(),Js('function')):
            var.put('define', var.get('require')(Js('amdefine'))(var.get('module'), var.get('require')))
        @Js
        def PyJs_anonymous_1085_(require, exports, module, this, arguments, var=var):
            var = Scope({'require':require, 'exports':exports, 'module':module, 'this':this, 'arguments':arguments}, var)
            var.registers(['require', 'base64', 'VLQ_BASE_MASK', 'VLQ_CONTINUATION_BIT', 'fromVLQSigned', 'exports', 'module', 'VLQ_BASE_SHIFT', 'toVLQSigned', 'VLQ_BASE'])
            @Js
            def PyJsHoisted_toVLQSigned_(aValue, this, arguments, var=var):
                var = Scope({'aValue':aValue, 'this':this, 'arguments':arguments}, var)
                var.registers(['aValue'])
                return ((((-var.get('aValue'))<<Js(1.0))+Js(1.0)) if (var.get('aValue')<Js(0.0)) else ((var.get('aValue')<<Js(1.0))+Js(0.0)))
            PyJsHoisted_toVLQSigned_.func_name = 'toVLQSigned'
            var.put('toVLQSigned', PyJsHoisted_toVLQSigned_)
            @Js
            def PyJsHoisted_fromVLQSigned_(aValue, this, arguments, var=var):
                var = Scope({'aValue':aValue, 'this':this, 'arguments':arguments}, var)
                var.registers(['aValue', 'shifted', 'isNegative'])
                var.put('isNegative', PyJsStrictEq((var.get('aValue')&Js(1.0)),Js(1.0)))
                var.put('shifted', (var.get('aValue')>>Js(1.0)))
                return ((-var.get('shifted')) if var.get('isNegative') else var.get('shifted'))
            PyJsHoisted_fromVLQSigned_.func_name = 'fromVLQSigned'
            var.put('fromVLQSigned', PyJsHoisted_fromVLQSigned_)
            var.put('base64', var.get('require')(Js('./base64')))
            var.put('VLQ_BASE_SHIFT', Js(5.0))
            var.put('VLQ_BASE', (Js(1.0)<<var.get('VLQ_BASE_SHIFT')))
            var.put('VLQ_BASE_MASK', (var.get('VLQ_BASE')-Js(1.0)))
            var.put('VLQ_CONTINUATION_BIT', var.get('VLQ_BASE'))
            pass
            pass
            @Js
            def PyJs_base64VLQ_encode_1086_(aValue, this, arguments, var=var):
                var = Scope({'aValue':aValue, 'this':this, 'arguments':arguments, 'base64VLQ_encode':PyJs_base64VLQ_encode_1086_}, var)
                var.registers(['aValue', 'encoded', 'vlq', 'digit'])
                var.put('encoded', Js(''))
                pass
                var.put('vlq', var.get('toVLQSigned')(var.get('aValue')))
                while 1:
                    var.put('digit', (var.get('vlq')&var.get('VLQ_BASE_MASK')))
                    var.put('vlq', var.get('VLQ_BASE_SHIFT'), '>>>')
                    if (var.get('vlq')>Js(0.0)):
                        var.put('digit', var.get('VLQ_CONTINUATION_BIT'), '|')
                    var.put('encoded', var.get('base64').callprop('encode', var.get('digit')), '+')
                    if not (var.get('vlq')>Js(0.0)):
                        break
                return var.get('encoded')
            PyJs_base64VLQ_encode_1086_._set_name('base64VLQ_encode')
            var.get('exports').put('encode', PyJs_base64VLQ_encode_1086_)
            @Js
            def PyJs_base64VLQ_decode_1087_(aStr, aOutParam, this, arguments, var=var):
                var = Scope({'aStr':aStr, 'aOutParam':aOutParam, 'this':this, 'arguments':arguments, 'base64VLQ_decode':PyJs_base64VLQ_decode_1087_}, var)
                var.registers(['aStr', 'i', 'strLen', 'shift', 'result', 'continuation', 'aOutParam', 'digit'])
                var.put('i', Js(0.0))
                var.put('strLen', var.get('aStr').get('length'))
                var.put('result', Js(0.0))
                var.put('shift', Js(0.0))
                pass
                while 1:
                    if (var.get('i')>=var.get('strLen')):
                        PyJsTempException = JsToPyException(var.get('Error').create(Js('Expected more digits in base 64 VLQ value.')))
                        raise PyJsTempException
                    var.put('digit', var.get('base64').callprop('decode', var.get('aStr').callprop('charAt', (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)))))
                    var.put('continuation', (var.get('digit')&var.get('VLQ_CONTINUATION_BIT')).neg().neg())
                    var.put('digit', var.get('VLQ_BASE_MASK'), '&')
                    var.put('result', (var.get('result')+(var.get('digit')<<var.get('shift'))))
                    var.put('shift', var.get('VLQ_BASE_SHIFT'), '+')
                    if not var.get('continuation'):
                        break
                var.get('aOutParam').put('value', var.get('fromVLQSigned')(var.get('result')))
                var.get('aOutParam').put('rest', var.get('aStr').callprop('slice', var.get('i')))
            PyJs_base64VLQ_decode_1087_._set_name('base64VLQ_decode')
            var.get('exports').put('decode', PyJs_base64VLQ_decode_1087_)
        PyJs_anonymous_1085_._set_name('anonymous')
        var.get('define')(PyJs_anonymous_1085_)
    PyJs_anonymous_1084_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1088_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'define', 'module', 'exports'])
        if PyJsStrictNeq(var.get('define',throw=False).typeof(),Js('function')):
            var.put('define', var.get('require')(Js('amdefine'))(var.get('module'), var.get('require')))
        @Js
        def PyJs_anonymous_1089_(require, exports, module, this, arguments, var=var):
            var = Scope({'require':require, 'exports':exports, 'module':module, 'this':this, 'arguments':arguments}, var)
            var.registers(['require', 'intToCharMap', 'exports', 'module', 'charToIntMap'])
            var.put('charToIntMap', Js({}))
            var.put('intToCharMap', Js({}))
            @Js
            def PyJs_anonymous_1090_(ch, index, this, arguments, var=var):
                var = Scope({'ch':ch, 'index':index, 'this':this, 'arguments':arguments}, var)
                var.registers(['index', 'ch'])
                var.get('charToIntMap').put(var.get('ch'), var.get('index'))
                var.get('intToCharMap').put(var.get('index'), var.get('ch'))
            PyJs_anonymous_1090_._set_name('anonymous')
            Js('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/').callprop('split', Js('')).callprop('forEach', PyJs_anonymous_1090_)
            @Js
            def PyJs_base64_encode_1091_(aNumber, this, arguments, var=var):
                var = Scope({'aNumber':aNumber, 'this':this, 'arguments':arguments, 'base64_encode':PyJs_base64_encode_1091_}, var)
                var.registers(['aNumber'])
                if var.get('intToCharMap').contains(var.get('aNumber')):
                    return var.get('intToCharMap').get(var.get('aNumber'))
                PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Must be between 0 and 63: ')+var.get('aNumber'))))
                raise PyJsTempException
            PyJs_base64_encode_1091_._set_name('base64_encode')
            var.get('exports').put('encode', PyJs_base64_encode_1091_)
            @Js
            def PyJs_base64_decode_1092_(aChar, this, arguments, var=var):
                var = Scope({'aChar':aChar, 'this':this, 'arguments':arguments, 'base64_decode':PyJs_base64_decode_1092_}, var)
                var.registers(['aChar'])
                if var.get('charToIntMap').contains(var.get('aChar')):
                    return var.get('charToIntMap').get(var.get('aChar'))
                PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Not a valid base 64 digit: ')+var.get('aChar'))))
                raise PyJsTempException
            PyJs_base64_decode_1092_._set_name('base64_decode')
            var.get('exports').put('decode', PyJs_base64_decode_1092_)
        PyJs_anonymous_1089_._set_name('anonymous')
        var.get('define')(PyJs_anonymous_1089_)
    PyJs_anonymous_1088_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1093_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'define', 'module', 'exports'])
        if PyJsStrictNeq(var.get('define',throw=False).typeof(),Js('function')):
            var.put('define', var.get('require')(Js('amdefine'))(var.get('module'), var.get('require')))
        @Js
        def PyJs_anonymous_1094_(require, exports, module, this, arguments, var=var):
            var = Scope({'require':require, 'exports':exports, 'module':module, 'this':this, 'arguments':arguments}, var)
            var.registers(['recursiveSearch', 'require', 'module', 'exports'])
            @Js
            def PyJsHoisted_recursiveSearch_(aLow, aHigh, aNeedle, aHaystack, aCompare, this, arguments, var=var):
                var = Scope({'aLow':aLow, 'aHigh':aHigh, 'aNeedle':aNeedle, 'aHaystack':aHaystack, 'aCompare':aCompare, 'this':this, 'arguments':arguments}, var)
                var.registers(['aLow', 'aNeedle', 'cmp', 'aHigh', 'aHaystack', 'mid', 'aCompare'])
                var.put('mid', (var.get('Math').callprop('floor', ((var.get('aHigh')-var.get('aLow'))/Js(2.0)))+var.get('aLow')))
                var.put('cmp', var.get('aCompare')(var.get('aNeedle'), var.get('aHaystack').get(var.get('mid')), Js(True)))
                if PyJsStrictEq(var.get('cmp'),Js(0.0)):
                    return var.get('mid')
                else:
                    if (var.get('cmp')>Js(0.0)):
                        if ((var.get('aHigh')-var.get('mid'))>Js(1.0)):
                            return var.get('recursiveSearch')(var.get('mid'), var.get('aHigh'), var.get('aNeedle'), var.get('aHaystack'), var.get('aCompare'))
                        return var.get('mid')
                    else:
                        if ((var.get('mid')-var.get('aLow'))>Js(1.0)):
                            return var.get('recursiveSearch')(var.get('aLow'), var.get('mid'), var.get('aNeedle'), var.get('aHaystack'), var.get('aCompare'))
                        return ((-Js(1.0)) if (var.get('aLow')<Js(0.0)) else var.get('aLow'))
            PyJsHoisted_recursiveSearch_.func_name = 'recursiveSearch'
            var.put('recursiveSearch', PyJsHoisted_recursiveSearch_)
            pass
            @Js
            def PyJs_search_1095_(aNeedle, aHaystack, aCompare, this, arguments, var=var):
                var = Scope({'aNeedle':aNeedle, 'aHaystack':aHaystack, 'aCompare':aCompare, 'this':this, 'arguments':arguments, 'search':PyJs_search_1095_}, var)
                var.registers(['aNeedle', 'aCompare', 'aHaystack'])
                if PyJsStrictEq(var.get('aHaystack').get('length'),Js(0.0)):
                    return (-Js(1.0))
                return var.get('recursiveSearch')((-Js(1.0)), var.get('aHaystack').get('length'), var.get('aNeedle'), var.get('aHaystack'), var.get('aCompare'))
            PyJs_search_1095_._set_name('search')
            var.get('exports').put('search', PyJs_search_1095_)
        PyJs_anonymous_1094_._set_name('anonymous')
        var.get('define')(PyJs_anonymous_1094_)
    PyJs_anonymous_1093_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1096_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'define', 'module', 'exports'])
        if PyJsStrictNeq(var.get('define',throw=False).typeof(),Js('function')):
            var.put('define', var.get('require')(Js('amdefine'))(var.get('module'), var.get('require')))
        @Js
        def PyJs_anonymous_1097_(require, exports, module, this, arguments, var=var):
            var = Scope({'require':require, 'exports':exports, 'module':module, 'this':this, 'arguments':arguments}, var)
            var.registers(['require', 'generatedPositionAfter', 'exports', 'module', 'util', 'MappingList'])
            @Js
            def PyJsHoisted_generatedPositionAfter_(mappingA, mappingB, this, arguments, var=var):
                var = Scope({'mappingA':mappingA, 'mappingB':mappingB, 'this':this, 'arguments':arguments}, var)
                var.registers(['mappingA', 'columnB', 'mappingB', 'lineA', 'lineB', 'columnA'])
                var.put('lineA', var.get('mappingA').get('generatedLine'))
                var.put('lineB', var.get('mappingB').get('generatedLine'))
                var.put('columnA', var.get('mappingA').get('generatedColumn'))
                var.put('columnB', var.get('mappingB').get('generatedColumn'))
                return (((var.get('lineB')>var.get('lineA')) or ((var.get('lineB')==var.get('lineA')) and (var.get('columnB')>=var.get('columnA')))) or (var.get('util').callprop('compareByGeneratedPositions', var.get('mappingA'), var.get('mappingB'))<=Js(0.0)))
            PyJsHoisted_generatedPositionAfter_.func_name = 'generatedPositionAfter'
            var.put('generatedPositionAfter', PyJsHoisted_generatedPositionAfter_)
            @Js
            def PyJsHoisted_MappingList_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get(u"this").put('_array', Js([]))
                var.get(u"this").put('_sorted', Js(True))
                var.get(u"this").put('_last', Js({'generatedLine':(-Js(1.0)),'generatedColumn':Js(0.0)}))
            PyJsHoisted_MappingList_.func_name = 'MappingList'
            var.put('MappingList', PyJsHoisted_MappingList_)
            var.put('util', var.get('require')(Js('./util')))
            pass
            pass
            @Js
            def PyJs_MappingList_forEach_1098_(aCallback, aThisArg, this, arguments, var=var):
                var = Scope({'aCallback':aCallback, 'aThisArg':aThisArg, 'this':this, 'arguments':arguments, 'MappingList_forEach':PyJs_MappingList_forEach_1098_}, var)
                var.registers(['aThisArg', 'aCallback'])
                var.get(u"this").get('_array').callprop('forEach', var.get('aCallback'), var.get('aThisArg'))
            PyJs_MappingList_forEach_1098_._set_name('MappingList_forEach')
            var.get('MappingList').get('prototype').put('unsortedForEach', PyJs_MappingList_forEach_1098_)
            @Js
            def PyJs_MappingList_add_1099_(aMapping, this, arguments, var=var):
                var = Scope({'aMapping':aMapping, 'this':this, 'arguments':arguments, 'MappingList_add':PyJs_MappingList_add_1099_}, var)
                var.registers(['aMapping', 'mapping'])
                pass
                if var.get('generatedPositionAfter')(var.get(u"this").get('_last'), var.get('aMapping')):
                    var.get(u"this").put('_last', var.get('aMapping'))
                    var.get(u"this").get('_array').callprop('push', var.get('aMapping'))
                else:
                    var.get(u"this").put('_sorted', Js(False))
                    var.get(u"this").get('_array').callprop('push', var.get('aMapping'))
            PyJs_MappingList_add_1099_._set_name('MappingList_add')
            var.get('MappingList').get('prototype').put('add', PyJs_MappingList_add_1099_)
            @Js
            def PyJs_MappingList_toArray_1100_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'MappingList_toArray':PyJs_MappingList_toArray_1100_}, var)
                var.registers([])
                if var.get(u"this").get('_sorted').neg():
                    var.get(u"this").get('_array').callprop('sort', var.get('util').get('compareByGeneratedPositions'))
                    var.get(u"this").put('_sorted', Js(True))
                return var.get(u"this").get('_array')
            PyJs_MappingList_toArray_1100_._set_name('MappingList_toArray')
            var.get('MappingList').get('prototype').put('toArray', PyJs_MappingList_toArray_1100_)
            var.get('exports').put('MappingList', var.get('MappingList'))
        PyJs_anonymous_1097_._set_name('anonymous')
        var.get('define')(PyJs_anonymous_1097_)
    PyJs_anonymous_1096_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1101_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'define', 'module', 'exports'])
        if PyJsStrictNeq(var.get('define',throw=False).typeof(),Js('function')):
            var.put('define', var.get('require')(Js('amdefine'))(var.get('module'), var.get('require')))
        @Js
        def PyJs_anonymous_1102_(require, exports, module, this, arguments, var=var):
            var = Scope({'require':require, 'exports':exports, 'module':module, 'this':this, 'arguments':arguments}, var)
            var.registers(['require', 'binarySearch', 'ArraySet', 'exports', 'module', 'util', 'base64VLQ', 'SourceMapConsumer'])
            @Js
            def PyJsHoisted_SourceMapConsumer_(aSourceMap, this, arguments, var=var):
                var = Scope({'aSourceMap':aSourceMap, 'this':this, 'arguments':arguments}, var)
                var.registers(['sourceRoot', 'file', 'aSourceMap', 'sources', 'mappings', 'version', 'sourcesContent', 'sourceMap', 'names'])
                var.put('sourceMap', var.get('aSourceMap'))
                if PyJsStrictEq(var.get('aSourceMap',throw=False).typeof(),Js('string')):
                    var.put('sourceMap', var.get('JSON').callprop('parse', var.get('aSourceMap').callprop('replace', JsRegExp("/^\\)\\]\\}'/"), Js(''))))
                var.put('version', var.get('util').callprop('getArg', var.get('sourceMap'), Js('version')))
                var.put('sources', var.get('util').callprop('getArg', var.get('sourceMap'), Js('sources')))
                var.put('names', var.get('util').callprop('getArg', var.get('sourceMap'), Js('names'), Js([])))
                var.put('sourceRoot', var.get('util').callprop('getArg', var.get('sourceMap'), Js('sourceRoot'), var.get(u"null")))
                var.put('sourcesContent', var.get('util').callprop('getArg', var.get('sourceMap'), Js('sourcesContent'), var.get(u"null")))
                var.put('mappings', var.get('util').callprop('getArg', var.get('sourceMap'), Js('mappings')))
                var.put('file', var.get('util').callprop('getArg', var.get('sourceMap'), Js('file'), var.get(u"null")))
                if (var.get('version')!=var.get(u"this").get('_version')):
                    PyJsTempException = JsToPyException(var.get('Error').create((Js('Unsupported version: ')+var.get('version'))))
                    raise PyJsTempException
                var.put('sources', var.get('sources').callprop('map', var.get('util').get('normalize')))
                var.get(u"this").put('_names', var.get('ArraySet').callprop('fromArray', var.get('names'), Js(True)))
                var.get(u"this").put('_sources', var.get('ArraySet').callprop('fromArray', var.get('sources'), Js(True)))
                var.get(u"this").put('sourceRoot', var.get('sourceRoot'))
                var.get(u"this").put('sourcesContent', var.get('sourcesContent'))
                var.get(u"this").put('_mappings', var.get('mappings'))
                var.get(u"this").put('file', var.get('file'))
            PyJsHoisted_SourceMapConsumer_.func_name = 'SourceMapConsumer'
            var.put('SourceMapConsumer', PyJsHoisted_SourceMapConsumer_)
            var.put('util', var.get('require')(Js('./util')))
            var.put('binarySearch', var.get('require')(Js('./binary-search')))
            var.put('ArraySet', var.get('require')(Js('./array-set')).get('ArraySet'))
            var.put('base64VLQ', var.get('require')(Js('./base64-vlq')))
            pass
            @Js
            def PyJs_SourceMapConsumer_fromSourceMap_1103_(aSourceMap, this, arguments, var=var):
                var = Scope({'aSourceMap':aSourceMap, 'this':this, 'arguments':arguments, 'SourceMapConsumer_fromSourceMap':PyJs_SourceMapConsumer_fromSourceMap_1103_}, var)
                var.registers(['smc', 'aSourceMap'])
                var.put('smc', var.get('Object').callprop('create', var.get('SourceMapConsumer').get('prototype')))
                var.get('smc').put('_names', var.get('ArraySet').callprop('fromArray', var.get('aSourceMap').get('_names').callprop('toArray'), Js(True)))
                var.get('smc').put('_sources', var.get('ArraySet').callprop('fromArray', var.get('aSourceMap').get('_sources').callprop('toArray'), Js(True)))
                var.get('smc').put('sourceRoot', var.get('aSourceMap').get('_sourceRoot'))
                var.get('smc').put('sourcesContent', var.get('aSourceMap').callprop('_generateSourcesContent', var.get('smc').get('_sources').callprop('toArray'), var.get('smc').get('sourceRoot')))
                var.get('smc').put('file', var.get('aSourceMap').get('_file'))
                var.get('smc').put('__generatedMappings', var.get('aSourceMap').get('_mappings').callprop('toArray').callprop('slice'))
                var.get('smc').put('__originalMappings', var.get('aSourceMap').get('_mappings').callprop('toArray').callprop('slice').callprop('sort', var.get('util').get('compareByOriginalPositions')))
                return var.get('smc')
            PyJs_SourceMapConsumer_fromSourceMap_1103_._set_name('SourceMapConsumer_fromSourceMap')
            var.get('SourceMapConsumer').put('fromSourceMap', PyJs_SourceMapConsumer_fromSourceMap_1103_)
            var.get('SourceMapConsumer').get('prototype').put('_version', Js(3.0))
            @Js
            def PyJs_get_1104_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_1104_}, var)
                var.registers([])
                @Js
                def PyJs_anonymous_1105_(s, this, arguments, var=var):
                    var = Scope({'s':s, 'this':this, 'arguments':arguments}, var)
                    var.registers(['s'])
                    return (var.get('util').callprop('join', var.get(u"this").get('sourceRoot'), var.get('s')) if (var.get(u"this").get('sourceRoot')!=var.get(u"null")) else var.get('s'))
                PyJs_anonymous_1105_._set_name('anonymous')
                return var.get(u"this").get('_sources').callprop('toArray').callprop('map', PyJs_anonymous_1105_, var.get(u"this"))
            PyJs_get_1104_._set_name('get')
            var.get('Object').callprop('defineProperty', var.get('SourceMapConsumer').get('prototype'), Js('sources'), Js({'get':PyJs_get_1104_}))
            var.get('SourceMapConsumer').get('prototype').put('__generatedMappings', var.get(u"null"))
            @Js
            def PyJs_get_1106_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_1106_}, var)
                var.registers([])
                if var.get(u"this").get('__generatedMappings').neg():
                    var.get(u"this").put('__generatedMappings', Js([]))
                    var.get(u"this").put('__originalMappings', Js([]))
                    var.get(u"this").callprop('_parseMappings', var.get(u"this").get('_mappings'), var.get(u"this").get('sourceRoot'))
                return var.get(u"this").get('__generatedMappings')
            PyJs_get_1106_._set_name('get')
            var.get('Object').callprop('defineProperty', var.get('SourceMapConsumer').get('prototype'), Js('_generatedMappings'), Js({'get':PyJs_get_1106_}))
            var.get('SourceMapConsumer').get('prototype').put('__originalMappings', var.get(u"null"))
            @Js
            def PyJs_get_1107_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_1107_}, var)
                var.registers([])
                if var.get(u"this").get('__originalMappings').neg():
                    var.get(u"this").put('__generatedMappings', Js([]))
                    var.get(u"this").put('__originalMappings', Js([]))
                    var.get(u"this").callprop('_parseMappings', var.get(u"this").get('_mappings'), var.get(u"this").get('sourceRoot'))
                return var.get(u"this").get('__originalMappings')
            PyJs_get_1107_._set_name('get')
            var.get('Object').callprop('defineProperty', var.get('SourceMapConsumer').get('prototype'), Js('_originalMappings'), Js({'get':PyJs_get_1107_}))
            @Js
            def PyJs_SourceMapConsumer_nextCharIsMappingSeparator_1108_(aStr, this, arguments, var=var):
                var = Scope({'aStr':aStr, 'this':this, 'arguments':arguments, 'SourceMapConsumer_nextCharIsMappingSeparator':PyJs_SourceMapConsumer_nextCharIsMappingSeparator_1108_}, var)
                var.registers(['c', 'aStr'])
                var.put('c', var.get('aStr').callprop('charAt', Js(0.0)))
                return (PyJsStrictEq(var.get('c'),Js(';')) or PyJsStrictEq(var.get('c'),Js(',')))
            PyJs_SourceMapConsumer_nextCharIsMappingSeparator_1108_._set_name('SourceMapConsumer_nextCharIsMappingSeparator')
            var.get('SourceMapConsumer').get('prototype').put('_nextCharIsMappingSeparator', PyJs_SourceMapConsumer_nextCharIsMappingSeparator_1108_)
            @Js
            def PyJs_SourceMapConsumer_parseMappings_1109_(aStr, aSourceRoot, this, arguments, var=var):
                var = Scope({'aStr':aStr, 'aSourceRoot':aSourceRoot, 'this':this, 'arguments':arguments, 'SourceMapConsumer_parseMappings':PyJs_SourceMapConsumer_parseMappings_1109_}, var)
                var.registers(['aSourceRoot', 'temp', 'previousGeneratedColumn', 'aStr', 'str', 'previousName', 'previousOriginalColumn', 'generatedLine', 'mapping', 'previousOriginalLine', 'previousSource'])
                var.put('generatedLine', Js(1.0))
                var.put('previousGeneratedColumn', Js(0.0))
                var.put('previousOriginalLine', Js(0.0))
                var.put('previousOriginalColumn', Js(0.0))
                var.put('previousSource', Js(0.0))
                var.put('previousName', Js(0.0))
                var.put('str', var.get('aStr'))
                var.put('temp', Js({}))
                pass
                while (var.get('str').get('length')>Js(0.0)):
                    if PyJsStrictEq(var.get('str').callprop('charAt', Js(0.0)),Js(';')):
                        (var.put('generatedLine',Js(var.get('generatedLine').to_number())+Js(1))-Js(1))
                        var.put('str', var.get('str').callprop('slice', Js(1.0)))
                        var.put('previousGeneratedColumn', Js(0.0))
                    else:
                        if PyJsStrictEq(var.get('str').callprop('charAt', Js(0.0)),Js(',')):
                            var.put('str', var.get('str').callprop('slice', Js(1.0)))
                        else:
                            var.put('mapping', Js({}))
                            var.get('mapping').put('generatedLine', var.get('generatedLine'))
                            var.get('base64VLQ').callprop('decode', var.get('str'), var.get('temp'))
                            var.get('mapping').put('generatedColumn', (var.get('previousGeneratedColumn')+var.get('temp').get('value')))
                            var.put('previousGeneratedColumn', var.get('mapping').get('generatedColumn'))
                            var.put('str', var.get('temp').get('rest'))
                            if ((var.get('str').get('length')>Js(0.0)) and var.get(u"this").callprop('_nextCharIsMappingSeparator', var.get('str')).neg()):
                                var.get('base64VLQ').callprop('decode', var.get('str'), var.get('temp'))
                                var.get('mapping').put('source', var.get(u"this").get('_sources').callprop('at', (var.get('previousSource')+var.get('temp').get('value'))))
                                var.put('previousSource', var.get('temp').get('value'), '+')
                                var.put('str', var.get('temp').get('rest'))
                                if (PyJsStrictEq(var.get('str').get('length'),Js(0.0)) or var.get(u"this").callprop('_nextCharIsMappingSeparator', var.get('str'))):
                                    PyJsTempException = JsToPyException(var.get('Error').create(Js('Found a source, but no line and column')))
                                    raise PyJsTempException
                                var.get('base64VLQ').callprop('decode', var.get('str'), var.get('temp'))
                                var.get('mapping').put('originalLine', (var.get('previousOriginalLine')+var.get('temp').get('value')))
                                var.put('previousOriginalLine', var.get('mapping').get('originalLine'))
                                var.get('mapping').put('originalLine', Js(1.0), '+')
                                var.put('str', var.get('temp').get('rest'))
                                if (PyJsStrictEq(var.get('str').get('length'),Js(0.0)) or var.get(u"this").callprop('_nextCharIsMappingSeparator', var.get('str'))):
                                    PyJsTempException = JsToPyException(var.get('Error').create(Js('Found a source and line, but no column')))
                                    raise PyJsTempException
                                var.get('base64VLQ').callprop('decode', var.get('str'), var.get('temp'))
                                var.get('mapping').put('originalColumn', (var.get('previousOriginalColumn')+var.get('temp').get('value')))
                                var.put('previousOriginalColumn', var.get('mapping').get('originalColumn'))
                                var.put('str', var.get('temp').get('rest'))
                                if ((var.get('str').get('length')>Js(0.0)) and var.get(u"this").callprop('_nextCharIsMappingSeparator', var.get('str')).neg()):
                                    var.get('base64VLQ').callprop('decode', var.get('str'), var.get('temp'))
                                    var.get('mapping').put('name', var.get(u"this").get('_names').callprop('at', (var.get('previousName')+var.get('temp').get('value'))))
                                    var.put('previousName', var.get('temp').get('value'), '+')
                                    var.put('str', var.get('temp').get('rest'))
                            var.get(u"this").get('__generatedMappings').callprop('push', var.get('mapping'))
                            if PyJsStrictEq(var.get('mapping').get('originalLine').typeof(),Js('number')):
                                var.get(u"this").get('__originalMappings').callprop('push', var.get('mapping'))
                var.get(u"this").get('__generatedMappings').callprop('sort', var.get('util').get('compareByGeneratedPositions'))
                var.get(u"this").get('__originalMappings').callprop('sort', var.get('util').get('compareByOriginalPositions'))
            PyJs_SourceMapConsumer_parseMappings_1109_._set_name('SourceMapConsumer_parseMappings')
            var.get('SourceMapConsumer').get('prototype').put('_parseMappings', PyJs_SourceMapConsumer_parseMappings_1109_)
            @Js
            def PyJs_SourceMapConsumer_findMapping_1110_(aNeedle, aMappings, aLineName, aColumnName, aComparator, this, arguments, var=var):
                var = Scope({'aNeedle':aNeedle, 'aMappings':aMappings, 'aLineName':aLineName, 'aColumnName':aColumnName, 'aComparator':aComparator, 'this':this, 'arguments':arguments, 'SourceMapConsumer_findMapping':PyJs_SourceMapConsumer_findMapping_1110_}, var)
                var.registers(['aComparator', 'aNeedle', 'aLineName', 'aColumnName', 'aMappings'])
                if (var.get('aNeedle').get(var.get('aLineName'))<=Js(0.0)):
                    PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Line must be greater than or equal to 1, got ')+var.get('aNeedle').get(var.get('aLineName')))))
                    raise PyJsTempException
                if (var.get('aNeedle').get(var.get('aColumnName'))<Js(0.0)):
                    PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Column must be greater than or equal to 0, got ')+var.get('aNeedle').get(var.get('aColumnName')))))
                    raise PyJsTempException
                return var.get('binarySearch').callprop('search', var.get('aNeedle'), var.get('aMappings'), var.get('aComparator'))
            PyJs_SourceMapConsumer_findMapping_1110_._set_name('SourceMapConsumer_findMapping')
            var.get('SourceMapConsumer').get('prototype').put('_findMapping', PyJs_SourceMapConsumer_findMapping_1110_)
            @Js
            def PyJs_SourceMapConsumer_computeColumnSpans_1111_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'SourceMapConsumer_computeColumnSpans':PyJs_SourceMapConsumer_computeColumnSpans_1111_}, var)
                var.registers(['index', 'nextMapping', 'mapping'])
                #for JS loop
                var.put('index', Js(0.0))
                while (var.get('index')<var.get(u"this").get('_generatedMappings').get('length')):
                    try:
                        var.put('mapping', var.get(u"this").get('_generatedMappings').get(var.get('index')))
                        if ((var.get('index')+Js(1.0))<var.get(u"this").get('_generatedMappings').get('length')):
                            var.put('nextMapping', var.get(u"this").get('_generatedMappings').get((var.get('index')+Js(1.0))))
                            if PyJsStrictEq(var.get('mapping').get('generatedLine'),var.get('nextMapping').get('generatedLine')):
                                var.get('mapping').put('lastGeneratedColumn', (var.get('nextMapping').get('generatedColumn')-Js(1.0)))
                                continue
                        var.get('mapping').put('lastGeneratedColumn', var.get('Infinity'))
                    finally:
                            var.put('index',Js(var.get('index').to_number())+Js(1))
            PyJs_SourceMapConsumer_computeColumnSpans_1111_._set_name('SourceMapConsumer_computeColumnSpans')
            var.get('SourceMapConsumer').get('prototype').put('computeColumnSpans', PyJs_SourceMapConsumer_computeColumnSpans_1111_)
            @Js
            def PyJs_SourceMapConsumer_originalPositionFor_1112_(aArgs, this, arguments, var=var):
                var = Scope({'aArgs':aArgs, 'this':this, 'arguments':arguments, 'SourceMapConsumer_originalPositionFor':PyJs_SourceMapConsumer_originalPositionFor_1112_}, var)
                var.registers(['aArgs', 'needle', 'index', 'source', 'mapping'])
                var.put('needle', Js({'generatedLine':var.get('util').callprop('getArg', var.get('aArgs'), Js('line')),'generatedColumn':var.get('util').callprop('getArg', var.get('aArgs'), Js('column'))}))
                var.put('index', var.get(u"this").callprop('_findMapping', var.get('needle'), var.get(u"this").get('_generatedMappings'), Js('generatedLine'), Js('generatedColumn'), var.get('util').get('compareByGeneratedPositions')))
                if (var.get('index')>=Js(0.0)):
                    var.put('mapping', var.get(u"this").get('_generatedMappings').get(var.get('index')))
                    if PyJsStrictEq(var.get('mapping').get('generatedLine'),var.get('needle').get('generatedLine')):
                        var.put('source', var.get('util').callprop('getArg', var.get('mapping'), Js('source'), var.get(u"null")))
                        if ((var.get('source')!=var.get(u"null")) and (var.get(u"this").get('sourceRoot')!=var.get(u"null"))):
                            var.put('source', var.get('util').callprop('join', var.get(u"this").get('sourceRoot'), var.get('source')))
                        return Js({'source':var.get('source'),'line':var.get('util').callprop('getArg', var.get('mapping'), Js('originalLine'), var.get(u"null")),'column':var.get('util').callprop('getArg', var.get('mapping'), Js('originalColumn'), var.get(u"null")),'name':var.get('util').callprop('getArg', var.get('mapping'), Js('name'), var.get(u"null"))})
                return Js({'source':var.get(u"null"),'line':var.get(u"null"),'column':var.get(u"null"),'name':var.get(u"null")})
            PyJs_SourceMapConsumer_originalPositionFor_1112_._set_name('SourceMapConsumer_originalPositionFor')
            var.get('SourceMapConsumer').get('prototype').put('originalPositionFor', PyJs_SourceMapConsumer_originalPositionFor_1112_)
            @Js
            def PyJs_SourceMapConsumer_sourceContentFor_1113_(aSource, this, arguments, var=var):
                var = Scope({'aSource':aSource, 'this':this, 'arguments':arguments, 'SourceMapConsumer_sourceContentFor':PyJs_SourceMapConsumer_sourceContentFor_1113_}, var)
                var.registers(['aSource', 'url', 'fileUriAbsPath'])
                if var.get(u"this").get('sourcesContent').neg():
                    return var.get(u"null")
                if (var.get(u"this").get('sourceRoot')!=var.get(u"null")):
                    var.put('aSource', var.get('util').callprop('relative', var.get(u"this").get('sourceRoot'), var.get('aSource')))
                if var.get(u"this").get('_sources').callprop('has', var.get('aSource')):
                    return var.get(u"this").get('sourcesContent').get(var.get(u"this").get('_sources').callprop('indexOf', var.get('aSource')))
                pass
                if ((var.get(u"this").get('sourceRoot')!=var.get(u"null")) and var.put('url', var.get('util').callprop('urlParse', var.get(u"this").get('sourceRoot')))):
                    var.put('fileUriAbsPath', var.get('aSource').callprop('replace', JsRegExp('/^file:\\/\\//'), Js('')))
                    if ((var.get('url').get('scheme')==Js('file')) and var.get(u"this").get('_sources').callprop('has', var.get('fileUriAbsPath'))):
                        return var.get(u"this").get('sourcesContent').get(var.get(u"this").get('_sources').callprop('indexOf', var.get('fileUriAbsPath')))
                    if ((var.get('url').get('path').neg() or (var.get('url').get('path')==Js('/'))) and var.get(u"this").get('_sources').callprop('has', (Js('/')+var.get('aSource')))):
                        return var.get(u"this").get('sourcesContent').get(var.get(u"this").get('_sources').callprop('indexOf', (Js('/')+var.get('aSource'))))
                PyJsTempException = JsToPyException(var.get('Error').create(((Js('"')+var.get('aSource'))+Js('" is not in the SourceMap.'))))
                raise PyJsTempException
            PyJs_SourceMapConsumer_sourceContentFor_1113_._set_name('SourceMapConsumer_sourceContentFor')
            var.get('SourceMapConsumer').get('prototype').put('sourceContentFor', PyJs_SourceMapConsumer_sourceContentFor_1113_)
            @Js
            def PyJs_SourceMapConsumer_generatedPositionFor_1114_(aArgs, this, arguments, var=var):
                var = Scope({'aArgs':aArgs, 'this':this, 'arguments':arguments, 'SourceMapConsumer_generatedPositionFor':PyJs_SourceMapConsumer_generatedPositionFor_1114_}, var)
                var.registers(['needle', 'aArgs', 'index', 'mapping'])
                var.put('needle', Js({'source':var.get('util').callprop('getArg', var.get('aArgs'), Js('source')),'originalLine':var.get('util').callprop('getArg', var.get('aArgs'), Js('line')),'originalColumn':var.get('util').callprop('getArg', var.get('aArgs'), Js('column'))}))
                if (var.get(u"this").get('sourceRoot')!=var.get(u"null")):
                    var.get('needle').put('source', var.get('util').callprop('relative', var.get(u"this").get('sourceRoot'), var.get('needle').get('source')))
                var.put('index', var.get(u"this").callprop('_findMapping', var.get('needle'), var.get(u"this").get('_originalMappings'), Js('originalLine'), Js('originalColumn'), var.get('util').get('compareByOriginalPositions')))
                if (var.get('index')>=Js(0.0)):
                    var.put('mapping', var.get(u"this").get('_originalMappings').get(var.get('index')))
                    return Js({'line':var.get('util').callprop('getArg', var.get('mapping'), Js('generatedLine'), var.get(u"null")),'column':var.get('util').callprop('getArg', var.get('mapping'), Js('generatedColumn'), var.get(u"null")),'lastColumn':var.get('util').callprop('getArg', var.get('mapping'), Js('lastGeneratedColumn'), var.get(u"null"))})
                return Js({'line':var.get(u"null"),'column':var.get(u"null"),'lastColumn':var.get(u"null")})
            PyJs_SourceMapConsumer_generatedPositionFor_1114_._set_name('SourceMapConsumer_generatedPositionFor')
            var.get('SourceMapConsumer').get('prototype').put('generatedPositionFor', PyJs_SourceMapConsumer_generatedPositionFor_1114_)
            @Js
            def PyJs_SourceMapConsumer_allGeneratedPositionsFor_1115_(aArgs, this, arguments, var=var):
                var = Scope({'aArgs':aArgs, 'this':this, 'arguments':arguments, 'SourceMapConsumer_allGeneratedPositionsFor':PyJs_SourceMapConsumer_allGeneratedPositionsFor_1115_}, var)
                var.registers(['aArgs', 'needle', 'index', 'mappings', 'mapping'])
                var.put('needle', Js({'source':var.get('util').callprop('getArg', var.get('aArgs'), Js('source')),'originalLine':var.get('util').callprop('getArg', var.get('aArgs'), Js('line')),'originalColumn':var.get('Infinity')}))
                if (var.get(u"this").get('sourceRoot')!=var.get(u"null")):
                    var.get('needle').put('source', var.get('util').callprop('relative', var.get(u"this").get('sourceRoot'), var.get('needle').get('source')))
                var.put('mappings', Js([]))
                var.put('index', var.get(u"this").callprop('_findMapping', var.get('needle'), var.get(u"this").get('_originalMappings'), Js('originalLine'), Js('originalColumn'), var.get('util').get('compareByOriginalPositions')))
                if (var.get('index')>=Js(0.0)):
                    var.put('mapping', var.get(u"this").get('_originalMappings').get(var.get('index')))
                    while (var.get('mapping') and PyJsStrictEq(var.get('mapping').get('originalLine'),var.get('needle').get('originalLine'))):
                        var.get('mappings').callprop('push', Js({'line':var.get('util').callprop('getArg', var.get('mapping'), Js('generatedLine'), var.get(u"null")),'column':var.get('util').callprop('getArg', var.get('mapping'), Js('generatedColumn'), var.get(u"null")),'lastColumn':var.get('util').callprop('getArg', var.get('mapping'), Js('lastGeneratedColumn'), var.get(u"null"))}))
                        var.put('mapping', var.get(u"this").get('_originalMappings').get(var.put('index',Js(var.get('index').to_number())-Js(1))))
                return var.get('mappings').callprop('reverse')
            PyJs_SourceMapConsumer_allGeneratedPositionsFor_1115_._set_name('SourceMapConsumer_allGeneratedPositionsFor')
            var.get('SourceMapConsumer').get('prototype').put('allGeneratedPositionsFor', PyJs_SourceMapConsumer_allGeneratedPositionsFor_1115_)
            var.get('SourceMapConsumer').put('GENERATED_ORDER', Js(1.0))
            var.get('SourceMapConsumer').put('ORIGINAL_ORDER', Js(2.0))
            @Js
            def PyJs_SourceMapConsumer_eachMapping_1116_(aCallback, aContext, aOrder, this, arguments, var=var):
                var = Scope({'aCallback':aCallback, 'aContext':aContext, 'aOrder':aOrder, 'this':this, 'arguments':arguments, 'SourceMapConsumer_eachMapping':PyJs_SourceMapConsumer_eachMapping_1116_}, var)
                var.registers(['sourceRoot', 'mappings', 'order', 'aOrder', 'context', 'aContext', 'aCallback'])
                var.put('context', (var.get('aContext') or var.get(u"null")))
                var.put('order', (var.get('aOrder') or var.get('SourceMapConsumer').get('GENERATED_ORDER')))
                pass
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get('order'))
                    if SWITCHED or PyJsStrictEq(CONDITION, var.get('SourceMapConsumer').get('GENERATED_ORDER')):
                        SWITCHED = True
                        var.put('mappings', var.get(u"this").get('_generatedMappings'))
                        break
                    if SWITCHED or PyJsStrictEq(CONDITION, var.get('SourceMapConsumer').get('ORIGINAL_ORDER')):
                        SWITCHED = True
                        var.put('mappings', var.get(u"this").get('_originalMappings'))
                        break
                    if True:
                        SWITCHED = True
                        PyJsTempException = JsToPyException(var.get('Error').create(Js('Unknown order of iteration.')))
                        raise PyJsTempException
                    SWITCHED = True
                    break
                var.put('sourceRoot', var.get(u"this").get('sourceRoot'))
                @Js
                def PyJs_anonymous_1117_(mapping, this, arguments, var=var):
                    var = Scope({'mapping':mapping, 'this':this, 'arguments':arguments}, var)
                    var.registers(['source', 'mapping'])
                    var.put('source', var.get('mapping').get('source'))
                    if ((var.get('source')!=var.get(u"null")) and (var.get('sourceRoot')!=var.get(u"null"))):
                        var.put('source', var.get('util').callprop('join', var.get('sourceRoot'), var.get('source')))
                    return Js({'source':var.get('source'),'generatedLine':var.get('mapping').get('generatedLine'),'generatedColumn':var.get('mapping').get('generatedColumn'),'originalLine':var.get('mapping').get('originalLine'),'originalColumn':var.get('mapping').get('originalColumn'),'name':var.get('mapping').get('name')})
                PyJs_anonymous_1117_._set_name('anonymous')
                var.get('mappings').callprop('map', PyJs_anonymous_1117_).callprop('forEach', var.get('aCallback'), var.get('context'))
            PyJs_SourceMapConsumer_eachMapping_1116_._set_name('SourceMapConsumer_eachMapping')
            var.get('SourceMapConsumer').get('prototype').put('eachMapping', PyJs_SourceMapConsumer_eachMapping_1116_)
            var.get('exports').put('SourceMapConsumer', var.get('SourceMapConsumer'))
        PyJs_anonymous_1102_._set_name('anonymous')
        var.get('define')(PyJs_anonymous_1102_)
    PyJs_anonymous_1101_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1118_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'define', 'module', 'exports'])
        if PyJsStrictNeq(var.get('define',throw=False).typeof(),Js('function')):
            var.put('define', var.get('require')(Js('amdefine'))(var.get('module'), var.get('require')))
        @Js
        def PyJs_anonymous_1119_(require, exports, module, this, arguments, var=var):
            var = Scope({'require':require, 'exports':exports, 'module':module, 'this':this, 'arguments':arguments}, var)
            var.registers(['require', 'ArraySet', 'exports', 'SourceMapGenerator', 'module', 'util', 'base64VLQ', 'MappingList'])
            @Js
            def PyJsHoisted_SourceMapGenerator_(aArgs, this, arguments, var=var):
                var = Scope({'aArgs':aArgs, 'this':this, 'arguments':arguments}, var)
                var.registers(['aArgs'])
                if var.get('aArgs').neg():
                    var.put('aArgs', Js({}))
                var.get(u"this").put('_file', var.get('util').callprop('getArg', var.get('aArgs'), Js('file'), var.get(u"null")))
                var.get(u"this").put('_sourceRoot', var.get('util').callprop('getArg', var.get('aArgs'), Js('sourceRoot'), var.get(u"null")))
                var.get(u"this").put('_skipValidation', var.get('util').callprop('getArg', var.get('aArgs'), Js('skipValidation'), Js(False)))
                var.get(u"this").put('_sources', var.get('ArraySet').create())
                var.get(u"this").put('_names', var.get('ArraySet').create())
                var.get(u"this").put('_mappings', var.get('MappingList').create())
                var.get(u"this").put('_sourcesContents', var.get(u"null"))
            PyJsHoisted_SourceMapGenerator_.func_name = 'SourceMapGenerator'
            var.put('SourceMapGenerator', PyJsHoisted_SourceMapGenerator_)
            var.put('base64VLQ', var.get('require')(Js('./base64-vlq')))
            var.put('util', var.get('require')(Js('./util')))
            var.put('ArraySet', var.get('require')(Js('./array-set')).get('ArraySet'))
            var.put('MappingList', var.get('require')(Js('./mapping-list')).get('MappingList'))
            pass
            var.get('SourceMapGenerator').get('prototype').put('_version', Js(3.0))
            @Js
            def PyJs_SourceMapGenerator_fromSourceMap_1120_(aSourceMapConsumer, this, arguments, var=var):
                var = Scope({'aSourceMapConsumer':aSourceMapConsumer, 'this':this, 'arguments':arguments, 'SourceMapGenerator_fromSourceMap':PyJs_SourceMapGenerator_fromSourceMap_1120_}, var)
                var.registers(['sourceRoot', 'aSourceMapConsumer', 'generator'])
                var.put('sourceRoot', var.get('aSourceMapConsumer').get('sourceRoot'))
                var.put('generator', var.get('SourceMapGenerator').create(Js({'file':var.get('aSourceMapConsumer').get('file'),'sourceRoot':var.get('sourceRoot')})))
                @Js
                def PyJs_anonymous_1121_(mapping, this, arguments, var=var):
                    var = Scope({'mapping':mapping, 'this':this, 'arguments':arguments}, var)
                    var.registers(['newMapping', 'mapping'])
                    var.put('newMapping', Js({'generated':Js({'line':var.get('mapping').get('generatedLine'),'column':var.get('mapping').get('generatedColumn')})}))
                    if (var.get('mapping').get('source')!=var.get(u"null")):
                        var.get('newMapping').put('source', var.get('mapping').get('source'))
                        if (var.get('sourceRoot')!=var.get(u"null")):
                            var.get('newMapping').put('source', var.get('util').callprop('relative', var.get('sourceRoot'), var.get('newMapping').get('source')))
                        var.get('newMapping').put('original', Js({'line':var.get('mapping').get('originalLine'),'column':var.get('mapping').get('originalColumn')}))
                        if (var.get('mapping').get('name')!=var.get(u"null")):
                            var.get('newMapping').put('name', var.get('mapping').get('name'))
                    var.get('generator').callprop('addMapping', var.get('newMapping'))
                PyJs_anonymous_1121_._set_name('anonymous')
                var.get('aSourceMapConsumer').callprop('eachMapping', PyJs_anonymous_1121_)
                @Js
                def PyJs_anonymous_1122_(sourceFile, this, arguments, var=var):
                    var = Scope({'sourceFile':sourceFile, 'this':this, 'arguments':arguments}, var)
                    var.registers(['content', 'sourceFile'])
                    var.put('content', var.get('aSourceMapConsumer').callprop('sourceContentFor', var.get('sourceFile')))
                    if (var.get('content')!=var.get(u"null")):
                        var.get('generator').callprop('setSourceContent', var.get('sourceFile'), var.get('content'))
                PyJs_anonymous_1122_._set_name('anonymous')
                var.get('aSourceMapConsumer').get('sources').callprop('forEach', PyJs_anonymous_1122_)
                return var.get('generator')
            PyJs_SourceMapGenerator_fromSourceMap_1120_._set_name('SourceMapGenerator_fromSourceMap')
            var.get('SourceMapGenerator').put('fromSourceMap', PyJs_SourceMapGenerator_fromSourceMap_1120_)
            @Js
            def PyJs_SourceMapGenerator_addMapping_1123_(aArgs, this, arguments, var=var):
                var = Scope({'aArgs':aArgs, 'this':this, 'arguments':arguments, 'SourceMapGenerator_addMapping':PyJs_SourceMapGenerator_addMapping_1123_}, var)
                var.registers(['aArgs', 'source', 'original', 'generated', 'name'])
                var.put('generated', var.get('util').callprop('getArg', var.get('aArgs'), Js('generated')))
                var.put('original', var.get('util').callprop('getArg', var.get('aArgs'), Js('original'), var.get(u"null")))
                var.put('source', var.get('util').callprop('getArg', var.get('aArgs'), Js('source'), var.get(u"null")))
                var.put('name', var.get('util').callprop('getArg', var.get('aArgs'), Js('name'), var.get(u"null")))
                if var.get(u"this").get('_skipValidation').neg():
                    var.get(u"this").callprop('_validateMapping', var.get('generated'), var.get('original'), var.get('source'), var.get('name'))
                if ((var.get('source')!=var.get(u"null")) and var.get(u"this").get('_sources').callprop('has', var.get('source')).neg()):
                    var.get(u"this").get('_sources').callprop('add', var.get('source'))
                if ((var.get('name')!=var.get(u"null")) and var.get(u"this").get('_names').callprop('has', var.get('name')).neg()):
                    var.get(u"this").get('_names').callprop('add', var.get('name'))
                var.get(u"this").get('_mappings').callprop('add', Js({'generatedLine':var.get('generated').get('line'),'generatedColumn':var.get('generated').get('column'),'originalLine':((var.get('original')!=var.get(u"null")) and var.get('original').get('line')),'originalColumn':((var.get('original')!=var.get(u"null")) and var.get('original').get('column')),'source':var.get('source'),'name':var.get('name')}))
            PyJs_SourceMapGenerator_addMapping_1123_._set_name('SourceMapGenerator_addMapping')
            var.get('SourceMapGenerator').get('prototype').put('addMapping', PyJs_SourceMapGenerator_addMapping_1123_)
            @Js
            def PyJs_SourceMapGenerator_setSourceContent_1124_(aSourceFile, aSourceContent, this, arguments, var=var):
                var = Scope({'aSourceFile':aSourceFile, 'aSourceContent':aSourceContent, 'this':this, 'arguments':arguments, 'SourceMapGenerator_setSourceContent':PyJs_SourceMapGenerator_setSourceContent_1124_}, var)
                var.registers(['aSourceContent', 'aSourceFile', 'source'])
                var.put('source', var.get('aSourceFile'))
                if (var.get(u"this").get('_sourceRoot')!=var.get(u"null")):
                    var.put('source', var.get('util').callprop('relative', var.get(u"this").get('_sourceRoot'), var.get('source')))
                if (var.get('aSourceContent')!=var.get(u"null")):
                    if var.get(u"this").get('_sourcesContents').neg():
                        var.get(u"this").put('_sourcesContents', Js({}))
                    var.get(u"this").get('_sourcesContents').put(var.get('util').callprop('toSetString', var.get('source')), var.get('aSourceContent'))
                else:
                    if var.get(u"this").get('_sourcesContents'):
                        var.get(u"this").get('_sourcesContents').delete(var.get('util').callprop('toSetString', var.get('source')))
                        if PyJsStrictEq(var.get('Object').callprop('keys', var.get(u"this").get('_sourcesContents')).get('length'),Js(0.0)):
                            var.get(u"this").put('_sourcesContents', var.get(u"null"))
            PyJs_SourceMapGenerator_setSourceContent_1124_._set_name('SourceMapGenerator_setSourceContent')
            var.get('SourceMapGenerator').get('prototype').put('setSourceContent', PyJs_SourceMapGenerator_setSourceContent_1124_)
            @Js
            def PyJs_SourceMapGenerator_applySourceMap_1125_(aSourceMapConsumer, aSourceFile, aSourceMapPath, this, arguments, var=var):
                var = Scope({'aSourceMapConsumer':aSourceMapConsumer, 'aSourceFile':aSourceFile, 'aSourceMapPath':aSourceMapPath, 'this':this, 'arguments':arguments, 'SourceMapGenerator_applySourceMap':PyJs_SourceMapGenerator_applySourceMap_1125_}, var)
                var.registers(['newNames', 'sourceRoot', 'aSourceFile', 'newSources', 'aSourceMapConsumer', 'sourceFile', 'aSourceMapPath'])
                var.put('sourceFile', var.get('aSourceFile'))
                if (var.get('aSourceFile')==var.get(u"null")):
                    if (var.get('aSourceMapConsumer').get('file')==var.get(u"null")):
                        PyJsTempException = JsToPyException(var.get('Error').create((Js('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ')+Js('or the source map\'s "file" property. Both were omitted.'))))
                        raise PyJsTempException
                    var.put('sourceFile', var.get('aSourceMapConsumer').get('file'))
                var.put('sourceRoot', var.get(u"this").get('_sourceRoot'))
                if (var.get('sourceRoot')!=var.get(u"null")):
                    var.put('sourceFile', var.get('util').callprop('relative', var.get('sourceRoot'), var.get('sourceFile')))
                var.put('newSources', var.get('ArraySet').create())
                var.put('newNames', var.get('ArraySet').create())
                @Js
                def PyJs_anonymous_1126_(mapping, this, arguments, var=var):
                    var = Scope({'mapping':mapping, 'this':this, 'arguments':arguments}, var)
                    var.registers(['name', 'source', 'original', 'mapping'])
                    if (PyJsStrictEq(var.get('mapping').get('source'),var.get('sourceFile')) and (var.get('mapping').get('originalLine')!=var.get(u"null"))):
                        var.put('original', var.get('aSourceMapConsumer').callprop('originalPositionFor', Js({'line':var.get('mapping').get('originalLine'),'column':var.get('mapping').get('originalColumn')})))
                        if (var.get('original').get('source')!=var.get(u"null")):
                            var.get('mapping').put('source', var.get('original').get('source'))
                            if (var.get('aSourceMapPath')!=var.get(u"null")):
                                var.get('mapping').put('source', var.get('util').callprop('join', var.get('aSourceMapPath'), var.get('mapping').get('source')))
                            if (var.get('sourceRoot')!=var.get(u"null")):
                                var.get('mapping').put('source', var.get('util').callprop('relative', var.get('sourceRoot'), var.get('mapping').get('source')))
                            var.get('mapping').put('originalLine', var.get('original').get('line'))
                            var.get('mapping').put('originalColumn', var.get('original').get('column'))
                            if (var.get('original').get('name')!=var.get(u"null")):
                                var.get('mapping').put('name', var.get('original').get('name'))
                    var.put('source', var.get('mapping').get('source'))
                    if ((var.get('source')!=var.get(u"null")) and var.get('newSources').callprop('has', var.get('source')).neg()):
                        var.get('newSources').callprop('add', var.get('source'))
                    var.put('name', var.get('mapping').get('name'))
                    if ((var.get('name')!=var.get(u"null")) and var.get('newNames').callprop('has', var.get('name')).neg()):
                        var.get('newNames').callprop('add', var.get('name'))
                PyJs_anonymous_1126_._set_name('anonymous')
                var.get(u"this").get('_mappings').callprop('unsortedForEach', PyJs_anonymous_1126_, var.get(u"this"))
                var.get(u"this").put('_sources', var.get('newSources'))
                var.get(u"this").put('_names', var.get('newNames'))
                @Js
                def PyJs_anonymous_1127_(sourceFile, this, arguments, var=var):
                    var = Scope({'sourceFile':sourceFile, 'this':this, 'arguments':arguments}, var)
                    var.registers(['content', 'sourceFile'])
                    var.put('content', var.get('aSourceMapConsumer').callprop('sourceContentFor', var.get('sourceFile')))
                    if (var.get('content')!=var.get(u"null")):
                        if (var.get('aSourceMapPath')!=var.get(u"null")):
                            var.put('sourceFile', var.get('util').callprop('join', var.get('aSourceMapPath'), var.get('sourceFile')))
                        if (var.get('sourceRoot')!=var.get(u"null")):
                            var.put('sourceFile', var.get('util').callprop('relative', var.get('sourceRoot'), var.get('sourceFile')))
                        var.get(u"this").callprop('setSourceContent', var.get('sourceFile'), var.get('content'))
                PyJs_anonymous_1127_._set_name('anonymous')
                var.get('aSourceMapConsumer').get('sources').callprop('forEach', PyJs_anonymous_1127_, var.get(u"this"))
            PyJs_SourceMapGenerator_applySourceMap_1125_._set_name('SourceMapGenerator_applySourceMap')
            var.get('SourceMapGenerator').get('prototype').put('applySourceMap', PyJs_SourceMapGenerator_applySourceMap_1125_)
            @Js
            def PyJs_SourceMapGenerator_validateMapping_1128_(aGenerated, aOriginal, aSource, aName, this, arguments, var=var):
                var = Scope({'aGenerated':aGenerated, 'aOriginal':aOriginal, 'aSource':aSource, 'aName':aName, 'this':this, 'arguments':arguments, 'SourceMapGenerator_validateMapping':PyJs_SourceMapGenerator_validateMapping_1128_}, var)
                var.registers(['aOriginal', 'aSource', 'aName', 'aGenerated'])
                if (((((((var.get('aGenerated') and var.get('aGenerated').contains(Js('line'))) and var.get('aGenerated').contains(Js('column'))) and (var.get('aGenerated').get('line')>Js(0.0))) and (var.get('aGenerated').get('column')>=Js(0.0))) and var.get('aOriginal').neg()) and var.get('aSource').neg()) and var.get('aName').neg()):
                    return var.get('undefined')
                else:
                    def PyJs_LONG_1129_(var=var):
                        return (((((((((var.get('aGenerated') and var.get('aGenerated').contains(Js('line'))) and var.get('aGenerated').contains(Js('column'))) and var.get('aOriginal')) and var.get('aOriginal').contains(Js('line'))) and var.get('aOriginal').contains(Js('column'))) and (var.get('aGenerated').get('line')>Js(0.0))) and (var.get('aGenerated').get('column')>=Js(0.0))) and (var.get('aOriginal').get('line')>Js(0.0))) and (var.get('aOriginal').get('column')>=Js(0.0)))
                    if (PyJs_LONG_1129_() and var.get('aSource')):
                        return var.get('undefined')
                    else:
                        PyJsTempException = JsToPyException(var.get('Error').create((Js('Invalid mapping: ')+var.get('JSON').callprop('stringify', Js({'generated':var.get('aGenerated'),'source':var.get('aSource'),'original':var.get('aOriginal'),'name':var.get('aName')})))))
                        raise PyJsTempException
            PyJs_SourceMapGenerator_validateMapping_1128_._set_name('SourceMapGenerator_validateMapping')
            var.get('SourceMapGenerator').get('prototype').put('_validateMapping', PyJs_SourceMapGenerator_validateMapping_1128_)
            @Js
            def PyJs_SourceMapGenerator_serializeMappings_1130_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'SourceMapGenerator_serializeMappings':PyJs_SourceMapGenerator_serializeMappings_1130_}, var)
                var.registers(['previousGeneratedColumn', 'mappings', 'i', 'previousName', 'previousOriginalColumn', 'result', 'mapping', 'previousGeneratedLine', 'previousOriginalLine', 'len', 'previousSource'])
                var.put('previousGeneratedColumn', Js(0.0))
                var.put('previousGeneratedLine', Js(1.0))
                var.put('previousOriginalColumn', Js(0.0))
                var.put('previousOriginalLine', Js(0.0))
                var.put('previousName', Js(0.0))
                var.put('previousSource', Js(0.0))
                var.put('result', Js(''))
                pass
                var.put('mappings', var.get(u"this").get('_mappings').callprop('toArray'))
                #for JS loop
                var.put('i', Js(0.0))
                var.put('len', var.get('mappings').get('length'))
                while (var.get('i')<var.get('len')):
                    try:
                        var.put('mapping', var.get('mappings').get(var.get('i')))
                        if PyJsStrictNeq(var.get('mapping').get('generatedLine'),var.get('previousGeneratedLine')):
                            var.put('previousGeneratedColumn', Js(0.0))
                            while PyJsStrictNeq(var.get('mapping').get('generatedLine'),var.get('previousGeneratedLine')):
                                var.put('result', Js(';'), '+')
                                (var.put('previousGeneratedLine',Js(var.get('previousGeneratedLine').to_number())+Js(1))-Js(1))
                        else:
                            if (var.get('i')>Js(0.0)):
                                if var.get('util').callprop('compareByGeneratedPositions', var.get('mapping'), var.get('mappings').get((var.get('i')-Js(1.0)))).neg():
                                    continue
                                var.put('result', Js(','), '+')
                        var.put('result', var.get('base64VLQ').callprop('encode', (var.get('mapping').get('generatedColumn')-var.get('previousGeneratedColumn'))), '+')
                        var.put('previousGeneratedColumn', var.get('mapping').get('generatedColumn'))
                        if (var.get('mapping').get('source')!=var.get(u"null")):
                            var.put('result', var.get('base64VLQ').callprop('encode', (var.get(u"this").get('_sources').callprop('indexOf', var.get('mapping').get('source'))-var.get('previousSource'))), '+')
                            var.put('previousSource', var.get(u"this").get('_sources').callprop('indexOf', var.get('mapping').get('source')))
                            var.put('result', var.get('base64VLQ').callprop('encode', ((var.get('mapping').get('originalLine')-Js(1.0))-var.get('previousOriginalLine'))), '+')
                            var.put('previousOriginalLine', (var.get('mapping').get('originalLine')-Js(1.0)))
                            var.put('result', var.get('base64VLQ').callprop('encode', (var.get('mapping').get('originalColumn')-var.get('previousOriginalColumn'))), '+')
                            var.put('previousOriginalColumn', var.get('mapping').get('originalColumn'))
                            if (var.get('mapping').get('name')!=var.get(u"null")):
                                var.put('result', var.get('base64VLQ').callprop('encode', (var.get(u"this").get('_names').callprop('indexOf', var.get('mapping').get('name'))-var.get('previousName'))), '+')
                                var.put('previousName', var.get(u"this").get('_names').callprop('indexOf', var.get('mapping').get('name')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get('result')
            PyJs_SourceMapGenerator_serializeMappings_1130_._set_name('SourceMapGenerator_serializeMappings')
            var.get('SourceMapGenerator').get('prototype').put('_serializeMappings', PyJs_SourceMapGenerator_serializeMappings_1130_)
            @Js
            def PyJs_SourceMapGenerator_generateSourcesContent_1131_(aSources, aSourceRoot, this, arguments, var=var):
                var = Scope({'aSources':aSources, 'aSourceRoot':aSourceRoot, 'this':this, 'arguments':arguments, 'SourceMapGenerator_generateSourcesContent':PyJs_SourceMapGenerator_generateSourcesContent_1131_}, var)
                var.registers(['aSourceRoot', 'aSources'])
                @Js
                def PyJs_anonymous_1132_(source, this, arguments, var=var):
                    var = Scope({'source':source, 'this':this, 'arguments':arguments}, var)
                    var.registers(['source', 'key'])
                    if var.get(u"this").get('_sourcesContents').neg():
                        return var.get(u"null")
                    if (var.get('aSourceRoot')!=var.get(u"null")):
                        var.put('source', var.get('util').callprop('relative', var.get('aSourceRoot'), var.get('source')))
                    var.put('key', var.get('util').callprop('toSetString', var.get('source')))
                    return (var.get(u"this").get('_sourcesContents').get(var.get('key')) if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get(u"this").get('_sourcesContents'), var.get('key')) else var.get(u"null"))
                PyJs_anonymous_1132_._set_name('anonymous')
                return var.get('aSources').callprop('map', PyJs_anonymous_1132_, var.get(u"this"))
            PyJs_SourceMapGenerator_generateSourcesContent_1131_._set_name('SourceMapGenerator_generateSourcesContent')
            var.get('SourceMapGenerator').get('prototype').put('_generateSourcesContent', PyJs_SourceMapGenerator_generateSourcesContent_1131_)
            @Js
            def PyJs_SourceMapGenerator_toJSON_1133_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'SourceMapGenerator_toJSON':PyJs_SourceMapGenerator_toJSON_1133_}, var)
                var.registers(['map'])
                var.put('map', Js({'version':var.get(u"this").get('_version'),'sources':var.get(u"this").get('_sources').callprop('toArray'),'names':var.get(u"this").get('_names').callprop('toArray'),'mappings':var.get(u"this").callprop('_serializeMappings')}))
                if (var.get(u"this").get('_file')!=var.get(u"null")):
                    var.get('map').put('file', var.get(u"this").get('_file'))
                if (var.get(u"this").get('_sourceRoot')!=var.get(u"null")):
                    var.get('map').put('sourceRoot', var.get(u"this").get('_sourceRoot'))
                if var.get(u"this").get('_sourcesContents'):
                    var.get('map').put('sourcesContent', var.get(u"this").callprop('_generateSourcesContent', var.get('map').get('sources'), var.get('map').get('sourceRoot')))
                return var.get('map')
            PyJs_SourceMapGenerator_toJSON_1133_._set_name('SourceMapGenerator_toJSON')
            var.get('SourceMapGenerator').get('prototype').put('toJSON', PyJs_SourceMapGenerator_toJSON_1133_)
            @Js
            def PyJs_SourceMapGenerator_toString_1134_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'SourceMapGenerator_toString':PyJs_SourceMapGenerator_toString_1134_}, var)
                var.registers([])
                return var.get('JSON').callprop('stringify', var.get(u"this"))
            PyJs_SourceMapGenerator_toString_1134_._set_name('SourceMapGenerator_toString')
            var.get('SourceMapGenerator').get('prototype').put('toString', PyJs_SourceMapGenerator_toString_1134_)
            var.get('exports').put('SourceMapGenerator', var.get('SourceMapGenerator'))
        PyJs_anonymous_1119_._set_name('anonymous')
        var.get('define')(PyJs_anonymous_1119_)
    PyJs_anonymous_1118_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1135_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'define', 'module', 'exports'])
        if PyJsStrictNeq(var.get('define',throw=False).typeof(),Js('function')):
            var.put('define', var.get('require')(Js('amdefine'))(var.get('module'), var.get('require')))
        @Js
        def PyJs_anonymous_1136_(require, exports, module, this, arguments, var=var):
            var = Scope({'require':require, 'exports':exports, 'module':module, 'this':this, 'arguments':arguments}, var)
            var.registers(['require', 'SourceNode', 'isSourceNode', 'exports', 'SourceMapGenerator', 'module', 'REGEX_NEWLINE', 'util', 'NEWLINE_CODE'])
            @Js
            def PyJsHoisted_SourceNode_(aLine, aColumn, aSource, aChunks, aName, this, arguments, var=var):
                var = Scope({'aLine':aLine, 'aColumn':aColumn, 'aSource':aSource, 'aChunks':aChunks, 'aName':aName, 'this':this, 'arguments':arguments}, var)
                var.registers(['aLine', 'aSource', 'aName', 'aColumn', 'aChunks'])
                var.get(u"this").put('children', Js([]))
                var.get(u"this").put('sourceContents', Js({}))
                var.get(u"this").put('line', (var.get(u"null") if (var.get('aLine')==var.get(u"null")) else var.get('aLine')))
                var.get(u"this").put('column', (var.get(u"null") if (var.get('aColumn')==var.get(u"null")) else var.get('aColumn')))
                var.get(u"this").put('source', (var.get(u"null") if (var.get('aSource')==var.get(u"null")) else var.get('aSource')))
                var.get(u"this").put('name', (var.get(u"null") if (var.get('aName')==var.get(u"null")) else var.get('aName')))
                var.get(u"this").put(var.get('isSourceNode'), Js(True))
                if (var.get('aChunks')!=var.get(u"null")):
                    var.get(u"this").callprop('add', var.get('aChunks'))
            PyJsHoisted_SourceNode_.func_name = 'SourceNode'
            var.put('SourceNode', PyJsHoisted_SourceNode_)
            var.put('SourceMapGenerator', var.get('require')(Js('./source-map-generator')).get('SourceMapGenerator'))
            var.put('util', var.get('require')(Js('./util')))
            var.put('REGEX_NEWLINE', JsRegExp('/(\\r?\\n)/'))
            var.put('NEWLINE_CODE', Js(10.0))
            var.put('isSourceNode', Js('$$$isSourceNode$$$'))
            pass
            @Js
            def PyJs_SourceNode_fromStringWithSourceMap_1137_(aGeneratedCode, aSourceMapConsumer, aRelativePath, this, arguments, var=var):
                var = Scope({'aGeneratedCode':aGeneratedCode, 'aSourceMapConsumer':aSourceMapConsumer, 'aRelativePath':aRelativePath, 'this':this, 'arguments':arguments, 'SourceNode_fromStringWithSourceMap':PyJs_SourceNode_fromStringWithSourceMap_1137_}, var)
                var.registers(['aGeneratedCode', 'shiftNextLine', 'lastGeneratedColumn', 'node', 'lastGeneratedLine', 'aSourceMapConsumer', 'addMappingWithCode', 'remainingLines', 'lastMapping', 'aRelativePath'])
                @Js
                def PyJsHoisted_addMappingWithCode_(mapping, code, this, arguments, var=var):
                    var = Scope({'mapping':mapping, 'code':code, 'this':this, 'arguments':arguments}, var)
                    var.registers(['code', 'source', 'mapping'])
                    if (PyJsStrictEq(var.get('mapping'),var.get(u"null")) or PyJsStrictEq(var.get('mapping').get('source'),var.get('undefined'))):
                        var.get('node').callprop('add', var.get('code'))
                    else:
                        var.put('source', (var.get('util').callprop('join', var.get('aRelativePath'), var.get('mapping').get('source')) if var.get('aRelativePath') else var.get('mapping').get('source')))
                        var.get('node').callprop('add', var.get('SourceNode').create(var.get('mapping').get('originalLine'), var.get('mapping').get('originalColumn'), var.get('source'), var.get('code'), var.get('mapping').get('name')))
                PyJsHoisted_addMappingWithCode_.func_name = 'addMappingWithCode'
                var.put('addMappingWithCode', PyJsHoisted_addMappingWithCode_)
                var.put('node', var.get('SourceNode').create())
                var.put('remainingLines', var.get('aGeneratedCode').callprop('split', var.get('REGEX_NEWLINE')))
                @Js
                def PyJs_shiftNextLine_1138_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'shiftNextLine':PyJs_shiftNextLine_1138_}, var)
                    var.registers(['newLine', 'lineContents'])
                    var.put('lineContents', var.get('remainingLines').callprop('shift'))
                    var.put('newLine', (var.get('remainingLines').callprop('shift') or Js('')))
                    return (var.get('lineContents')+var.get('newLine'))
                PyJs_shiftNextLine_1138_._set_name('shiftNextLine')
                var.put('shiftNextLine', PyJs_shiftNextLine_1138_)
                var.put('lastGeneratedLine', Js(1.0))
                var.put('lastGeneratedColumn', Js(0.0))
                var.put('lastMapping', var.get(u"null"))
                @Js
                def PyJs_anonymous_1139_(mapping, this, arguments, var=var):
                    var = Scope({'mapping':mapping, 'this':this, 'arguments':arguments}, var)
                    var.registers(['code', 'mapping', 'nextLine'])
                    if PyJsStrictNeq(var.get('lastMapping'),var.get(u"null")):
                        if (var.get('lastGeneratedLine')<var.get('mapping').get('generatedLine')):
                            var.put('code', Js(''))
                            var.get('addMappingWithCode')(var.get('lastMapping'), var.get('shiftNextLine')())
                            (var.put('lastGeneratedLine',Js(var.get('lastGeneratedLine').to_number())+Js(1))-Js(1))
                            var.put('lastGeneratedColumn', Js(0.0))
                        else:
                            var.put('nextLine', var.get('remainingLines').get('0'))
                            var.put('code', var.get('nextLine').callprop('substr', Js(0.0), (var.get('mapping').get('generatedColumn')-var.get('lastGeneratedColumn'))))
                            var.get('remainingLines').put('0', var.get('nextLine').callprop('substr', (var.get('mapping').get('generatedColumn')-var.get('lastGeneratedColumn'))))
                            var.put('lastGeneratedColumn', var.get('mapping').get('generatedColumn'))
                            var.get('addMappingWithCode')(var.get('lastMapping'), var.get('code'))
                            var.put('lastMapping', var.get('mapping'))
                            return var.get('undefined')
                    while (var.get('lastGeneratedLine')<var.get('mapping').get('generatedLine')):
                        var.get('node').callprop('add', var.get('shiftNextLine')())
                        (var.put('lastGeneratedLine',Js(var.get('lastGeneratedLine').to_number())+Js(1))-Js(1))
                    if (var.get('lastGeneratedColumn')<var.get('mapping').get('generatedColumn')):
                        var.put('nextLine', var.get('remainingLines').get('0'))
                        var.get('node').callprop('add', var.get('nextLine').callprop('substr', Js(0.0), var.get('mapping').get('generatedColumn')))
                        var.get('remainingLines').put('0', var.get('nextLine').callprop('substr', var.get('mapping').get('generatedColumn')))
                        var.put('lastGeneratedColumn', var.get('mapping').get('generatedColumn'))
                    var.put('lastMapping', var.get('mapping'))
                PyJs_anonymous_1139_._set_name('anonymous')
                var.get('aSourceMapConsumer').callprop('eachMapping', PyJs_anonymous_1139_, var.get(u"this"))
                if (var.get('remainingLines').get('length')>Js(0.0)):
                    if var.get('lastMapping'):
                        var.get('addMappingWithCode')(var.get('lastMapping'), var.get('shiftNextLine')())
                    var.get('node').callprop('add', var.get('remainingLines').callprop('join', Js('')))
                @Js
                def PyJs_anonymous_1140_(sourceFile, this, arguments, var=var):
                    var = Scope({'sourceFile':sourceFile, 'this':this, 'arguments':arguments}, var)
                    var.registers(['content', 'sourceFile'])
                    var.put('content', var.get('aSourceMapConsumer').callprop('sourceContentFor', var.get('sourceFile')))
                    if (var.get('content')!=var.get(u"null")):
                        if (var.get('aRelativePath')!=var.get(u"null")):
                            var.put('sourceFile', var.get('util').callprop('join', var.get('aRelativePath'), var.get('sourceFile')))
                        var.get('node').callprop('setSourceContent', var.get('sourceFile'), var.get('content'))
                PyJs_anonymous_1140_._set_name('anonymous')
                var.get('aSourceMapConsumer').get('sources').callprop('forEach', PyJs_anonymous_1140_)
                return var.get('node')
                pass
            PyJs_SourceNode_fromStringWithSourceMap_1137_._set_name('SourceNode_fromStringWithSourceMap')
            var.get('SourceNode').put('fromStringWithSourceMap', PyJs_SourceNode_fromStringWithSourceMap_1137_)
            @Js
            def PyJs_SourceNode_add_1141_(aChunk, this, arguments, var=var):
                var = Scope({'aChunk':aChunk, 'this':this, 'arguments':arguments, 'SourceNode_add':PyJs_SourceNode_add_1141_}, var)
                var.registers(['aChunk'])
                if var.get('Array').callprop('isArray', var.get('aChunk')):
                    @Js
                    def PyJs_anonymous_1142_(chunk, this, arguments, var=var):
                        var = Scope({'chunk':chunk, 'this':this, 'arguments':arguments}, var)
                        var.registers(['chunk'])
                        var.get(u"this").callprop('add', var.get('chunk'))
                    PyJs_anonymous_1142_._set_name('anonymous')
                    var.get('aChunk').callprop('forEach', PyJs_anonymous_1142_, var.get(u"this"))
                else:
                    if (var.get('aChunk').get(var.get('isSourceNode')) or PyJsStrictEq(var.get('aChunk',throw=False).typeof(),Js('string'))):
                        if var.get('aChunk'):
                            var.get(u"this").get('children').callprop('push', var.get('aChunk'))
                    else:
                        PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Expected a SourceNode, string, or an array of SourceNodes and strings. Got ')+var.get('aChunk'))))
                        raise PyJsTempException
                return var.get(u"this")
            PyJs_SourceNode_add_1141_._set_name('SourceNode_add')
            var.get('SourceNode').get('prototype').put('add', PyJs_SourceNode_add_1141_)
            @Js
            def PyJs_SourceNode_prepend_1143_(aChunk, this, arguments, var=var):
                var = Scope({'aChunk':aChunk, 'this':this, 'arguments':arguments, 'SourceNode_prepend':PyJs_SourceNode_prepend_1143_}, var)
                var.registers(['aChunk', 'i'])
                if var.get('Array').callprop('isArray', var.get('aChunk')):
                    #for JS loop
                    var.put('i', (var.get('aChunk').get('length')-Js(1.0)))
                    while (var.get('i')>=Js(0.0)):
                        try:
                            var.get(u"this").callprop('prepend', var.get('aChunk').get(var.get('i')))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
                else:
                    if (var.get('aChunk').get(var.get('isSourceNode')) or PyJsStrictEq(var.get('aChunk',throw=False).typeof(),Js('string'))):
                        var.get(u"this").get('children').callprop('unshift', var.get('aChunk'))
                    else:
                        PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Expected a SourceNode, string, or an array of SourceNodes and strings. Got ')+var.get('aChunk'))))
                        raise PyJsTempException
                return var.get(u"this")
            PyJs_SourceNode_prepend_1143_._set_name('SourceNode_prepend')
            var.get('SourceNode').get('prototype').put('prepend', PyJs_SourceNode_prepend_1143_)
            @Js
            def PyJs_SourceNode_walk_1144_(aFn, this, arguments, var=var):
                var = Scope({'aFn':aFn, 'this':this, 'arguments':arguments, 'SourceNode_walk':PyJs_SourceNode_walk_1144_}, var)
                var.registers(['aFn', 'chunk', 'i', 'len'])
                pass
                #for JS loop
                var.put('i', Js(0.0))
                var.put('len', var.get(u"this").get('children').get('length'))
                while (var.get('i')<var.get('len')):
                    try:
                        var.put('chunk', var.get(u"this").get('children').get(var.get('i')))
                        if var.get('chunk').get(var.get('isSourceNode')):
                            var.get('chunk').callprop('walk', var.get('aFn'))
                        else:
                            if PyJsStrictNeq(var.get('chunk'),Js('')):
                                var.get('aFn')(var.get('chunk'), Js({'source':var.get(u"this").get('source'),'line':var.get(u"this").get('line'),'column':var.get(u"this").get('column'),'name':var.get(u"this").get('name')}))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            PyJs_SourceNode_walk_1144_._set_name('SourceNode_walk')
            var.get('SourceNode').get('prototype').put('walk', PyJs_SourceNode_walk_1144_)
            @Js
            def PyJs_SourceNode_join_1145_(aSep, this, arguments, var=var):
                var = Scope({'aSep':aSep, 'this':this, 'arguments':arguments, 'SourceNode_join':PyJs_SourceNode_join_1145_}, var)
                var.registers(['newChildren', 'i', 'len', 'aSep'])
                pass
                pass
                var.put('len', var.get(u"this").get('children').get('length'))
                if (var.get('len')>Js(0.0)):
                    var.put('newChildren', Js([]))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<(var.get('len')-Js(1.0))):
                        try:
                            var.get('newChildren').callprop('push', var.get(u"this").get('children').get(var.get('i')))
                            var.get('newChildren').callprop('push', var.get('aSep'))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.get('newChildren').callprop('push', var.get(u"this").get('children').get(var.get('i')))
                    var.get(u"this").put('children', var.get('newChildren'))
                return var.get(u"this")
            PyJs_SourceNode_join_1145_._set_name('SourceNode_join')
            var.get('SourceNode').get('prototype').put('join', PyJs_SourceNode_join_1145_)
            @Js
            def PyJs_SourceNode_replaceRight_1146_(aPattern, aReplacement, this, arguments, var=var):
                var = Scope({'aPattern':aPattern, 'aReplacement':aReplacement, 'this':this, 'arguments':arguments, 'SourceNode_replaceRight':PyJs_SourceNode_replaceRight_1146_}, var)
                var.registers(['aReplacement', 'aPattern', 'lastChild'])
                var.put('lastChild', var.get(u"this").get('children').get((var.get(u"this").get('children').get('length')-Js(1.0))))
                if var.get('lastChild').get(var.get('isSourceNode')):
                    var.get('lastChild').callprop('replaceRight', var.get('aPattern'), var.get('aReplacement'))
                else:
                    if PyJsStrictEq(var.get('lastChild',throw=False).typeof(),Js('string')):
                        var.get(u"this").get('children').put((var.get(u"this").get('children').get('length')-Js(1.0)), var.get('lastChild').callprop('replace', var.get('aPattern'), var.get('aReplacement')))
                    else:
                        var.get(u"this").get('children').callprop('push', Js('').callprop('replace', var.get('aPattern'), var.get('aReplacement')))
                return var.get(u"this")
            PyJs_SourceNode_replaceRight_1146_._set_name('SourceNode_replaceRight')
            var.get('SourceNode').get('prototype').put('replaceRight', PyJs_SourceNode_replaceRight_1146_)
            @Js
            def PyJs_SourceNode_setSourceContent_1147_(aSourceFile, aSourceContent, this, arguments, var=var):
                var = Scope({'aSourceFile':aSourceFile, 'aSourceContent':aSourceContent, 'this':this, 'arguments':arguments, 'SourceNode_setSourceContent':PyJs_SourceNode_setSourceContent_1147_}, var)
                var.registers(['aSourceContent', 'aSourceFile'])
                var.get(u"this").get('sourceContents').put(var.get('util').callprop('toSetString', var.get('aSourceFile')), var.get('aSourceContent'))
            PyJs_SourceNode_setSourceContent_1147_._set_name('SourceNode_setSourceContent')
            var.get('SourceNode').get('prototype').put('setSourceContent', PyJs_SourceNode_setSourceContent_1147_)
            @Js
            def PyJs_SourceNode_walkSourceContents_1148_(aFn, this, arguments, var=var):
                var = Scope({'aFn':aFn, 'this':this, 'arguments':arguments, 'SourceNode_walkSourceContents':PyJs_SourceNode_walkSourceContents_1148_}, var)
                var.registers(['sources', 'aFn', 'i', 'len'])
                #for JS loop
                var.put('i', Js(0.0))
                var.put('len', var.get(u"this").get('children').get('length'))
                while (var.get('i')<var.get('len')):
                    try:
                        if var.get(u"this").get('children').get(var.get('i')).get(var.get('isSourceNode')):
                            var.get(u"this").get('children').get(var.get('i')).callprop('walkSourceContents', var.get('aFn'))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.put('sources', var.get('Object').callprop('keys', var.get(u"this").get('sourceContents')))
                #for JS loop
                var.put('i', Js(0.0))
                var.put('len', var.get('sources').get('length'))
                while (var.get('i')<var.get('len')):
                    try:
                        var.get('aFn')(var.get('util').callprop('fromSetString', var.get('sources').get(var.get('i'))), var.get(u"this").get('sourceContents').get(var.get('sources').get(var.get('i'))))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            PyJs_SourceNode_walkSourceContents_1148_._set_name('SourceNode_walkSourceContents')
            var.get('SourceNode').get('prototype').put('walkSourceContents', PyJs_SourceNode_walkSourceContents_1148_)
            @Js
            def PyJs_SourceNode_toString_1149_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'SourceNode_toString':PyJs_SourceNode_toString_1149_}, var)
                var.registers(['str'])
                var.put('str', Js(''))
                @Js
                def PyJs_anonymous_1150_(chunk, this, arguments, var=var):
                    var = Scope({'chunk':chunk, 'this':this, 'arguments':arguments}, var)
                    var.registers(['chunk'])
                    var.put('str', var.get('chunk'), '+')
                PyJs_anonymous_1150_._set_name('anonymous')
                var.get(u"this").callprop('walk', PyJs_anonymous_1150_)
                return var.get('str')
            PyJs_SourceNode_toString_1149_._set_name('SourceNode_toString')
            var.get('SourceNode').get('prototype').put('toString', PyJs_SourceNode_toString_1149_)
            @Js
            def PyJs_SourceNode_toStringWithSourceMap_1151_(aArgs, this, arguments, var=var):
                var = Scope({'aArgs':aArgs, 'this':this, 'arguments':arguments, 'SourceNode_toStringWithSourceMap':PyJs_SourceNode_toStringWithSourceMap_1151_}, var)
                var.registers(['aArgs', 'map', 'sourceMappingActive', 'generated', 'lastOriginalColumn', 'lastOriginalName', 'lastOriginalSource', 'lastOriginalLine'])
                var.put('generated', Js({'code':Js(''),'line':Js(1.0),'column':Js(0.0)}))
                var.put('map', var.get('SourceMapGenerator').create(var.get('aArgs')))
                var.put('sourceMappingActive', Js(False))
                var.put('lastOriginalSource', var.get(u"null"))
                var.put('lastOriginalLine', var.get(u"null"))
                var.put('lastOriginalColumn', var.get(u"null"))
                var.put('lastOriginalName', var.get(u"null"))
                @Js
                def PyJs_anonymous_1152_(chunk, original, this, arguments, var=var):
                    var = Scope({'chunk':chunk, 'original':original, 'this':this, 'arguments':arguments}, var)
                    var.registers(['length', 'chunk', 'original', 'idx'])
                    var.get('generated').put('code', var.get('chunk'), '+')
                    if ((PyJsStrictNeq(var.get('original').get('source'),var.get(u"null")) and PyJsStrictNeq(var.get('original').get('line'),var.get(u"null"))) and PyJsStrictNeq(var.get('original').get('column'),var.get(u"null"))):
                        if (((PyJsStrictNeq(var.get('lastOriginalSource'),var.get('original').get('source')) or PyJsStrictNeq(var.get('lastOriginalLine'),var.get('original').get('line'))) or PyJsStrictNeq(var.get('lastOriginalColumn'),var.get('original').get('column'))) or PyJsStrictNeq(var.get('lastOriginalName'),var.get('original').get('name'))):
                            var.get('map').callprop('addMapping', Js({'source':var.get('original').get('source'),'original':Js({'line':var.get('original').get('line'),'column':var.get('original').get('column')}),'generated':Js({'line':var.get('generated').get('line'),'column':var.get('generated').get('column')}),'name':var.get('original').get('name')}))
                        var.put('lastOriginalSource', var.get('original').get('source'))
                        var.put('lastOriginalLine', var.get('original').get('line'))
                        var.put('lastOriginalColumn', var.get('original').get('column'))
                        var.put('lastOriginalName', var.get('original').get('name'))
                        var.put('sourceMappingActive', Js(True))
                    else:
                        if var.get('sourceMappingActive'):
                            var.get('map').callprop('addMapping', Js({'generated':Js({'line':var.get('generated').get('line'),'column':var.get('generated').get('column')})}))
                            var.put('lastOriginalSource', var.get(u"null"))
                            var.put('sourceMappingActive', Js(False))
                    #for JS loop
                    var.put('idx', Js(0.0))
                    var.put('length', var.get('chunk').get('length'))
                    while (var.get('idx')<var.get('length')):
                        try:
                            if PyJsStrictEq(var.get('chunk').callprop('charCodeAt', var.get('idx')),var.get('NEWLINE_CODE')):
                                (var.get('generated').put('line',Js(var.get('generated').get('line').to_number())+Js(1))-Js(1))
                                var.get('generated').put('column', Js(0.0))
                                if PyJsStrictEq((var.get('idx')+Js(1.0)),var.get('length')):
                                    var.put('lastOriginalSource', var.get(u"null"))
                                    var.put('sourceMappingActive', Js(False))
                                else:
                                    if var.get('sourceMappingActive'):
                                        var.get('map').callprop('addMapping', Js({'source':var.get('original').get('source'),'original':Js({'line':var.get('original').get('line'),'column':var.get('original').get('column')}),'generated':Js({'line':var.get('generated').get('line'),'column':var.get('generated').get('column')}),'name':var.get('original').get('name')}))
                            else:
                                (var.get('generated').put('column',Js(var.get('generated').get('column').to_number())+Js(1))-Js(1))
                        finally:
                                (var.put('idx',Js(var.get('idx').to_number())+Js(1))-Js(1))
                PyJs_anonymous_1152_._set_name('anonymous')
                var.get(u"this").callprop('walk', PyJs_anonymous_1152_)
                @Js
                def PyJs_anonymous_1153_(sourceFile, sourceContent, this, arguments, var=var):
                    var = Scope({'sourceFile':sourceFile, 'sourceContent':sourceContent, 'this':this, 'arguments':arguments}, var)
                    var.registers(['sourceFile', 'sourceContent'])
                    var.get('map').callprop('setSourceContent', var.get('sourceFile'), var.get('sourceContent'))
                PyJs_anonymous_1153_._set_name('anonymous')
                var.get(u"this").callprop('walkSourceContents', PyJs_anonymous_1153_)
                return Js({'code':var.get('generated').get('code'),'map':var.get('map')})
            PyJs_SourceNode_toStringWithSourceMap_1151_._set_name('SourceNode_toStringWithSourceMap')
            var.get('SourceNode').get('prototype').put('toStringWithSourceMap', PyJs_SourceNode_toStringWithSourceMap_1151_)
            var.get('exports').put('SourceNode', var.get('SourceNode'))
        PyJs_anonymous_1136_._set_name('anonymous')
        var.get('define')(PyJs_anonymous_1136_)
    PyJs_anonymous_1135_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1154_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'define', 'module', 'exports'])
        if PyJsStrictNeq(var.get('define',throw=False).typeof(),Js('function')):
            var.put('define', var.get('require')(Js('amdefine'))(var.get('module'), var.get('require')))
        @Js
        def PyJs_anonymous_1155_(require, exports, module, this, arguments, var=var):
            var = Scope({'require':require, 'exports':exports, 'module':module, 'this':this, 'arguments':arguments}, var)
            var.registers(['getArg', 'dataUrlRegexp', 'normalize', 'toSetString', 'compareByOriginalPositions', 'compareByGeneratedPositions', 'require', 'fromSetString', 'join', 'strcmp', 'relative', 'exports', 'urlParse', 'module', 'urlGenerate', 'urlRegexp'])
            @Js
            def PyJsHoisted_getArg_(aArgs, aName, aDefaultValue, this, arguments, var=var):
                var = Scope({'aArgs':aArgs, 'aName':aName, 'aDefaultValue':aDefaultValue, 'this':this, 'arguments':arguments}, var)
                var.registers(['aArgs', 'aDefaultValue', 'aName'])
                if var.get('aArgs').contains(var.get('aName')):
                    return var.get('aArgs').get(var.get('aName'))
                else:
                    if PyJsStrictEq(var.get('arguments').get('length'),Js(3.0)):
                        return var.get('aDefaultValue')
                    else:
                        PyJsTempException = JsToPyException(var.get('Error').create(((Js('"')+var.get('aName'))+Js('" is a required argument.'))))
                        raise PyJsTempException
            PyJsHoisted_getArg_.func_name = 'getArg'
            var.put('getArg', PyJsHoisted_getArg_)
            @Js
            def PyJsHoisted_urlParse_(aUrl, this, arguments, var=var):
                var = Scope({'aUrl':aUrl, 'this':this, 'arguments':arguments}, var)
                var.registers(['match', 'aUrl'])
                var.put('match', var.get('aUrl').callprop('match', var.get('urlRegexp')))
                if var.get('match').neg():
                    return var.get(u"null")
                return Js({'scheme':var.get('match').get('1'),'auth':var.get('match').get('2'),'host':var.get('match').get('3'),'port':var.get('match').get('4'),'path':var.get('match').get('5')})
            PyJsHoisted_urlParse_.func_name = 'urlParse'
            var.put('urlParse', PyJsHoisted_urlParse_)
            @Js
            def PyJsHoisted_urlGenerate_(aParsedUrl, this, arguments, var=var):
                var = Scope({'aParsedUrl':aParsedUrl, 'this':this, 'arguments':arguments}, var)
                var.registers(['url', 'aParsedUrl'])
                var.put('url', Js(''))
                if var.get('aParsedUrl').get('scheme'):
                    var.put('url', (var.get('aParsedUrl').get('scheme')+Js(':')), '+')
                var.put('url', Js('//'), '+')
                if var.get('aParsedUrl').get('auth'):
                    var.put('url', (var.get('aParsedUrl').get('auth')+Js('@')), '+')
                if var.get('aParsedUrl').get('host'):
                    var.put('url', var.get('aParsedUrl').get('host'), '+')
                if var.get('aParsedUrl').get('port'):
                    var.put('url', (Js(':')+var.get('aParsedUrl').get('port')), '+')
                if var.get('aParsedUrl').get('path'):
                    var.put('url', var.get('aParsedUrl').get('path'), '+')
                return var.get('url')
            PyJsHoisted_urlGenerate_.func_name = 'urlGenerate'
            var.put('urlGenerate', PyJsHoisted_urlGenerate_)
            @Js
            def PyJsHoisted_normalize_(aPath, this, arguments, var=var):
                var = Scope({'aPath':aPath, 'this':this, 'arguments':arguments}, var)
                var.registers(['isAbsolute', 'part', 'i', 'path', 'aPath', 'up', 'parts', 'url'])
                var.put('path', var.get('aPath'))
                var.put('url', var.get('urlParse')(var.get('aPath')))
                if var.get('url'):
                    if var.get('url').get('path').neg():
                        return var.get('aPath')
                    var.put('path', var.get('url').get('path'))
                var.put('isAbsolute', PyJsStrictEq(var.get('path').callprop('charAt', Js(0.0)),Js('/')))
                var.put('parts', var.get('path').callprop('split', JsRegExp('/\\/+/')))
                #for JS loop
                var.put('up', Js(0.0))
                var.put('i', (var.get('parts').get('length')-Js(1.0)))
                while (var.get('i')>=Js(0.0)):
                    try:
                        var.put('part', var.get('parts').get(var.get('i')))
                        if PyJsStrictEq(var.get('part'),Js('.')):
                            var.get('parts').callprop('splice', var.get('i'), Js(1.0))
                        else:
                            if PyJsStrictEq(var.get('part'),Js('..')):
                                (var.put('up',Js(var.get('up').to_number())+Js(1))-Js(1))
                            else:
                                if (var.get('up')>Js(0.0)):
                                    if PyJsStrictEq(var.get('part'),Js('')):
                                        var.get('parts').callprop('splice', (var.get('i')+Js(1.0)), var.get('up'))
                                        var.put('up', Js(0.0))
                                    else:
                                        var.get('parts').callprop('splice', var.get('i'), Js(2.0))
                                        (var.put('up',Js(var.get('up').to_number())-Js(1))+Js(1))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
                var.put('path', var.get('parts').callprop('join', Js('/')))
                if PyJsStrictEq(var.get('path'),Js('')):
                    var.put('path', (Js('/') if var.get('isAbsolute') else Js('.')))
                if var.get('url'):
                    var.get('url').put('path', var.get('path'))
                    return var.get('urlGenerate')(var.get('url'))
                return var.get('path')
            PyJsHoisted_normalize_.func_name = 'normalize'
            var.put('normalize', PyJsHoisted_normalize_)
            @Js
            def PyJsHoisted_join_(aRoot, aPath, this, arguments, var=var):
                var = Scope({'aRoot':aRoot, 'aPath':aPath, 'this':this, 'arguments':arguments}, var)
                var.registers(['joined', 'aRootUrl', 'aPath', 'aPathUrl', 'aRoot'])
                if PyJsStrictEq(var.get('aRoot'),Js('')):
                    var.put('aRoot', Js('.'))
                if PyJsStrictEq(var.get('aPath'),Js('')):
                    var.put('aPath', Js('.'))
                var.put('aPathUrl', var.get('urlParse')(var.get('aPath')))
                var.put('aRootUrl', var.get('urlParse')(var.get('aRoot')))
                if var.get('aRootUrl'):
                    var.put('aRoot', (var.get('aRootUrl').get('path') or Js('/')))
                if (var.get('aPathUrl') and var.get('aPathUrl').get('scheme').neg()):
                    if var.get('aRootUrl'):
                        var.get('aPathUrl').put('scheme', var.get('aRootUrl').get('scheme'))
                    return var.get('urlGenerate')(var.get('aPathUrl'))
                if (var.get('aPathUrl') or var.get('aPath').callprop('match', var.get('dataUrlRegexp'))):
                    return var.get('aPath')
                if ((var.get('aRootUrl') and var.get('aRootUrl').get('host').neg()) and var.get('aRootUrl').get('path').neg()):
                    var.get('aRootUrl').put('host', var.get('aPath'))
                    return var.get('urlGenerate')(var.get('aRootUrl'))
                var.put('joined', (var.get('aPath') if PyJsStrictEq(var.get('aPath').callprop('charAt', Js(0.0)),Js('/')) else var.get('normalize')(((var.get('aRoot').callprop('replace', JsRegExp('/\\/+$/'), Js(''))+Js('/'))+var.get('aPath')))))
                if var.get('aRootUrl'):
                    var.get('aRootUrl').put('path', var.get('joined'))
                    return var.get('urlGenerate')(var.get('aRootUrl'))
                return var.get('joined')
            PyJsHoisted_join_.func_name = 'join'
            var.put('join', PyJsHoisted_join_)
            @Js
            def PyJsHoisted_relative_(aRoot, aPath, this, arguments, var=var):
                var = Scope({'aRoot':aRoot, 'aPath':aPath, 'this':this, 'arguments':arguments}, var)
                var.registers(['aRoot', 'url', 'aPath'])
                if PyJsStrictEq(var.get('aRoot'),Js('')):
                    var.put('aRoot', Js('.'))
                var.put('aRoot', var.get('aRoot').callprop('replace', JsRegExp('/\\/$/'), Js('')))
                var.put('url', var.get('urlParse')(var.get('aRoot')))
                if (((var.get('aPath').callprop('charAt', Js(0.0))==Js('/')) and var.get('url')) and (var.get('url').get('path')==Js('/'))):
                    return var.get('aPath').callprop('slice', Js(1.0))
                return (var.get('aPath').callprop('substr', (var.get('aRoot').get('length')+Js(1.0))) if PyJsStrictEq(var.get('aPath').callprop('indexOf', (var.get('aRoot')+Js('/'))),Js(0.0)) else var.get('aPath'))
            PyJsHoisted_relative_.func_name = 'relative'
            var.put('relative', PyJsHoisted_relative_)
            @Js
            def PyJsHoisted_toSetString_(aStr, this, arguments, var=var):
                var = Scope({'aStr':aStr, 'this':this, 'arguments':arguments}, var)
                var.registers(['aStr'])
                return (Js('$')+var.get('aStr'))
            PyJsHoisted_toSetString_.func_name = 'toSetString'
            var.put('toSetString', PyJsHoisted_toSetString_)
            @Js
            def PyJsHoisted_fromSetString_(aStr, this, arguments, var=var):
                var = Scope({'aStr':aStr, 'this':this, 'arguments':arguments}, var)
                var.registers(['aStr'])
                return var.get('aStr').callprop('substr', Js(1.0))
            PyJsHoisted_fromSetString_.func_name = 'fromSetString'
            var.put('fromSetString', PyJsHoisted_fromSetString_)
            @Js
            def PyJsHoisted_strcmp_(aStr1, aStr2, this, arguments, var=var):
                var = Scope({'aStr1':aStr1, 'aStr2':aStr2, 'this':this, 'arguments':arguments}, var)
                var.registers(['s2', 's1', 'aStr2', 'aStr1'])
                var.put('s1', (var.get('aStr1') or Js('')))
                var.put('s2', (var.get('aStr2') or Js('')))
                return ((var.get('s1')>var.get('s2'))-(var.get('s1')<var.get('s2')))
            PyJsHoisted_strcmp_.func_name = 'strcmp'
            var.put('strcmp', PyJsHoisted_strcmp_)
            @Js
            def PyJsHoisted_compareByOriginalPositions_(mappingA, mappingB, onlyCompareOriginal, this, arguments, var=var):
                var = Scope({'mappingA':mappingA, 'mappingB':mappingB, 'onlyCompareOriginal':onlyCompareOriginal, 'this':this, 'arguments':arguments}, var)
                var.registers(['onlyCompareOriginal', 'mappingB', 'mappingA', 'cmp'])
                pass
                var.put('cmp', var.get('strcmp')(var.get('mappingA').get('source'), var.get('mappingB').get('source')))
                if var.get('cmp'):
                    return var.get('cmp')
                var.put('cmp', (var.get('mappingA').get('originalLine')-var.get('mappingB').get('originalLine')))
                if var.get('cmp'):
                    return var.get('cmp')
                var.put('cmp', (var.get('mappingA').get('originalColumn')-var.get('mappingB').get('originalColumn')))
                if (var.get('cmp') or var.get('onlyCompareOriginal')):
                    return var.get('cmp')
                var.put('cmp', var.get('strcmp')(var.get('mappingA').get('name'), var.get('mappingB').get('name')))
                if var.get('cmp'):
                    return var.get('cmp')
                var.put('cmp', (var.get('mappingA').get('generatedLine')-var.get('mappingB').get('generatedLine')))
                if var.get('cmp'):
                    return var.get('cmp')
                return (var.get('mappingA').get('generatedColumn')-var.get('mappingB').get('generatedColumn'))
            PyJsHoisted_compareByOriginalPositions_.func_name = 'compareByOriginalPositions'
            var.put('compareByOriginalPositions', PyJsHoisted_compareByOriginalPositions_)
            @Js
            def PyJsHoisted_compareByGeneratedPositions_(mappingA, mappingB, onlyCompareGenerated, this, arguments, var=var):
                var = Scope({'mappingA':mappingA, 'mappingB':mappingB, 'onlyCompareGenerated':onlyCompareGenerated, 'this':this, 'arguments':arguments}, var)
                var.registers(['mappingB', 'mappingA', 'onlyCompareGenerated', 'cmp'])
                pass
                var.put('cmp', (var.get('mappingA').get('generatedLine')-var.get('mappingB').get('generatedLine')))
                if var.get('cmp'):
                    return var.get('cmp')
                var.put('cmp', (var.get('mappingA').get('generatedColumn')-var.get('mappingB').get('generatedColumn')))
                if (var.get('cmp') or var.get('onlyCompareGenerated')):
                    return var.get('cmp')
                var.put('cmp', var.get('strcmp')(var.get('mappingA').get('source'), var.get('mappingB').get('source')))
                if var.get('cmp'):
                    return var.get('cmp')
                var.put('cmp', (var.get('mappingA').get('originalLine')-var.get('mappingB').get('originalLine')))
                if var.get('cmp'):
                    return var.get('cmp')
                var.put('cmp', (var.get('mappingA').get('originalColumn')-var.get('mappingB').get('originalColumn')))
                if var.get('cmp'):
                    return var.get('cmp')
                return var.get('strcmp')(var.get('mappingA').get('name'), var.get('mappingB').get('name'))
            PyJsHoisted_compareByGeneratedPositions_.func_name = 'compareByGeneratedPositions'
            var.put('compareByGeneratedPositions', PyJsHoisted_compareByGeneratedPositions_)
            pass
            var.get('exports').put('getArg', var.get('getArg'))
            var.put('urlRegexp', JsRegExp('/^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.]*)(?::(\\d+))?(\\S*)$/'))
            var.put('dataUrlRegexp', JsRegExp('/^data:.+\\,.+$/'))
            pass
            var.get('exports').put('urlParse', var.get('urlParse'))
            pass
            var.get('exports').put('urlGenerate', var.get('urlGenerate'))
            pass
            var.get('exports').put('normalize', var.get('normalize'))
            pass
            var.get('exports').put('join', var.get('join'))
            pass
            var.get('exports').put('relative', var.get('relative'))
            pass
            var.get('exports').put('toSetString', var.get('toSetString'))
            pass
            var.get('exports').put('fromSetString', var.get('fromSetString'))
            pass
            pass
            pass
            var.get('exports').put('compareByOriginalPositions', var.get('compareByOriginalPositions'))
            pass
            pass
            var.get('exports').put('compareByGeneratedPositions', var.get('compareByGeneratedPositions'))
        PyJs_anonymous_1155_._set_name('anonymous')
        var.get('define')(PyJs_anonymous_1155_)
    PyJs_anonymous_1154_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1156_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        def PyJs_LONG_1157_(var=var):
            return var.get('module').put('exports', Js({'name':Js('escodegen'),'description':Js('ECMAScript code generator'),'homepage':Js('http://github.com/Constellation/escodegen'),'main':Js('escodegen.js'),'bin':Js({'esgenerate':Js('./bin/esgenerate.js'),'escodegen':Js('./bin/escodegen.js')}),'version':Js('1.1.0'),'engines':Js({'node':Js('>=0.4.0')}),'maintainers':Js([Js({'name':Js('Yusuke Suzuki'),'email':Js('utatane.tea@gmail.com'),'web':Js('http://github.com/Constellation')})]),'repository':Js({'type':Js('git'),'url':Js('http://github.com/Constellation/escodegen.git')}),'dependencies':Js({'esprima':Js('~1.0.4'),'estraverse':Js('~1.5.0'),'esutils':Js('~1.0.0')}),'optionalDependencies':Js({'source-map':Js('~0.1.30')}),'devDependencies':Js({'esprima-moz':Js('*'),'commonjs-everywhere':Js('~0.8.0'),'q':Js('*'),'bower':Js('*'),'semver':Js('*'),'chai':Js('~1.7.2'),'grunt-contrib-jshint':Js('~0.5.0'),'grunt-cli':Js('~0.1.9'),'grunt':Js('~0.4.1'),'grunt-mocha-test':Js('~0.6.2')}),'licenses':Js([Js({'type':Js('BSD'),'url':Js('http://github.com/Constellation/escodegen/raw/master/LICENSE.BSD')})]),'scripts':Js({'test':Js('grunt travis'),'unit-test':Js('grunt test'),'lint':Js('grunt lint'),'release':Js('node tools/release.js'),'build-min':Js('./node_modules/.bin/cjsify -ma path: tools/entry-point.js > escodegen.browser.min.js'),'build':Js('./node_modules/.bin/cjsify -a path: tools/entry-point.js > escodegen.browser.js')})}))
        PyJs_LONG_1157_()
    PyJs_anonymous_1156_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1158_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_1159_(exports, this, arguments, var=var):
            var = Scope({'exports':exports, 'this':this, 'arguments':arguments}, var)
            var.registers(['VisitorKeys', 'Reference', 'Element', 'lowerBound', 'replace', 'attachComments', 'Controller', 'shallowCopy', 'Syntax', 'extendCommentRange', 'ignoreJSHintError', 'VisitorOption', 'BREAK', 'deepCopy', 'isArray', 'upperBound', 'traverse', 'SKIP', 'exports'])
            @Js
            def PyJsHoisted_ignoreJSHintError_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                pass
            PyJsHoisted_ignoreJSHintError_.func_name = 'ignoreJSHintError'
            var.put('ignoreJSHintError', PyJsHoisted_ignoreJSHintError_)
            @Js
            def PyJsHoisted_deepCopy_(obj, this, arguments, var=var):
                var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                var.registers(['ret', 'val', 'key', 'obj'])
                var.put('ret', Js({}))
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('obj').callprop('hasOwnProperty', var.get('key')):
                        var.put('val', var.get('obj').get(var.get('key')))
                        if (PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('val',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('val'))),Js('object')) and PyJsStrictNeq(var.get('val'),var.get(u"null"))):
                            var.get('ret').put(var.get('key'), var.get('deepCopy')(var.get('val')))
                        else:
                            var.get('ret').put(var.get('key'), var.get('val'))
                return var.get('ret')
            PyJsHoisted_deepCopy_.func_name = 'deepCopy'
            var.put('deepCopy', PyJsHoisted_deepCopy_)
            @Js
            def PyJsHoisted_shallowCopy_(obj, this, arguments, var=var):
                var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                var.registers(['ret', 'key', 'obj'])
                var.put('ret', Js({}))
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('obj').callprop('hasOwnProperty', var.get('key')):
                        var.get('ret').put(var.get('key'), var.get('obj').get(var.get('key')))
                return var.get('ret')
            PyJsHoisted_shallowCopy_.func_name = 'shallowCopy'
            var.put('shallowCopy', PyJsHoisted_shallowCopy_)
            @Js
            def PyJsHoisted_upperBound_(array, func, this, arguments, var=var):
                var = Scope({'array':array, 'func':func, 'this':this, 'arguments':arguments}, var)
                var.registers(['diff', 'i', 'func', 'len', 'array', 'current'])
                pass
                var.put('len', var.get('array').get('length'))
                var.put('i', Js(0.0))
                while var.get('len'):
                    var.put('diff', PyJsBshift(var.get('len'),Js(1.0)))
                    var.put('current', (var.get('i')+var.get('diff')))
                    if var.get('func')(var.get('array').get(var.get('current'))):
                        var.put('len', var.get('diff'))
                    else:
                        var.put('i', (var.get('current')+Js(1.0)))
                        var.put('len', (var.get('diff')+Js(1.0)), '-')
                return var.get('i')
            PyJsHoisted_upperBound_.func_name = 'upperBound'
            var.put('upperBound', PyJsHoisted_upperBound_)
            @Js
            def PyJsHoisted_lowerBound_(array, func, this, arguments, var=var):
                var = Scope({'array':array, 'func':func, 'this':this, 'arguments':arguments}, var)
                var.registers(['diff', 'i', 'func', 'len', 'array', 'current'])
                pass
                var.put('len', var.get('array').get('length'))
                var.put('i', Js(0.0))
                while var.get('len'):
                    var.put('diff', PyJsBshift(var.get('len'),Js(1.0)))
                    var.put('current', (var.get('i')+var.get('diff')))
                    if var.get('func')(var.get('array').get(var.get('current'))):
                        var.put('i', (var.get('current')+Js(1.0)))
                        var.put('len', (var.get('diff')+Js(1.0)), '-')
                    else:
                        var.put('len', var.get('diff'))
                return var.get('i')
            PyJsHoisted_lowerBound_.func_name = 'lowerBound'
            var.put('lowerBound', PyJsHoisted_lowerBound_)
            @Js
            def PyJsHoisted_Reference_(parent, key, this, arguments, var=var):
                var = Scope({'parent':parent, 'key':key, 'this':this, 'arguments':arguments}, var)
                var.registers(['parent', 'key'])
                var.get(u"this").put('parent', var.get('parent'))
                var.get(u"this").put('key', var.get('key'))
            PyJsHoisted_Reference_.func_name = 'Reference'
            var.put('Reference', PyJsHoisted_Reference_)
            @Js
            def PyJsHoisted_Element_(node, path, wrap, ref, this, arguments, var=var):
                var = Scope({'node':node, 'path':path, 'wrap':wrap, 'ref':ref, 'this':this, 'arguments':arguments}, var)
                var.registers(['node', 'ref', 'wrap', 'path'])
                var.get(u"this").put('node', var.get('node'))
                var.get(u"this").put('path', var.get('path'))
                var.get(u"this").put('wrap', var.get('wrap'))
                var.get(u"this").put('ref', var.get('ref'))
            PyJsHoisted_Element_.func_name = 'Element'
            var.put('Element', PyJsHoisted_Element_)
            @Js
            def PyJsHoisted_Controller_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                pass
            PyJsHoisted_Controller_.func_name = 'Controller'
            var.put('Controller', PyJsHoisted_Controller_)
            @Js
            def PyJsHoisted_traverse_(root, visitor, this, arguments, var=var):
                var = Scope({'root':root, 'visitor':visitor, 'this':this, 'arguments':arguments}, var)
                var.registers(['visitor', 'root', 'controller'])
                var.put('controller', var.get('Controller').create())
                return var.get('controller').callprop('traverse', var.get('root'), var.get('visitor'))
            PyJsHoisted_traverse_.func_name = 'traverse'
            var.put('traverse', PyJsHoisted_traverse_)
            @Js
            def PyJsHoisted_replace_(root, visitor, this, arguments, var=var):
                var = Scope({'root':root, 'visitor':visitor, 'this':this, 'arguments':arguments}, var)
                var.registers(['visitor', 'root', 'controller'])
                var.put('controller', var.get('Controller').create())
                return var.get('controller').callprop('replace', var.get('root'), var.get('visitor'))
            PyJsHoisted_replace_.func_name = 'replace'
            var.put('replace', PyJsHoisted_replace_)
            @Js
            def PyJsHoisted_extendCommentRange_(comment, tokens, this, arguments, var=var):
                var = Scope({'comment':comment, 'tokens':tokens, 'this':this, 'arguments':arguments}, var)
                var.registers(['target', 'tokens', 'comment'])
                pass
                @Js
                def PyJs_search_1174_(token, this, arguments, var=var):
                    var = Scope({'token':token, 'this':this, 'arguments':arguments, 'search':PyJs_search_1174_}, var)
                    var.registers(['token'])
                    return (var.get('token').get('range').get('0')>var.get('comment').get('range').get('0'))
                PyJs_search_1174_._set_name('search')
                var.put('target', var.get('upperBound')(var.get('tokens'), PyJs_search_1174_))
                var.get('comment').put('extendedRange', Js([var.get('comment').get('range').get('0'), var.get('comment').get('range').get('1')]))
                if PyJsStrictNeq(var.get('target'),var.get('tokens').get('length')):
                    var.get('comment').get('extendedRange').put('1', var.get('tokens').get(var.get('target')).get('range').get('0'))
                var.put('target', Js(1.0), '-')
                if (var.get('target')>=Js(0.0)):
                    var.get('comment').get('extendedRange').put('0', var.get('tokens').get(var.get('target')).get('range').get('1'))
                return var.get('comment')
            PyJsHoisted_extendCommentRange_.func_name = 'extendCommentRange'
            var.put('extendCommentRange', PyJsHoisted_extendCommentRange_)
            @Js
            def PyJsHoisted_attachComments_(tree, providedComments, tokens, this, arguments, var=var):
                var = Scope({'tree':tree, 'providedComments':providedComments, 'tokens':tokens, 'this':this, 'arguments':arguments}, var)
                var.registers(['comments', 'tree', 'cursor', 'comment', 'i', 'providedComments', 'tokens', 'len'])
                var.put('comments', Js([]))
                if var.get('tree').get('range').neg():
                    PyJsTempException = JsToPyException(var.get('Error').create(Js('attachComments needs range information')))
                    raise PyJsTempException
                if var.get('tokens').get('length').neg():
                    if var.get('providedComments').get('length'):
                        #for JS loop
                        PyJsComma(var.put('i', Js(0.0)),var.put('len', var.get('providedComments').get('length')))
                        while (var.get('i')<var.get('len')):
                            try:
                                var.put('comment', var.get('deepCopy')(var.get('providedComments').get(var.get('i'))))
                                var.get('comment').put('extendedRange', Js([Js(0.0), var.get('tree').get('range').get('0')]))
                                var.get('comments').callprop('push', var.get('comment'))
                            finally:
                                    var.put('i', Js(1.0), '+')
                        var.get('tree').put('leadingComments', var.get('comments'))
                    return var.get('tree')
                #for JS loop
                PyJsComma(var.put('i', Js(0.0)),var.put('len', var.get('providedComments').get('length')))
                while (var.get('i')<var.get('len')):
                    try:
                        var.get('comments').callprop('push', var.get('extendCommentRange')(var.get('deepCopy')(var.get('providedComments').get(var.get('i'))), var.get('tokens')))
                    finally:
                            var.put('i', Js(1.0), '+')
                var.put('cursor', Js(0.0))
                @Js
                def PyJs_enter_1175_(node, this, arguments, var=var):
                    var = Scope({'node':node, 'this':this, 'arguments':arguments, 'enter':PyJs_enter_1175_}, var)
                    var.registers(['node', 'comment'])
                    pass
                    while (var.get('cursor')<var.get('comments').get('length')):
                        var.put('comment', var.get('comments').get(var.get('cursor')))
                        if (var.get('comment').get('extendedRange').get('1')>var.get('node').get('range').get('0')):
                            break
                        if PyJsStrictEq(var.get('comment').get('extendedRange').get('1'),var.get('node').get('range').get('0')):
                            if var.get('node').get('leadingComments').neg():
                                var.get('node').put('leadingComments', Js([]))
                            var.get('node').get('leadingComments').callprop('push', var.get('comment'))
                            var.get('comments').callprop('splice', var.get('cursor'), Js(1.0))
                        else:
                            var.put('cursor', Js(1.0), '+')
                    if PyJsStrictEq(var.get('cursor'),var.get('comments').get('length')):
                        return var.get('VisitorOption').get('Break')
                    if (var.get('comments').get(var.get('cursor')).get('extendedRange').get('0')>var.get('node').get('range').get('1')):
                        return var.get('VisitorOption').get('Skip')
                PyJs_enter_1175_._set_name('enter')
                var.get('traverse')(var.get('tree'), Js({'enter':PyJs_enter_1175_}))
                var.put('cursor', Js(0.0))
                @Js
                def PyJs_leave_1176_(node, this, arguments, var=var):
                    var = Scope({'node':node, 'this':this, 'arguments':arguments, 'leave':PyJs_leave_1176_}, var)
                    var.registers(['node', 'comment'])
                    pass
                    while (var.get('cursor')<var.get('comments').get('length')):
                        var.put('comment', var.get('comments').get(var.get('cursor')))
                        if (var.get('node').get('range').get('1')<var.get('comment').get('extendedRange').get('0')):
                            break
                        if PyJsStrictEq(var.get('node').get('range').get('1'),var.get('comment').get('extendedRange').get('0')):
                            if var.get('node').get('trailingComments').neg():
                                var.get('node').put('trailingComments', Js([]))
                            var.get('node').get('trailingComments').callprop('push', var.get('comment'))
                            var.get('comments').callprop('splice', var.get('cursor'), Js(1.0))
                        else:
                            var.put('cursor', Js(1.0), '+')
                    if PyJsStrictEq(var.get('cursor'),var.get('comments').get('length')):
                        return var.get('VisitorOption').get('Break')
                    if (var.get('comments').get(var.get('cursor')).get('extendedRange').get('0')>var.get('node').get('range').get('1')):
                        return var.get('VisitorOption').get('Skip')
                PyJs_leave_1176_._set_name('leave')
                var.get('traverse')(var.get('tree'), Js({'leave':PyJs_leave_1176_}))
                return var.get('tree')
            PyJsHoisted_attachComments_.func_name = 'attachComments'
            var.put('attachComments', PyJsHoisted_attachComments_)
            Js('use strict')
            pass
            def PyJs_LONG_1160_(var=var):
                return var.put('Syntax', Js({'AssignmentExpression':Js('AssignmentExpression'),'ArrayExpression':Js('ArrayExpression'),'ArrayPattern':Js('ArrayPattern'),'ArrowFunctionExpression':Js('ArrowFunctionExpression'),'BlockStatement':Js('BlockStatement'),'BinaryExpression':Js('BinaryExpression'),'BreakStatement':Js('BreakStatement'),'CallExpression':Js('CallExpression'),'CatchClause':Js('CatchClause'),'ClassBody':Js('ClassBody'),'ClassDeclaration':Js('ClassDeclaration'),'ClassExpression':Js('ClassExpression'),'ConditionalExpression':Js('ConditionalExpression'),'ContinueStatement':Js('ContinueStatement'),'DebuggerStatement':Js('DebuggerStatement'),'DirectiveStatement':Js('DirectiveStatement'),'DoWhileStatement':Js('DoWhileStatement'),'EmptyStatement':Js('EmptyStatement'),'ExpressionStatement':Js('ExpressionStatement'),'ForStatement':Js('ForStatement'),'ForInStatement':Js('ForInStatement'),'FunctionDeclaration':Js('FunctionDeclaration'),'FunctionExpression':Js('FunctionExpression'),'Identifier':Js('Identifier'),'IfStatement':Js('IfStatement'),'Literal':Js('Literal'),'LabeledStatement':Js('LabeledStatement'),'LogicalExpression':Js('LogicalExpression'),'MemberExpression':Js('MemberExpression'),'MethodDefinition':Js('MethodDefinition'),'NewExpression':Js('NewExpression'),'ObjectExpression':Js('ObjectExpression'),'ObjectPattern':Js('ObjectPattern'),'Program':Js('Program'),'Property':Js('Property'),'ReturnStatement':Js('ReturnStatement'),'SequenceExpression':Js('SequenceExpression'),'SwitchStatement':Js('SwitchStatement'),'SwitchCase':Js('SwitchCase'),'ThisExpression':Js('ThisExpression'),'ThrowStatement':Js('ThrowStatement'),'TryStatement':Js('TryStatement'),'UnaryExpression':Js('UnaryExpression'),'UpdateExpression':Js('UpdateExpression'),'VariableDeclaration':Js('VariableDeclaration'),'VariableDeclarator':Js('VariableDeclarator'),'WhileStatement':Js('WhileStatement'),'WithStatement':Js('WithStatement'),'YieldExpression':Js('YieldExpression')}))
            PyJs_LONG_1160_()
            pass
            var.put('isArray', var.get('Array').get('isArray'))
            if var.get('isArray').neg():
                @Js
                def PyJs_isArray_1161_(array, this, arguments, var=var):
                    var = Scope({'array':array, 'this':this, 'arguments':arguments, 'isArray':PyJs_isArray_1161_}, var)
                    var.registers(['array'])
                    return PyJsStrictEq(var.get('Object').get('prototype').get('toString').callprop('call', var.get('array')),Js('[object Array]'))
                PyJs_isArray_1161_._set_name('isArray')
                var.put('isArray', PyJs_isArray_1161_)
            pass
            pass
            var.get('ignoreJSHintError')(var.get('shallowCopy'))
            pass
            pass
            var.get('ignoreJSHintError')(var.get('lowerBound'))
            def PyJs_LONG_1162_(var=var):
                return var.put('VisitorKeys', Js({'AssignmentExpression':Js([Js('left'), Js('right')]),'ArrayExpression':Js([Js('elements')]),'ArrayPattern':Js([Js('elements')]),'ArrowFunctionExpression':Js([Js('params'), Js('defaults'), Js('rest'), Js('body')]),'BlockStatement':Js([Js('body')]),'BinaryExpression':Js([Js('left'), Js('right')]),'BreakStatement':Js([Js('label')]),'CallExpression':Js([Js('callee'), Js('arguments')]),'CatchClause':Js([Js('param'), Js('body')]),'ClassBody':Js([Js('body')]),'ClassDeclaration':Js([Js('id'), Js('body'), Js('superClass')]),'ClassExpression':Js([Js('id'), Js('body'), Js('superClass')]),'ConditionalExpression':Js([Js('test'), Js('consequent'), Js('alternate')]),'ContinueStatement':Js([Js('label')]),'DebuggerStatement':Js([]),'DirectiveStatement':Js([]),'DoWhileStatement':Js([Js('body'), Js('test')]),'EmptyStatement':Js([]),'ExpressionStatement':Js([Js('expression')]),'ForStatement':Js([Js('init'), Js('test'), Js('update'), Js('body')]),'ForInStatement':Js([Js('left'), Js('right'), Js('body')]),'ForOfStatement':Js([Js('left'), Js('right'), Js('body')]),'FunctionDeclaration':Js([Js('id'), Js('params'), Js('defaults'), Js('rest'), Js('body')]),'FunctionExpression':Js([Js('id'), Js('params'), Js('defaults'), Js('rest'), Js('body')]),'Identifier':Js([]),'IfStatement':Js([Js('test'), Js('consequent'), Js('alternate')]),'Literal':Js([]),'LabeledStatement':Js([Js('label'), Js('body')]),'LogicalExpression':Js([Js('left'), Js('right')]),'MemberExpression':Js([Js('object'), Js('property')]),'MethodDefinition':Js([Js('key'), Js('value')]),'NewExpression':Js([Js('callee'), Js('arguments')]),'ObjectExpression':Js([Js('properties')]),'ObjectPattern':Js([Js('properties')]),'Program':Js([Js('body')]),'Property':Js([Js('key'), Js('value')]),'ReturnStatement':Js([Js('argument')]),'SequenceExpression':Js([Js('expressions')]),'SwitchStatement':Js([Js('discriminant'), Js('cases')]),'SwitchCase':Js([Js('test'), Js('consequent')]),'ThisExpression':Js([]),'ThrowStatement':Js([Js('argument')]),'TryStatement':Js([Js('block'), Js('handlers'), Js('handler'), Js('guardedHandlers'), Js('finalizer')]),'UnaryExpression':Js([Js('argument')]),'UpdateExpression':Js([Js('argument')]),'VariableDeclaration':Js([Js('declarations')]),'VariableDeclarator':Js([Js('id'), Js('init')]),'WhileStatement':Js([Js('test'), Js('body')]),'WithStatement':Js([Js('object'), Js('body')]),'YieldExpression':Js([Js('argument')])}))
            PyJs_LONG_1162_()
            var.put('BREAK', Js({}))
            var.put('SKIP', Js({}))
            var.put('VisitorOption', Js({'Break':var.get('BREAK'),'Skip':var.get('SKIP')}))
            pass
            @Js
            def PyJs_replace_1163_(node, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'arguments':arguments, 'replace':PyJs_replace_1163_}, var)
                var.registers(['node'])
                var.get(u"this").get('parent').put(var.get(u"this").get('key'), var.get('node'))
            PyJs_replace_1163_._set_name('replace')
            var.get('Reference').get('prototype').put('replace', PyJs_replace_1163_)
            pass
            pass
            @Js
            def PyJs_path_1164_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'path':PyJs_path_1164_}, var)
                var.registers(['jz', 'i', 'addToPath', 'result', 'j', 'iz', 'element'])
                @Js
                def PyJsHoisted_addToPath_(result, path, this, arguments, var=var):
                    var = Scope({'result':result, 'path':path, 'this':this, 'arguments':arguments}, var)
                    var.registers(['result', 'path'])
                    if var.get('isArray')(var.get('path')):
                        #for JS loop
                        PyJsComma(var.put('j', Js(0.0)),var.put('jz', var.get('path').get('length')))
                        while (var.get('j')<var.get('jz')):
                            try:
                                var.get('result').callprop('push', var.get('path').get(var.get('j')))
                            finally:
                                    var.put('j',Js(var.get('j').to_number())+Js(1))
                    else:
                        var.get('result').callprop('push', var.get('path'))
                PyJsHoisted_addToPath_.func_name = 'addToPath'
                var.put('addToPath', PyJsHoisted_addToPath_)
                pass
                pass
                if var.get(u"this").get('__current').get('path').neg():
                    return var.get(u"null")
                var.put('result', Js([]))
                #for JS loop
                PyJsComma(var.put('i', Js(2.0)),var.put('iz', var.get(u"this").get('__leavelist').get('length')))
                while (var.get('i')<var.get('iz')):
                    try:
                        var.put('element', var.get(u"this").get('__leavelist').get(var.get('i')))
                        var.get('addToPath')(var.get('result'), var.get('element').get('path'))
                    finally:
                            var.put('i',Js(var.get('i').to_number())+Js(1))
                var.get('addToPath')(var.get('result'), var.get(u"this").get('__current').get('path'))
                return var.get('result')
            PyJs_path_1164_._set_name('path')
            var.get('Controller').get('prototype').put('path', PyJs_path_1164_)
            @Js
            def PyJs_parents_1165_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'parents':PyJs_parents_1165_}, var)
                var.registers(['result', 'i', 'iz'])
                pass
                var.put('result', Js([]))
                #for JS loop
                PyJsComma(var.put('i', Js(1.0)),var.put('iz', var.get(u"this").get('__leavelist').get('length')))
                while (var.get('i')<var.get('iz')):
                    try:
                        var.get('result').callprop('push', var.get(u"this").get('__leavelist').get(var.get('i')).get('node'))
                    finally:
                            var.put('i',Js(var.get('i').to_number())+Js(1))
                return var.get('result')
            PyJs_parents_1165_._set_name('parents')
            var.get('Controller').get('prototype').put('parents', PyJs_parents_1165_)
            @Js
            def PyJs_current_1166_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'current':PyJs_current_1166_}, var)
                var.registers([])
                return var.get(u"this").get('__current').get('node')
            PyJs_current_1166_._set_name('current')
            var.get('Controller').get('prototype').put('current', PyJs_current_1166_)
            @Js
            def PyJs___execute_1167_(callback, element, this, arguments, var=var):
                var = Scope({'callback':callback, 'element':element, 'this':this, 'arguments':arguments, '__execute':PyJs___execute_1167_}, var)
                var.registers(['element', 'result', 'previous', 'callback'])
                pass
                var.put('result', var.get('undefined'))
                var.put('previous', var.get(u"this").get('__current'))
                var.get(u"this").put('__current', var.get('element'))
                var.get(u"this").put('__state', var.get(u"null"))
                if var.get('callback'):
                    var.put('result', var.get('callback').callprop('call', var.get(u"this"), var.get('element').get('node'), var.get(u"this").get('__leavelist').get((var.get(u"this").get('__leavelist').get('length')-Js(1.0))).get('node')))
                var.get(u"this").put('__current', var.get('previous'))
                return var.get('result')
            PyJs___execute_1167_._set_name('__execute')
            var.get('Controller').get('prototype').put('__execute', PyJs___execute_1167_)
            @Js
            def PyJs_notify_1168_(flag, this, arguments, var=var):
                var = Scope({'flag':flag, 'this':this, 'arguments':arguments, 'notify':PyJs_notify_1168_}, var)
                var.registers(['flag'])
                var.get(u"this").put('__state', var.get('flag'))
            PyJs_notify_1168_._set_name('notify')
            var.get('Controller').get('prototype').put('notify', PyJs_notify_1168_)
            @Js
            def PyJs_anonymous_1169_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get(u"this").callprop('notify', var.get('SKIP'))
            PyJs_anonymous_1169_._set_name('anonymous')
            var.get('Controller').get('prototype').put('skip', PyJs_anonymous_1169_)
            @Js
            def PyJs_anonymous_1170_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get(u"this").callprop('notify', var.get('BREAK'))
            PyJs_anonymous_1170_._set_name('anonymous')
            var.get('Controller').get('prototype').put('break', PyJs_anonymous_1170_)
            @Js
            def PyJs_anonymous_1171_(root, visitor, this, arguments, var=var):
                var = Scope({'root':root, 'visitor':visitor, 'this':this, 'arguments':arguments}, var)
                var.registers(['visitor', 'root'])
                var.get(u"this").put('visitor', var.get('visitor'))
                var.get(u"this").put('root', var.get('root'))
                var.get(u"this").put('__worklist', Js([]))
                var.get(u"this").put('__leavelist', Js([]))
                var.get(u"this").put('__current', var.get(u"null"))
                var.get(u"this").put('__state', var.get(u"null"))
            PyJs_anonymous_1171_._set_name('anonymous')
            var.get('Controller').get('prototype').put('__initialize', PyJs_anonymous_1171_)
            @Js
            def PyJs_traverse_1172_(root, visitor, this, arguments, var=var):
                var = Scope({'root':root, 'visitor':visitor, 'this':this, 'arguments':arguments, 'traverse':PyJs_traverse_1172_}, var)
                var.registers(['nodeType', 'sentinel', 'current2', 'node', 'visitor', 'worklist', 'current', 'root', 'leavelist', 'candidates', 'candidate', 'ret', 'element', 'key'])
                pass
                var.get(u"this").callprop('__initialize', var.get('root'), var.get('visitor'))
                var.put('sentinel', Js({}))
                var.put('worklist', var.get(u"this").get('__worklist'))
                var.put('leavelist', var.get(u"this").get('__leavelist'))
                var.get('worklist').callprop('push', var.get('Element').create(var.get('root'), var.get(u"null"), var.get(u"null"), var.get(u"null")))
                var.get('leavelist').callprop('push', var.get('Element').create(var.get(u"null"), var.get(u"null"), var.get(u"null"), var.get(u"null")))
                while var.get('worklist').get('length'):
                    var.put('element', var.get('worklist').callprop('pop'))
                    if PyJsStrictEq(var.get('element'),var.get('sentinel')):
                        var.put('element', var.get('leavelist').callprop('pop'))
                        var.put('ret', var.get(u"this").callprop('__execute', var.get('visitor').get('leave'), var.get('element')))
                        if (PyJsStrictEq(var.get(u"this").get('__state'),var.get('BREAK')) or PyJsStrictEq(var.get('ret'),var.get('BREAK'))):
                            return var.get('undefined')
                        continue
                    if var.get('element').get('node'):
                        var.put('ret', var.get(u"this").callprop('__execute', var.get('visitor').get('enter'), var.get('element')))
                        if (PyJsStrictEq(var.get(u"this").get('__state'),var.get('BREAK')) or PyJsStrictEq(var.get('ret'),var.get('BREAK'))):
                            return var.get('undefined')
                        var.get('worklist').callprop('push', var.get('sentinel'))
                        var.get('leavelist').callprop('push', var.get('element'))
                        if (PyJsStrictEq(var.get(u"this").get('__state'),var.get('SKIP')) or PyJsStrictEq(var.get('ret'),var.get('SKIP'))):
                            continue
                        var.put('node', var.get('element').get('node'))
                        var.put('nodeType', (var.get('element').get('wrap') or var.get('node').get('type')))
                        var.put('candidates', var.get('VisitorKeys').get(var.get('nodeType')))
                        var.put('current', var.get('candidates').get('length'))
                        while (var.put('current', Js(1.0), '-')>=Js(0.0)):
                            var.put('key', var.get('candidates').get(var.get('current')))
                            var.put('candidate', var.get('node').get(var.get('key')))
                            if var.get('candidate').neg():
                                continue
                            if var.get('isArray')(var.get('candidate')).neg():
                                var.get('worklist').callprop('push', var.get('Element').create(var.get('candidate'), var.get('key'), var.get(u"null"), var.get(u"null")))
                                continue
                            var.put('current2', var.get('candidate').get('length'))
                            while (var.put('current2', Js(1.0), '-')>=Js(0.0)):
                                if var.get('candidate').get(var.get('current2')).neg():
                                    continue
                                if ((PyJsStrictEq(var.get('nodeType'),var.get('Syntax').get('ObjectExpression')) or PyJsStrictEq(var.get('nodeType'),var.get('Syntax').get('ObjectPattern'))) and PyJsStrictEq(Js('properties'),var.get('candidates').get(var.get('current')))):
                                    var.put('element', var.get('Element').create(var.get('candidate').get(var.get('current2')), Js([var.get('key'), var.get('current2')]), Js('Property'), var.get(u"null")))
                                else:
                                    var.put('element', var.get('Element').create(var.get('candidate').get(var.get('current2')), Js([var.get('key'), var.get('current2')]), var.get(u"null"), var.get(u"null")))
                                var.get('worklist').callprop('push', var.get('element'))
            PyJs_traverse_1172_._set_name('traverse')
            var.get('Controller').get('prototype').put('traverse', PyJs_traverse_1172_)
            @Js
            def PyJs_replace_1173_(root, visitor, this, arguments, var=var):
                var = Scope({'root':root, 'visitor':visitor, 'this':this, 'arguments':arguments, 'replace':PyJs_replace_1173_}, var)
                var.registers(['nodeType', 'target', 'sentinel', 'current2', 'outer', 'node', 'visitor', 'worklist', 'root', 'key', 'leavelist', 'candidates', 'candidate', 'element', 'current'])
                pass
                var.get(u"this").callprop('__initialize', var.get('root'), var.get('visitor'))
                var.put('sentinel', Js({}))
                var.put('worklist', var.get(u"this").get('__worklist'))
                var.put('leavelist', var.get(u"this").get('__leavelist'))
                var.put('outer', Js({'root':var.get('root')}))
                var.put('element', var.get('Element').create(var.get('root'), var.get(u"null"), var.get(u"null"), var.get('Reference').create(var.get('outer'), Js('root'))))
                var.get('worklist').callprop('push', var.get('element'))
                var.get('leavelist').callprop('push', var.get('element'))
                while var.get('worklist').get('length'):
                    var.put('element', var.get('worklist').callprop('pop'))
                    if PyJsStrictEq(var.get('element'),var.get('sentinel')):
                        var.put('element', var.get('leavelist').callprop('pop'))
                        var.put('target', var.get(u"this").callprop('__execute', var.get('visitor').get('leave'), var.get('element')))
                        if ((PyJsStrictNeq(var.get('target'),var.get('undefined')) and PyJsStrictNeq(var.get('target'),var.get('BREAK'))) and PyJsStrictNeq(var.get('target'),var.get('SKIP'))):
                            var.get('element').get('ref').callprop('replace', var.get('target'))
                        if (PyJsStrictEq(var.get(u"this").get('__state'),var.get('BREAK')) or PyJsStrictEq(var.get('target'),var.get('BREAK'))):
                            return var.get('outer').get('root')
                        continue
                    var.put('target', var.get(u"this").callprop('__execute', var.get('visitor').get('enter'), var.get('element')))
                    if ((PyJsStrictNeq(var.get('target'),var.get('undefined')) and PyJsStrictNeq(var.get('target'),var.get('BREAK'))) and PyJsStrictNeq(var.get('target'),var.get('SKIP'))):
                        var.get('element').get('ref').callprop('replace', var.get('target'))
                        var.get('element').put('node', var.get('target'))
                    if (PyJsStrictEq(var.get(u"this").get('__state'),var.get('BREAK')) or PyJsStrictEq(var.get('target'),var.get('BREAK'))):
                        return var.get('outer').get('root')
                    var.put('node', var.get('element').get('node'))
                    if var.get('node').neg():
                        continue
                    var.get('worklist').callprop('push', var.get('sentinel'))
                    var.get('leavelist').callprop('push', var.get('element'))
                    if (PyJsStrictEq(var.get(u"this").get('__state'),var.get('SKIP')) or PyJsStrictEq(var.get('target'),var.get('SKIP'))):
                        continue
                    var.put('nodeType', (var.get('element').get('wrap') or var.get('node').get('type')))
                    var.put('candidates', var.get('VisitorKeys').get(var.get('nodeType')))
                    var.put('current', var.get('candidates').get('length'))
                    while (var.put('current', Js(1.0), '-')>=Js(0.0)):
                        var.put('key', var.get('candidates').get(var.get('current')))
                        var.put('candidate', var.get('node').get(var.get('key')))
                        if var.get('candidate').neg():
                            continue
                        if var.get('isArray')(var.get('candidate')).neg():
                            var.get('worklist').callprop('push', var.get('Element').create(var.get('candidate'), var.get('key'), var.get(u"null"), var.get('Reference').create(var.get('node'), var.get('key'))))
                            continue
                        var.put('current2', var.get('candidate').get('length'))
                        while (var.put('current2', Js(1.0), '-')>=Js(0.0)):
                            if var.get('candidate').get(var.get('current2')).neg():
                                continue
                            if (PyJsStrictEq(var.get('nodeType'),var.get('Syntax').get('ObjectExpression')) and PyJsStrictEq(Js('properties'),var.get('candidates').get(var.get('current')))):
                                var.put('element', var.get('Element').create(var.get('candidate').get(var.get('current2')), Js([var.get('key'), var.get('current2')]), Js('Property'), var.get('Reference').create(var.get('candidate'), var.get('current2'))))
                            else:
                                var.put('element', var.get('Element').create(var.get('candidate').get(var.get('current2')), Js([var.get('key'), var.get('current2')]), var.get(u"null"), var.get('Reference').create(var.get('candidate'), var.get('current2'))))
                            var.get('worklist').callprop('push', var.get('element'))
                return var.get('outer').get('root')
            PyJs_replace_1173_._set_name('replace')
            var.get('Controller').get('prototype').put('replace', PyJs_replace_1173_)
            pass
            pass
            pass
            pass
            var.get('exports').put('version', Js('1.5.1-dev'))
            var.get('exports').put('Syntax', var.get('Syntax'))
            var.get('exports').put('traverse', var.get('traverse'))
            var.get('exports').put('replace', var.get('replace'))
            var.get('exports').put('attachComments', var.get('attachComments'))
            var.get('exports').put('VisitorKeys', var.get('VisitorKeys'))
            var.get('exports').put('VisitorOption', var.get('VisitorOption'))
            var.get('exports').put('Controller', var.get('Controller'))
        PyJs_anonymous_1159_._set_name('anonymous')
        @Js
        def PyJs_anonymous_1177_(root, factory, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory'])
            Js('use strict')
            if (PyJsStrictEq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                var.get('define')(Js([Js('exports')]), var.get('factory'))
            else:
                if PyJsStrictNeq(var.get('exports',throw=False).typeof(),Js('undefined')):
                    var.get('factory')(var.get('exports'))
                else:
                    var.get('factory')(var.get('root').put('estraverse', Js({})))
        PyJs_anonymous_1177_._set_name('anonymous')
        PyJs_anonymous_1177_(var.get(u"this"), PyJs_anonymous_1159_)
    PyJs_anonymous_1158_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1178_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_1179_(process, this, arguments, var=var):
            var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
            var.registers(['process'])
            @Js
            def PyJs_anonymous_1180_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['normalizeStringPosix', 'assertPath', 'posix', '_format'])
                @Js
                def PyJsHoisted_assertPath_(path, this, arguments, var=var):
                    var = Scope({'path':path, 'this':this, 'arguments':arguments}, var)
                    var.registers(['path'])
                    if PyJsStrictNeq(var.get('path',throw=False).typeof(),Js('string')):
                        PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Path must be a string. Received ')+var.get('JSON').callprop('stringify', var.get('path')))))
                        raise PyJsTempException
                PyJsHoisted_assertPath_.func_name = 'assertPath'
                var.put('assertPath', PyJsHoisted_assertPath_)
                @Js
                def PyJsHoisted_normalizeStringPosix_(path, allowAboveRoot, this, arguments, var=var):
                    var = Scope({'path':path, 'allowAboveRoot':allowAboveRoot, 'this':this, 'arguments':arguments}, var)
                    var.registers(['code', 'lastSlash', 'i', 'path', 'dots', 'allowAboveRoot', 'lastSegmentLength', 'lastSlashIndex', 'res'])
                    var.put('res', Js(''))
                    var.put('lastSegmentLength', Js(0.0))
                    var.put('lastSlash', (-Js(1.0)))
                    var.put('dots', Js(0.0))
                    pass
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<=var.get('path').get('length')):
                        try:
                            if (var.get('i')<var.get('path').get('length')):
                                var.put('code', var.get('path').callprop('charCodeAt', var.get('i')))
                            else:
                                if PyJsStrictEq(var.get('code'),Js(47.0)):
                                    break
                                else:
                                    var.put('code', Js(47.0))
                            if PyJsStrictEq(var.get('code'),Js(47.0)):
                                if (PyJsStrictEq(var.get('lastSlash'),(var.get('i')-Js(1.0))) or PyJsStrictEq(var.get('dots'),Js(1.0))):
                                    pass
                                else:
                                    if (PyJsStrictNeq(var.get('lastSlash'),(var.get('i')-Js(1.0))) and PyJsStrictEq(var.get('dots'),Js(2.0))):
                                        if ((((var.get('res').get('length')<Js(2.0)) or PyJsStrictNeq(var.get('lastSegmentLength'),Js(2.0))) or PyJsStrictNeq(var.get('res').callprop('charCodeAt', (var.get('res').get('length')-Js(1.0))),Js(46.0))) or PyJsStrictNeq(var.get('res').callprop('charCodeAt', (var.get('res').get('length')-Js(2.0))),Js(46.0))):
                                            if (var.get('res').get('length')>Js(2.0)):
                                                var.put('lastSlashIndex', var.get('res').callprop('lastIndexOf', Js('/')))
                                                if PyJsStrictNeq(var.get('lastSlashIndex'),(var.get('res').get('length')-Js(1.0))):
                                                    if PyJsStrictEq(var.get('lastSlashIndex'),(-Js(1.0))):
                                                        var.put('res', Js(''))
                                                        var.put('lastSegmentLength', Js(0.0))
                                                    else:
                                                        var.put('res', var.get('res').callprop('slice', Js(0.0), var.get('lastSlashIndex')))
                                                        var.put('lastSegmentLength', ((var.get('res').get('length')-Js(1.0))-var.get('res').callprop('lastIndexOf', Js('/'))))
                                                    var.put('lastSlash', var.get('i'))
                                                    var.put('dots', Js(0.0))
                                                    continue
                                            else:
                                                if (PyJsStrictEq(var.get('res').get('length'),Js(2.0)) or PyJsStrictEq(var.get('res').get('length'),Js(1.0))):
                                                    var.put('res', Js(''))
                                                    var.put('lastSegmentLength', Js(0.0))
                                                    var.put('lastSlash', var.get('i'))
                                                    var.put('dots', Js(0.0))
                                                    continue
                                        if var.get('allowAboveRoot'):
                                            if (var.get('res').get('length')>Js(0.0)):
                                                var.put('res', Js('/..'), '+')
                                            else:
                                                var.put('res', Js('..'))
                                            var.put('lastSegmentLength', Js(2.0))
                                    else:
                                        if (var.get('res').get('length')>Js(0.0)):
                                            var.put('res', (Js('/')+var.get('path').callprop('slice', (var.get('lastSlash')+Js(1.0)), var.get('i'))), '+')
                                        else:
                                            var.put('res', var.get('path').callprop('slice', (var.get('lastSlash')+Js(1.0)), var.get('i')))
                                        var.put('lastSegmentLength', ((var.get('i')-var.get('lastSlash'))-Js(1.0)))
                                var.put('lastSlash', var.get('i'))
                                var.put('dots', Js(0.0))
                            else:
                                if (PyJsStrictEq(var.get('code'),Js(46.0)) and PyJsStrictNeq(var.get('dots'),(-Js(1.0)))):
                                    var.put('dots',Js(var.get('dots').to_number())+Js(1))
                                else:
                                    var.put('dots', (-Js(1.0)))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    return var.get('res')
                PyJsHoisted_normalizeStringPosix_.func_name = 'normalizeStringPosix'
                var.put('normalizeStringPosix', PyJsHoisted_normalizeStringPosix_)
                @Js
                def PyJsHoisted__format_(sep, pathObject, this, arguments, var=var):
                    var = Scope({'sep':sep, 'pathObject':pathObject, 'this':this, 'arguments':arguments}, var)
                    var.registers(['dir', 'pathObject', 'sep', 'base'])
                    var.put('dir', (var.get('pathObject').get('dir') or var.get('pathObject').get('root')))
                    var.put('base', (var.get('pathObject').get('base') or ((var.get('pathObject').get('name') or Js(''))+(var.get('pathObject').get('ext') or Js('')))))
                    if var.get('dir').neg():
                        return var.get('base')
                    if PyJsStrictEq(var.get('dir'),var.get('pathObject').get('root')):
                        return (var.get('dir')+var.get('base'))
                    return ((var.get('dir')+var.get('sep'))+var.get('base'))
                PyJsHoisted__format_.func_name = '_format'
                var.put('_format', PyJsHoisted__format_)
                Js('use strict')
                pass
                pass
                pass
                @Js
                def PyJs_resolve_1181_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'resolve':PyJs_resolve_1181_}, var)
                    var.registers(['cwd', 'i', 'resolvedAbsolute', 'path', 'resolvedPath'])
                    var.put('resolvedPath', Js(''))
                    var.put('resolvedAbsolute', Js(False))
                    pass
                    #for JS loop
                    var.put('i', (var.get('arguments').get('length')-Js(1.0)))
                    while ((var.get('i')>=(-Js(1.0))) and var.get('resolvedAbsolute').neg()):
                        try:
                            pass
                            if (var.get('i')>=Js(0.0)):
                                var.put('path', var.get('arguments').get(var.get('i')))
                            else:
                                if PyJsStrictEq(var.get('cwd'),var.get('undefined')):
                                    var.put('cwd', var.get('process').callprop('cwd'))
                                var.put('path', var.get('cwd'))
                            var.get('assertPath')(var.get('path'))
                            if PyJsStrictEq(var.get('path').get('length'),Js(0.0)):
                                continue
                            var.put('resolvedPath', ((var.get('path')+Js('/'))+var.get('resolvedPath')))
                            var.put('resolvedAbsolute', PyJsStrictEq(var.get('path').callprop('charCodeAt', Js(0.0)),Js(47.0)))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
                    var.put('resolvedPath', var.get('normalizeStringPosix')(var.get('resolvedPath'), var.get('resolvedAbsolute').neg()))
                    if var.get('resolvedAbsolute'):
                        if (var.get('resolvedPath').get('length')>Js(0.0)):
                            return (Js('/')+var.get('resolvedPath'))
                        else:
                            return Js('/')
                    else:
                        if (var.get('resolvedPath').get('length')>Js(0.0)):
                            return var.get('resolvedPath')
                        else:
                            return Js('.')
                PyJs_resolve_1181_._set_name('resolve')
                @Js
                def PyJs_normalize_1182_(path, this, arguments, var=var):
                    var = Scope({'path':path, 'this':this, 'arguments':arguments, 'normalize':PyJs_normalize_1182_}, var)
                    var.registers(['isAbsolute', 'trailingSeparator', 'path'])
                    var.get('assertPath')(var.get('path'))
                    if PyJsStrictEq(var.get('path').get('length'),Js(0.0)):
                        return Js('.')
                    var.put('isAbsolute', PyJsStrictEq(var.get('path').callprop('charCodeAt', Js(0.0)),Js(47.0)))
                    var.put('trailingSeparator', PyJsStrictEq(var.get('path').callprop('charCodeAt', (var.get('path').get('length')-Js(1.0))),Js(47.0)))
                    var.put('path', var.get('normalizeStringPosix')(var.get('path'), var.get('isAbsolute').neg()))
                    if (PyJsStrictEq(var.get('path').get('length'),Js(0.0)) and var.get('isAbsolute').neg()):
                        var.put('path', Js('.'))
                    if ((var.get('path').get('length')>Js(0.0)) and var.get('trailingSeparator')):
                        var.put('path', Js('/'), '+')
                    if var.get('isAbsolute'):
                        return (Js('/')+var.get('path'))
                    return var.get('path')
                PyJs_normalize_1182_._set_name('normalize')
                @Js
                def PyJs_isAbsolute_1183_(path, this, arguments, var=var):
                    var = Scope({'path':path, 'this':this, 'arguments':arguments, 'isAbsolute':PyJs_isAbsolute_1183_}, var)
                    var.registers(['path'])
                    var.get('assertPath')(var.get('path'))
                    return ((var.get('path').get('length')>Js(0.0)) and PyJsStrictEq(var.get('path').callprop('charCodeAt', Js(0.0)),Js(47.0)))
                PyJs_isAbsolute_1183_._set_name('isAbsolute')
                @Js
                def PyJs_join_1184_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'join':PyJs_join_1184_}, var)
                    var.registers(['joined', 'i', 'arg'])
                    if PyJsStrictEq(var.get('arguments').get('length'),Js(0.0)):
                        return Js('.')
                    pass
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('arguments').get('length')):
                        try:
                            var.put('arg', var.get('arguments').get(var.get('i')))
                            var.get('assertPath')(var.get('arg'))
                            if (var.get('arg').get('length')>Js(0.0)):
                                if PyJsStrictEq(var.get('joined'),var.get('undefined')):
                                    var.put('joined', var.get('arg'))
                                else:
                                    var.put('joined', (Js('/')+var.get('arg')), '+')
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    if PyJsStrictEq(var.get('joined'),var.get('undefined')):
                        return Js('.')
                    return var.get('posix').callprop('normalize', var.get('joined'))
                PyJs_join_1184_._set_name('join')
                @Js
                def PyJs_relative_1185_(PyJsArg_66726f6d_, to, this, arguments, var=var):
                    var = Scope({'from':PyJsArg_66726f6d_, 'to':to, 'this':this, 'arguments':arguments, 'relative':PyJs_relative_1185_}, var)
                    var.registers(['fromLen', 'fromStart', 'toCode', 'toEnd', 'length', 'toLen', 'i', 'fromCode', 'toStart', 'out', 'from', 'to', 'lastCommonSep', 'fromEnd'])
                    var.get('assertPath')(var.get('from'))
                    var.get('assertPath')(var.get('to'))
                    if PyJsStrictEq(var.get('from'),var.get('to')):
                        return Js('')
                    var.put('from', var.get('posix').callprop('resolve', var.get('from')))
                    var.put('to', var.get('posix').callprop('resolve', var.get('to')))
                    if PyJsStrictEq(var.get('from'),var.get('to')):
                        return Js('')
                    var.put('fromStart', Js(1.0))
                    #for JS loop
                    
                    while (var.get('fromStart')<var.get('from').get('length')):
                        try:
                            if PyJsStrictNeq(var.get('from').callprop('charCodeAt', var.get('fromStart')),Js(47.0)):
                                break
                        finally:
                                var.put('fromStart',Js(var.get('fromStart').to_number())+Js(1))
                    var.put('fromEnd', var.get('from').get('length'))
                    var.put('fromLen', (var.get('fromEnd')-var.get('fromStart')))
                    var.put('toStart', Js(1.0))
                    #for JS loop
                    
                    while (var.get('toStart')<var.get('to').get('length')):
                        try:
                            if PyJsStrictNeq(var.get('to').callprop('charCodeAt', var.get('toStart')),Js(47.0)):
                                break
                        finally:
                                var.put('toStart',Js(var.get('toStart').to_number())+Js(1))
                    var.put('toEnd', var.get('to').get('length'))
                    var.put('toLen', (var.get('toEnd')-var.get('toStart')))
                    var.put('length', (var.get('fromLen') if (var.get('fromLen')<var.get('toLen')) else var.get('toLen')))
                    var.put('lastCommonSep', (-Js(1.0)))
                    var.put('i', Js(0.0))
                    #for JS loop
                    
                    while (var.get('i')<=var.get('length')):
                        try:
                            if PyJsStrictEq(var.get('i'),var.get('length')):
                                if (var.get('toLen')>var.get('length')):
                                    if PyJsStrictEq(var.get('to').callprop('charCodeAt', (var.get('toStart')+var.get('i'))),Js(47.0)):
                                        return var.get('to').callprop('slice', ((var.get('toStart')+var.get('i'))+Js(1.0)))
                                    else:
                                        if PyJsStrictEq(var.get('i'),Js(0.0)):
                                            return var.get('to').callprop('slice', (var.get('toStart')+var.get('i')))
                                else:
                                    if (var.get('fromLen')>var.get('length')):
                                        if PyJsStrictEq(var.get('from').callprop('charCodeAt', (var.get('fromStart')+var.get('i'))),Js(47.0)):
                                            var.put('lastCommonSep', var.get('i'))
                                        else:
                                            if PyJsStrictEq(var.get('i'),Js(0.0)):
                                                var.put('lastCommonSep', Js(0.0))
                                break
                            var.put('fromCode', var.get('from').callprop('charCodeAt', (var.get('fromStart')+var.get('i'))))
                            var.put('toCode', var.get('to').callprop('charCodeAt', (var.get('toStart')+var.get('i'))))
                            if PyJsStrictNeq(var.get('fromCode'),var.get('toCode')):
                                break
                            else:
                                if PyJsStrictEq(var.get('fromCode'),Js(47.0)):
                                    var.put('lastCommonSep', var.get('i'))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    var.put('out', Js(''))
                    #for JS loop
                    var.put('i', ((var.get('fromStart')+var.get('lastCommonSep'))+Js(1.0)))
                    while (var.get('i')<=var.get('fromEnd')):
                        try:
                            if (PyJsStrictEq(var.get('i'),var.get('fromEnd')) or PyJsStrictEq(var.get('from').callprop('charCodeAt', var.get('i')),Js(47.0))):
                                if PyJsStrictEq(var.get('out').get('length'),Js(0.0)):
                                    var.put('out', Js('..'), '+')
                                else:
                                    var.put('out', Js('/..'), '+')
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    if (var.get('out').get('length')>Js(0.0)):
                        return (var.get('out')+var.get('to').callprop('slice', (var.get('toStart')+var.get('lastCommonSep'))))
                    else:
                        var.put('toStart', var.get('lastCommonSep'), '+')
                        if PyJsStrictEq(var.get('to').callprop('charCodeAt', var.get('toStart')),Js(47.0)):
                            var.put('toStart',Js(var.get('toStart').to_number())+Js(1))
                        return var.get('to').callprop('slice', var.get('toStart'))
                PyJs_relative_1185_._set_name('relative')
                @Js
                def PyJs__makeLong_1186_(path, this, arguments, var=var):
                    var = Scope({'path':path, 'this':this, 'arguments':arguments, '_makeLong':PyJs__makeLong_1186_}, var)
                    var.registers(['path'])
                    return var.get('path')
                PyJs__makeLong_1186_._set_name('_makeLong')
                @Js
                def PyJs_dirname_1187_(path, this, arguments, var=var):
                    var = Scope({'path':path, 'this':this, 'arguments':arguments, 'dirname':PyJs_dirname_1187_}, var)
                    var.registers(['code', 'matchedSlash', 'i', 'end', 'path', 'hasRoot'])
                    var.get('assertPath')(var.get('path'))
                    if PyJsStrictEq(var.get('path').get('length'),Js(0.0)):
                        return Js('.')
                    var.put('code', var.get('path').callprop('charCodeAt', Js(0.0)))
                    var.put('hasRoot', PyJsStrictEq(var.get('code'),Js(47.0)))
                    var.put('end', (-Js(1.0)))
                    var.put('matchedSlash', Js(True))
                    #for JS loop
                    var.put('i', (var.get('path').get('length')-Js(1.0)))
                    while (var.get('i')>=Js(1.0)):
                        try:
                            var.put('code', var.get('path').callprop('charCodeAt', var.get('i')))
                            if PyJsStrictEq(var.get('code'),Js(47.0)):
                                if var.get('matchedSlash').neg():
                                    var.put('end', var.get('i'))
                                    break
                            else:
                                var.put('matchedSlash', Js(False))
                        finally:
                                var.put('i',Js(var.get('i').to_number())-Js(1))
                    if PyJsStrictEq(var.get('end'),(-Js(1.0))):
                        return (Js('/') if var.get('hasRoot') else Js('.'))
                    if (var.get('hasRoot') and PyJsStrictEq(var.get('end'),Js(1.0))):
                        return Js('//')
                    return var.get('path').callprop('slice', Js(0.0), var.get('end'))
                PyJs_dirname_1187_._set_name('dirname')
                @Js
                def PyJs_basename_1188_(path, ext, this, arguments, var=var):
                    var = Scope({'path':path, 'ext':ext, 'this':this, 'arguments':arguments, 'basename':PyJs_basename_1188_}, var)
                    var.registers(['code', 'matchedSlash', 'i', 'end', 'path', 'start', 'extIdx', 'firstNonSlashEnd', 'ext'])
                    if (PyJsStrictNeq(var.get('ext'),var.get('undefined')) and PyJsStrictNeq(var.get('ext',throw=False).typeof(),Js('string'))):
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('"ext" argument must be a string')))
                        raise PyJsTempException
                    var.get('assertPath')(var.get('path'))
                    var.put('start', Js(0.0))
                    var.put('end', (-Js(1.0)))
                    var.put('matchedSlash', Js(True))
                    pass
                    if ((PyJsStrictNeq(var.get('ext'),var.get('undefined')) and (var.get('ext').get('length')>Js(0.0))) and (var.get('ext').get('length')<=var.get('path').get('length'))):
                        if (PyJsStrictEq(var.get('ext').get('length'),var.get('path').get('length')) and PyJsStrictEq(var.get('ext'),var.get('path'))):
                            return Js('')
                        var.put('extIdx', (var.get('ext').get('length')-Js(1.0)))
                        var.put('firstNonSlashEnd', (-Js(1.0)))
                        #for JS loop
                        var.put('i', (var.get('path').get('length')-Js(1.0)))
                        while (var.get('i')>=Js(0.0)):
                            try:
                                var.put('code', var.get('path').callprop('charCodeAt', var.get('i')))
                                if PyJsStrictEq(var.get('code'),Js(47.0)):
                                    if var.get('matchedSlash').neg():
                                        var.put('start', (var.get('i')+Js(1.0)))
                                        break
                                else:
                                    if PyJsStrictEq(var.get('firstNonSlashEnd'),(-Js(1.0))):
                                        var.put('matchedSlash', Js(False))
                                        var.put('firstNonSlashEnd', (var.get('i')+Js(1.0)))
                                    if (var.get('extIdx')>=Js(0.0)):
                                        if PyJsStrictEq(var.get('code'),var.get('ext').callprop('charCodeAt', var.get('extIdx'))):
                                            if PyJsStrictEq(var.put('extIdx',Js(var.get('extIdx').to_number())-Js(1)),(-Js(1.0))):
                                                var.put('end', var.get('i'))
                                        else:
                                            var.put('extIdx', (-Js(1.0)))
                                            var.put('end', var.get('firstNonSlashEnd'))
                            finally:
                                    var.put('i',Js(var.get('i').to_number())-Js(1))
                        if PyJsStrictEq(var.get('start'),var.get('end')):
                            var.put('end', var.get('firstNonSlashEnd'))
                        else:
                            if PyJsStrictEq(var.get('end'),(-Js(1.0))):
                                var.put('end', var.get('path').get('length'))
                        return var.get('path').callprop('slice', var.get('start'), var.get('end'))
                    else:
                        #for JS loop
                        var.put('i', (var.get('path').get('length')-Js(1.0)))
                        while (var.get('i')>=Js(0.0)):
                            try:
                                if PyJsStrictEq(var.get('path').callprop('charCodeAt', var.get('i')),Js(47.0)):
                                    if var.get('matchedSlash').neg():
                                        var.put('start', (var.get('i')+Js(1.0)))
                                        break
                                else:
                                    if PyJsStrictEq(var.get('end'),(-Js(1.0))):
                                        var.put('matchedSlash', Js(False))
                                        var.put('end', (var.get('i')+Js(1.0)))
                            finally:
                                    var.put('i',Js(var.get('i').to_number())-Js(1))
                        if PyJsStrictEq(var.get('end'),(-Js(1.0))):
                            return Js('')
                        return var.get('path').callprop('slice', var.get('start'), var.get('end'))
                PyJs_basename_1188_._set_name('basename')
                @Js
                def PyJs_extname_1189_(path, this, arguments, var=var):
                    var = Scope({'path':path, 'this':this, 'arguments':arguments, 'extname':PyJs_extname_1189_}, var)
                    var.registers(['code', 'matchedSlash', 'startDot', 'end', 'i', 'path', 'preDotState', 'startPart'])
                    var.get('assertPath')(var.get('path'))
                    var.put('startDot', (-Js(1.0)))
                    var.put('startPart', Js(0.0))
                    var.put('end', (-Js(1.0)))
                    var.put('matchedSlash', Js(True))
                    var.put('preDotState', Js(0.0))
                    #for JS loop
                    var.put('i', (var.get('path').get('length')-Js(1.0)))
                    while (var.get('i')>=Js(0.0)):
                        try:
                            var.put('code', var.get('path').callprop('charCodeAt', var.get('i')))
                            if PyJsStrictEq(var.get('code'),Js(47.0)):
                                if var.get('matchedSlash').neg():
                                    var.put('startPart', (var.get('i')+Js(1.0)))
                                    break
                                continue
                            if PyJsStrictEq(var.get('end'),(-Js(1.0))):
                                var.put('matchedSlash', Js(False))
                                var.put('end', (var.get('i')+Js(1.0)))
                            if PyJsStrictEq(var.get('code'),Js(46.0)):
                                if PyJsStrictEq(var.get('startDot'),(-Js(1.0))):
                                    var.put('startDot', var.get('i'))
                                else:
                                    if PyJsStrictNeq(var.get('preDotState'),Js(1.0)):
                                        var.put('preDotState', Js(1.0))
                            else:
                                if PyJsStrictNeq(var.get('startDot'),(-Js(1.0))):
                                    var.put('preDotState', (-Js(1.0)))
                        finally:
                                var.put('i',Js(var.get('i').to_number())-Js(1))
                    if (((PyJsStrictEq(var.get('startDot'),(-Js(1.0))) or PyJsStrictEq(var.get('end'),(-Js(1.0)))) or PyJsStrictEq(var.get('preDotState'),Js(0.0))) or ((PyJsStrictEq(var.get('preDotState'),Js(1.0)) and PyJsStrictEq(var.get('startDot'),(var.get('end')-Js(1.0)))) and PyJsStrictEq(var.get('startDot'),(var.get('startPart')+Js(1.0))))):
                        return Js('')
                    return var.get('path').callprop('slice', var.get('startDot'), var.get('end'))
                PyJs_extname_1189_._set_name('extname')
                @Js
                def PyJs_format_1190_(pathObject, this, arguments, var=var):
                    var = Scope({'pathObject':pathObject, 'this':this, 'arguments':arguments, 'format':PyJs_format_1190_}, var)
                    var.registers(['pathObject'])
                    if (PyJsStrictEq(var.get('pathObject'),var.get(u"null")) or PyJsStrictNeq((Js('undefined') if PyJsStrictEq(var.get('pathObject',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('pathObject'))),Js('object'))):
                        PyJsTempException = JsToPyException(var.get('TypeError').create((Js('The "pathObject" argument must be of type Object. Received type ')+(Js('undefined') if PyJsStrictEq(var.get('pathObject',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('pathObject'))))))
                        raise PyJsTempException
                    return var.get('_format')(Js('/'), var.get('pathObject'))
                PyJs_format_1190_._set_name('format')
                @Js
                def PyJs_parse_1191_(path, this, arguments, var=var):
                    var = Scope({'path':path, 'this':this, 'arguments':arguments, 'parse':PyJs_parse_1191_}, var)
                    var.registers(['isAbsolute', 'code', 'matchedSlash', 'startDot', 'end', 'i', 'path', 'start', 'ret', 'preDotState', 'startPart'])
                    var.get('assertPath')(var.get('path'))
                    var.put('ret', Js({'root':Js(''),'dir':Js(''),'base':Js(''),'ext':Js(''),'name':Js('')}))
                    if PyJsStrictEq(var.get('path').get('length'),Js(0.0)):
                        return var.get('ret')
                    var.put('code', var.get('path').callprop('charCodeAt', Js(0.0)))
                    var.put('isAbsolute', PyJsStrictEq(var.get('code'),Js(47.0)))
                    pass
                    if var.get('isAbsolute'):
                        var.get('ret').put('root', Js('/'))
                        var.put('start', Js(1.0))
                    else:
                        var.put('start', Js(0.0))
                    var.put('startDot', (-Js(1.0)))
                    var.put('startPart', Js(0.0))
                    var.put('end', (-Js(1.0)))
                    var.put('matchedSlash', Js(True))
                    var.put('i', (var.get('path').get('length')-Js(1.0)))
                    var.put('preDotState', Js(0.0))
                    #for JS loop
                    
                    while (var.get('i')>=var.get('start')):
                        try:
                            var.put('code', var.get('path').callprop('charCodeAt', var.get('i')))
                            if PyJsStrictEq(var.get('code'),Js(47.0)):
                                if var.get('matchedSlash').neg():
                                    var.put('startPart', (var.get('i')+Js(1.0)))
                                    break
                                continue
                            if PyJsStrictEq(var.get('end'),(-Js(1.0))):
                                var.put('matchedSlash', Js(False))
                                var.put('end', (var.get('i')+Js(1.0)))
                            if PyJsStrictEq(var.get('code'),Js(46.0)):
                                if PyJsStrictEq(var.get('startDot'),(-Js(1.0))):
                                    var.put('startDot', var.get('i'))
                                else:
                                    if PyJsStrictNeq(var.get('preDotState'),Js(1.0)):
                                        var.put('preDotState', Js(1.0))
                            else:
                                if PyJsStrictNeq(var.get('startDot'),(-Js(1.0))):
                                    var.put('preDotState', (-Js(1.0)))
                        finally:
                                var.put('i',Js(var.get('i').to_number())-Js(1))
                    if (((PyJsStrictEq(var.get('startDot'),(-Js(1.0))) or PyJsStrictEq(var.get('end'),(-Js(1.0)))) or PyJsStrictEq(var.get('preDotState'),Js(0.0))) or ((PyJsStrictEq(var.get('preDotState'),Js(1.0)) and PyJsStrictEq(var.get('startDot'),(var.get('end')-Js(1.0)))) and PyJsStrictEq(var.get('startDot'),(var.get('startPart')+Js(1.0))))):
                        if PyJsStrictNeq(var.get('end'),(-Js(1.0))):
                            if (PyJsStrictEq(var.get('startPart'),Js(0.0)) and var.get('isAbsolute')):
                                var.get('ret').put('base', var.get('ret').put('name', var.get('path').callprop('slice', Js(1.0), var.get('end'))))
                            else:
                                var.get('ret').put('base', var.get('ret').put('name', var.get('path').callprop('slice', var.get('startPart'), var.get('end'))))
                    else:
                        if (PyJsStrictEq(var.get('startPart'),Js(0.0)) and var.get('isAbsolute')):
                            var.get('ret').put('name', var.get('path').callprop('slice', Js(1.0), var.get('startDot')))
                            var.get('ret').put('base', var.get('path').callprop('slice', Js(1.0), var.get('end')))
                        else:
                            var.get('ret').put('name', var.get('path').callprop('slice', var.get('startPart'), var.get('startDot')))
                            var.get('ret').put('base', var.get('path').callprop('slice', var.get('startPart'), var.get('end')))
                        var.get('ret').put('ext', var.get('path').callprop('slice', var.get('startDot'), var.get('end')))
                    if (var.get('startPart')>Js(0.0)):
                        var.get('ret').put('dir', var.get('path').callprop('slice', Js(0.0), (var.get('startPart')-Js(1.0))))
                    else:
                        if var.get('isAbsolute'):
                            var.get('ret').put('dir', Js('/'))
                    return var.get('ret')
                PyJs_parse_1191_._set_name('parse')
                var.put('posix', Js({'resolve':PyJs_resolve_1181_,'normalize':PyJs_normalize_1182_,'isAbsolute':PyJs_isAbsolute_1183_,'join':PyJs_join_1184_,'relative':PyJs_relative_1185_,'_makeLong':PyJs__makeLong_1186_,'dirname':PyJs_dirname_1187_,'basename':PyJs_basename_1188_,'extname':PyJs_extname_1189_,'format':PyJs_format_1190_,'parse':PyJs_parse_1191_,'sep':Js('/'),'delimiter':Js(':'),'win32':var.get(u"null"),'posix':var.get(u"null")}))
                var.get('posix').put('posix', var.get('posix'))
                var.get('module').put('exports', var.get('posix'))
            PyJs_anonymous_1180_._set_name('anonymous')
            PyJs_anonymous_1180_.callprop('call', var.get(u"this"))
        PyJs_anonymous_1179_._set_name('anonymous')
        PyJs_anonymous_1179_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')))
    PyJs_anonymous_1178_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1192_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'noop', 'cleanUpNextTick', 'draining', 'Item', 'drainQueue', 'currentQueue', 'runClearTimeout', 'exports', 'module', 'queueIndex', 'queue', 'cachedSetTimeout', 'runTimeout', 'defaultSetTimout', 'defaultClearTimeout', 'cachedClearTimeout', 'process'])
        @Js
        def PyJsHoisted_defaultSetTimout_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            PyJsTempException = JsToPyException(var.get('Error').create(Js('setTimeout has not been defined')))
            raise PyJsTempException
        PyJsHoisted_defaultSetTimout_.func_name = 'defaultSetTimout'
        var.put('defaultSetTimout', PyJsHoisted_defaultSetTimout_)
        @Js
        def PyJsHoisted_defaultClearTimeout_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            PyJsTempException = JsToPyException(var.get('Error').create(Js('clearTimeout has not been defined')))
            raise PyJsTempException
        PyJsHoisted_defaultClearTimeout_.func_name = 'defaultClearTimeout'
        var.put('defaultClearTimeout', PyJsHoisted_defaultClearTimeout_)
        @Js
        def PyJsHoisted_runTimeout_(fun, this, arguments, var=var):
            var = Scope({'fun':fun, 'this':this, 'arguments':arguments}, var)
            var.registers(['fun'])
            if PyJsStrictEq(var.get('cachedSetTimeout'),var.get('setTimeout')):
                return var.get('setTimeout')(var.get('fun'), Js(0.0))
            if ((PyJsStrictEq(var.get('cachedSetTimeout'),var.get('defaultSetTimout')) or var.get('cachedSetTimeout').neg()) and var.get('setTimeout')):
                var.put('cachedSetTimeout', var.get('setTimeout'))
                return var.get('setTimeout')(var.get('fun'), Js(0.0))
            try:
                return var.get('cachedSetTimeout')(var.get('fun'), Js(0.0))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_4918382 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    try:
                        return var.get('cachedSetTimeout').callprop('call', var.get(u"null"), var.get('fun'), Js(0.0))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_16140334 = var.own.get('e')
                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                        try:
                            return var.get('cachedSetTimeout').callprop('call', var.get(u"this"), var.get('fun'), Js(0.0))
                        finally:
                            if PyJsHolder_65_16140334 is not None:
                                var.own['e'] = PyJsHolder_65_16140334
                            else:
                                del var.own['e']
                            del PyJsHolder_65_16140334
                finally:
                    if PyJsHolder_65_4918382 is not None:
                        var.own['e'] = PyJsHolder_65_4918382
                    else:
                        del var.own['e']
                    del PyJsHolder_65_4918382
        PyJsHoisted_runTimeout_.func_name = 'runTimeout'
        var.put('runTimeout', PyJsHoisted_runTimeout_)
        @Js
        def PyJsHoisted_runClearTimeout_(marker, this, arguments, var=var):
            var = Scope({'marker':marker, 'this':this, 'arguments':arguments}, var)
            var.registers(['marker'])
            if PyJsStrictEq(var.get('cachedClearTimeout'),var.get('clearTimeout')):
                return var.get('clearTimeout')(var.get('marker'))
            if ((PyJsStrictEq(var.get('cachedClearTimeout'),var.get('defaultClearTimeout')) or var.get('cachedClearTimeout').neg()) and var.get('clearTimeout')):
                var.put('cachedClearTimeout', var.get('clearTimeout'))
                return var.get('clearTimeout')(var.get('marker'))
            try:
                return var.get('cachedClearTimeout')(var.get('marker'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_73020129 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    try:
                        return var.get('cachedClearTimeout').callprop('call', var.get(u"null"), var.get('marker'))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_72817699 = var.own.get('e')
                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                        try:
                            return var.get('cachedClearTimeout').callprop('call', var.get(u"this"), var.get('marker'))
                        finally:
                            if PyJsHolder_65_72817699 is not None:
                                var.own['e'] = PyJsHolder_65_72817699
                            else:
                                del var.own['e']
                            del PyJsHolder_65_72817699
                finally:
                    if PyJsHolder_65_73020129 is not None:
                        var.own['e'] = PyJsHolder_65_73020129
                    else:
                        del var.own['e']
                    del PyJsHolder_65_73020129
        PyJsHoisted_runClearTimeout_.func_name = 'runClearTimeout'
        var.put('runClearTimeout', PyJsHoisted_runClearTimeout_)
        @Js
        def PyJsHoisted_cleanUpNextTick_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            if (var.get('draining').neg() or var.get('currentQueue').neg()):
                return var.get('undefined')
            var.put('draining', Js(False))
            if var.get('currentQueue').get('length'):
                var.put('queue', var.get('currentQueue').callprop('concat', var.get('queue')))
            else:
                var.put('queueIndex', (-Js(1.0)))
            if var.get('queue').get('length'):
                var.get('drainQueue')()
        PyJsHoisted_cleanUpNextTick_.func_name = 'cleanUpNextTick'
        var.put('cleanUpNextTick', PyJsHoisted_cleanUpNextTick_)
        @Js
        def PyJsHoisted_drainQueue_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['timeout', 'len'])
            if var.get('draining'):
                return var.get('undefined')
            var.put('timeout', var.get('runTimeout')(var.get('cleanUpNextTick')))
            var.put('draining', Js(True))
            var.put('len', var.get('queue').get('length'))
            while var.get('len'):
                var.put('currentQueue', var.get('queue'))
                var.put('queue', Js([]))
                while (var.put('queueIndex',Js(var.get('queueIndex').to_number())+Js(1))<var.get('len')):
                    if var.get('currentQueue'):
                        var.get('currentQueue').get(var.get('queueIndex')).callprop('run')
                var.put('queueIndex', (-Js(1.0)))
                var.put('len', var.get('queue').get('length'))
            var.put('currentQueue', var.get(u"null"))
            var.put('draining', Js(False))
            var.get('runClearTimeout')(var.get('timeout'))
        PyJsHoisted_drainQueue_.func_name = 'drainQueue'
        var.put('drainQueue', PyJsHoisted_drainQueue_)
        @Js
        def PyJsHoisted_Item_(fun, array, this, arguments, var=var):
            var = Scope({'fun':fun, 'array':array, 'this':this, 'arguments':arguments}, var)
            var.registers(['array', 'fun'])
            var.get(u"this").put('fun', var.get('fun'))
            var.get(u"this").put('array', var.get('array'))
        PyJsHoisted_Item_.func_name = 'Item'
        var.put('Item', PyJsHoisted_Item_)
        @Js
        def PyJsHoisted_noop_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            pass
        PyJsHoisted_noop_.func_name = 'noop'
        var.put('noop', PyJsHoisted_noop_)
        var.put('process', var.get('module').put('exports', Js({})))
        pass
        pass
        pass
        pass
        @Js
        def PyJs_anonymous_1193_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            try:
                if PyJsStrictEq(var.get('setTimeout',throw=False).typeof(),Js('function')):
                    var.put('cachedSetTimeout', var.get('setTimeout'))
                else:
                    var.put('cachedSetTimeout', var.get('defaultSetTimout'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_39342174 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('cachedSetTimeout', var.get('defaultSetTimout'))
                finally:
                    if PyJsHolder_65_39342174 is not None:
                        var.own['e'] = PyJsHolder_65_39342174
                    else:
                        del var.own['e']
                    del PyJsHolder_65_39342174
            try:
                if PyJsStrictEq(var.get('clearTimeout',throw=False).typeof(),Js('function')):
                    var.put('cachedClearTimeout', var.get('clearTimeout'))
                else:
                    var.put('cachedClearTimeout', var.get('defaultClearTimeout'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_85220714 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('cachedClearTimeout', var.get('defaultClearTimeout'))
                finally:
                    if PyJsHolder_65_85220714 is not None:
                        var.own['e'] = PyJsHolder_65_85220714
                    else:
                        del var.own['e']
                    del PyJsHolder_65_85220714
        PyJs_anonymous_1193_._set_name('anonymous')
        PyJs_anonymous_1193_()
        pass
        pass
        var.put('queue', Js([]))
        var.put('draining', Js(False))
        pass
        var.put('queueIndex', (-Js(1.0)))
        pass
        pass
        @Js
        def PyJs_anonymous_1194_(fun, this, arguments, var=var):
            var = Scope({'fun':fun, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'args', 'fun'])
            var.put('args', var.get('Array').create((var.get('arguments').get('length')-Js(1.0))))
            if (var.get('arguments').get('length')>Js(1.0)):
                #for JS loop
                var.put('i', Js(1.0))
                while (var.get('i')<var.get('arguments').get('length')):
                    try:
                        var.get('args').put((var.get('i')-Js(1.0)), var.get('arguments').get(var.get('i')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.get('queue').callprop('push', var.get('Item').create(var.get('fun'), var.get('args')))
            if (PyJsStrictEq(var.get('queue').get('length'),Js(1.0)) and var.get('draining').neg()):
                var.get('runTimeout')(var.get('drainQueue'))
        PyJs_anonymous_1194_._set_name('anonymous')
        var.get('process').put('nextTick', PyJs_anonymous_1194_)
        pass
        @Js
        def PyJs_anonymous_1195_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").get('fun').callprop('apply', var.get(u"null"), var.get(u"this").get('array'))
        PyJs_anonymous_1195_._set_name('anonymous')
        var.get('Item').get('prototype').put('run', PyJs_anonymous_1195_)
        var.get('process').put('title', Js('browser'))
        var.get('process').put('browser', Js(True))
        var.get('process').put('env', Js({}))
        var.get('process').put('argv', Js([]))
        var.get('process').put('version', Js(''))
        var.get('process').put('versions', Js({}))
        pass
        var.get('process').put('on', var.get('noop'))
        var.get('process').put('addListener', var.get('noop'))
        var.get('process').put('once', var.get('noop'))
        var.get('process').put('off', var.get('noop'))
        var.get('process').put('removeListener', var.get('noop'))
        var.get('process').put('removeAllListeners', var.get('noop'))
        var.get('process').put('emit', var.get('noop'))
        var.get('process').put('prependListener', var.get('noop'))
        var.get('process').put('prependOnceListener', var.get('noop'))
        @Js
        def PyJs_anonymous_1196_(name, this, arguments, var=var):
            var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
            var.registers(['name'])
            return Js([])
        PyJs_anonymous_1196_._set_name('anonymous')
        var.get('process').put('listeners', PyJs_anonymous_1196_)
        @Js
        def PyJs_anonymous_1197_(name, this, arguments, var=var):
            var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
            var.registers(['name'])
            PyJsTempException = JsToPyException(var.get('Error').create(Js('process.binding is not supported')))
            raise PyJsTempException
        PyJs_anonymous_1197_._set_name('anonymous')
        var.get('process').put('binding', PyJs_anonymous_1197_)
        @Js
        def PyJs_anonymous_1198_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return Js('/')
        PyJs_anonymous_1198_._set_name('anonymous')
        var.get('process').put('cwd', PyJs_anonymous_1198_)
        @Js
        def PyJs_anonymous_1199_(dir, this, arguments, var=var):
            var = Scope({'dir':dir, 'this':this, 'arguments':arguments}, var)
            var.registers(['dir'])
            PyJsTempException = JsToPyException(var.get('Error').create(Js('process.chdir is not supported')))
            raise PyJsTempException
        PyJs_anonymous_1199_._set_name('anonymous')
        var.get('process').put('chdir', PyJs_anonymous_1199_)
        @Js
        def PyJs_anonymous_1200_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return Js(0.0)
        PyJs_anonymous_1200_._set_name('anonymous')
        var.get('process').put('umask', PyJs_anonymous_1200_)
    PyJs_anonymous_1192_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1201_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_1202_(PyJsArg_676c6f62616c_, this, arguments, var=var):
            var = Scope({'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['global'])
            @Js
            def PyJs_anonymous_1203_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                def PyJs_LONG_1204_(var=var):
                    return (var.get('global') if PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('global',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('global'))),Js('object')) else (var.get('window') if PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('window',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('window'))),Js('object')) else (var.get('self') if PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('self',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('self'))),Js('object')) else var.get(u"this"))))
                @Js
                def PyJs_anonymous_1205_(PyJsArg_676c6f62616c_, this, arguments, var=var):
                    var = Scope({'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
                    var.registers(['GenStateSuspendedYield', '$Symbol', 'GeneratorFunction', 'inModule', 'wrap', 'doneResult', 'NativeIteratorPrototype', 'pushTryEntry', 'GenStateCompleted', 'asyncIteratorSymbol', 'maybeInvokeDelegate', 'values', 'AsyncIterator', 'makeInvokeMethod', 'undefined', 'runtime', 'resetTryEntry', 'defineIteratorMethods', 'iteratorSymbol', 'ContinueSentinel', 'toStringTagSymbol', 'tryCatch', 'IteratorPrototype', 'hasOwn', 'Context', 'global', 'Op', 'Generator', 'GenStateSuspendedStart', 'GeneratorFunctionPrototype', 'GenStateExecuting', 'Gp', 'getProto'])
                    @Js
                    def PyJsHoisted_wrap_(innerFn, outerFn, self, tryLocsList, this, arguments, var=var):
                        var = Scope({'innerFn':innerFn, 'outerFn':outerFn, 'self':self, 'tryLocsList':tryLocsList, 'this':this, 'arguments':arguments}, var)
                        var.registers(['tryLocsList', 'innerFn', 'generator', 'outerFn', 'self', 'context', 'protoGenerator'])
                        var.put('protoGenerator', (var.get('outerFn') if (var.get('outerFn') and var.get('outerFn').get('prototype').instanceof(var.get('Generator'))) else var.get('Generator')))
                        var.put('generator', var.get('Object').callprop('create', var.get('protoGenerator').get('prototype')))
                        var.put('context', var.get('Context').create((var.get('tryLocsList') or Js([]))))
                        var.get('generator').put('_invoke', var.get('makeInvokeMethod')(var.get('innerFn'), var.get('self'), var.get('context')))
                        return var.get('generator')
                    PyJsHoisted_wrap_.func_name = 'wrap'
                    var.put('wrap', PyJsHoisted_wrap_)
                    @Js
                    def PyJsHoisted_tryCatch_(fn, obj, arg, this, arguments, var=var):
                        var = Scope({'fn':fn, 'obj':obj, 'arg':arg, 'this':this, 'arguments':arguments}, var)
                        var.registers(['fn', 'arg', 'obj'])
                        try:
                            return Js({'type':Js('normal'),'arg':var.get('fn').callprop('call', var.get('obj'), var.get('arg'))})
                        except PyJsException as PyJsTempException:
                            PyJsHolder_657272_55349741 = var.own.get('err')
                            var.force_own_put('err', PyExceptionToJs(PyJsTempException))
                            try:
                                return Js({'type':Js('throw'),'arg':var.get('err')})
                            finally:
                                if PyJsHolder_657272_55349741 is not None:
                                    var.own['err'] = PyJsHolder_657272_55349741
                                else:
                                    del var.own['err']
                                del PyJsHolder_657272_55349741
                    PyJsHoisted_tryCatch_.func_name = 'tryCatch'
                    var.put('tryCatch', PyJsHoisted_tryCatch_)
                    @Js
                    def PyJsHoisted_Generator_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        pass
                    PyJsHoisted_Generator_.func_name = 'Generator'
                    var.put('Generator', PyJsHoisted_Generator_)
                    @Js
                    def PyJsHoisted_GeneratorFunction_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        pass
                    PyJsHoisted_GeneratorFunction_.func_name = 'GeneratorFunction'
                    var.put('GeneratorFunction', PyJsHoisted_GeneratorFunction_)
                    @Js
                    def PyJsHoisted_GeneratorFunctionPrototype_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        pass
                    PyJsHoisted_GeneratorFunctionPrototype_.func_name = 'GeneratorFunctionPrototype'
                    var.put('GeneratorFunctionPrototype', PyJsHoisted_GeneratorFunctionPrototype_)
                    @Js
                    def PyJsHoisted_defineIteratorMethods_(prototype, this, arguments, var=var):
                        var = Scope({'prototype':prototype, 'this':this, 'arguments':arguments}, var)
                        var.registers(['prototype'])
                        @Js
                        def PyJs_anonymous_1207_(method, this, arguments, var=var):
                            var = Scope({'method':method, 'this':this, 'arguments':arguments}, var)
                            var.registers(['method'])
                            @Js
                            def PyJs_anonymous_1208_(arg, this, arguments, var=var):
                                var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
                                var.registers(['arg'])
                                return var.get(u"this").callprop('_invoke', var.get('method'), var.get('arg'))
                            PyJs_anonymous_1208_._set_name('anonymous')
                            var.get('prototype').put(var.get('method'), PyJs_anonymous_1208_)
                        PyJs_anonymous_1207_._set_name('anonymous')
                        Js([Js('next'), Js('throw'), Js('return')]).callprop('forEach', PyJs_anonymous_1207_)
                    PyJsHoisted_defineIteratorMethods_.func_name = 'defineIteratorMethods'
                    var.put('defineIteratorMethods', PyJsHoisted_defineIteratorMethods_)
                    @Js
                    def PyJsHoisted_AsyncIterator_(generator, this, arguments, var=var):
                        var = Scope({'generator':generator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['enqueue', 'generator', 'invoke', 'previousPromise'])
                        @Js
                        def PyJsHoisted_invoke_(method, arg, resolve, reject, this, arguments, var=var):
                            var = Scope({'method':method, 'arg':arg, 'resolve':resolve, 'reject':reject, 'this':this, 'arguments':arguments}, var)
                            var.registers(['resolve', 'result', 'arg', 'reject', 'record', 'value', 'method'])
                            var.put('record', var.get('tryCatch')(var.get('generator').get(var.get('method')), var.get('generator'), var.get('arg')))
                            if PyJsStrictEq(var.get('record').get('type'),Js('throw')):
                                var.get('reject')(var.get('record').get('arg'))
                            else:
                                var.put('result', var.get('record').get('arg'))
                                var.put('value', var.get('result').get('value'))
                                if ((var.get('value') and PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('value',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('value'))),Js('object'))) and var.get('hasOwn').callprop('call', var.get('value'), Js('__await'))):
                                    @Js
                                    def PyJs_anonymous_1212_(value, this, arguments, var=var):
                                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['value'])
                                        var.get('invoke')(Js('next'), var.get('value'), var.get('resolve'), var.get('reject'))
                                    PyJs_anonymous_1212_._set_name('anonymous')
                                    @Js
                                    def PyJs_anonymous_1213_(err, this, arguments, var=var):
                                        var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['err'])
                                        var.get('invoke')(Js('throw'), var.get('err'), var.get('resolve'), var.get('reject'))
                                    PyJs_anonymous_1213_._set_name('anonymous')
                                    return var.get('Promise').callprop('resolve', var.get('value').get('__await')).callprop('then', PyJs_anonymous_1212_, PyJs_anonymous_1213_)
                                @Js
                                def PyJs_anonymous_1214_(unwrapped, this, arguments, var=var):
                                    var = Scope({'unwrapped':unwrapped, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['unwrapped'])
                                    var.get('result').put('value', var.get('unwrapped'))
                                    var.get('resolve')(var.get('result'))
                                PyJs_anonymous_1214_._set_name('anonymous')
                                return var.get('Promise').callprop('resolve', var.get('value')).callprop('then', PyJs_anonymous_1214_, var.get('reject'))
                        PyJsHoisted_invoke_.func_name = 'invoke'
                        var.put('invoke', PyJsHoisted_invoke_)
                        @Js
                        def PyJsHoisted_enqueue_(method, arg, this, arguments, var=var):
                            var = Scope({'method':method, 'arg':arg, 'this':this, 'arguments':arguments}, var)
                            var.registers(['arg', 'method', 'callInvokeWithMethodAndArg'])
                            @Js
                            def PyJsHoisted_callInvokeWithMethodAndArg_(this, arguments, var=var):
                                var = Scope({'this':this, 'arguments':arguments}, var)
                                var.registers([])
                                @Js
                                def PyJs_anonymous_1215_(resolve, reject, this, arguments, var=var):
                                    var = Scope({'resolve':resolve, 'reject':reject, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['resolve', 'reject'])
                                    var.get('invoke')(var.get('method'), var.get('arg'), var.get('resolve'), var.get('reject'))
                                PyJs_anonymous_1215_._set_name('anonymous')
                                return var.get('Promise').create(PyJs_anonymous_1215_)
                            PyJsHoisted_callInvokeWithMethodAndArg_.func_name = 'callInvokeWithMethodAndArg'
                            var.put('callInvokeWithMethodAndArg', PyJsHoisted_callInvokeWithMethodAndArg_)
                            pass
                            return var.put('previousPromise', (var.get('previousPromise').callprop('then', var.get('callInvokeWithMethodAndArg'), var.get('callInvokeWithMethodAndArg')) if var.get('previousPromise') else var.get('callInvokeWithMethodAndArg')()))
                        PyJsHoisted_enqueue_.func_name = 'enqueue'
                        var.put('enqueue', PyJsHoisted_enqueue_)
                        pass
                        if (PyJsStrictEq(var.get('_typeof')(var.get('global').get('process')),Js('object')) and var.get('global').get('process').get('domain')):
                            var.put('invoke', var.get('global').get('process').get('domain').callprop('bind', var.get('invoke')))
                        pass
                        pass
                        var.get(u"this").put('_invoke', var.get('enqueue'))
                    PyJsHoisted_AsyncIterator_.func_name = 'AsyncIterator'
                    var.put('AsyncIterator', PyJsHoisted_AsyncIterator_)
                    @Js
                    def PyJsHoisted_makeInvokeMethod_(innerFn, self, context, this, arguments, var=var):
                        var = Scope({'innerFn':innerFn, 'self':self, 'context':context, 'this':this, 'arguments':arguments}, var)
                        var.registers(['state', 'self', 'innerFn', 'context'])
                        var.put('state', var.get('GenStateSuspendedStart'))
                        @Js
                        def PyJs_invoke_1219_(method, arg, this, arguments, var=var):
                            var = Scope({'method':method, 'arg':arg, 'this':this, 'arguments':arguments, 'invoke':PyJs_invoke_1219_}, var)
                            var.registers(['record', 'delegateResult', 'arg', 'delegate', 'method'])
                            if PyJsStrictEq(var.get('state'),var.get('GenStateExecuting')):
                                PyJsTempException = JsToPyException(var.get('Error').create(Js('Generator is already running')))
                                raise PyJsTempException
                            if PyJsStrictEq(var.get('state'),var.get('GenStateCompleted')):
                                if PyJsStrictEq(var.get('method'),Js('throw')):
                                    PyJsTempException = JsToPyException(var.get('arg'))
                                    raise PyJsTempException
                                return var.get('doneResult')()
                            var.get('context').put('method', var.get('method'))
                            var.get('context').put('arg', var.get('arg'))
                            while Js(True):
                                var.put('delegate', var.get('context').get('delegate'))
                                if var.get('delegate'):
                                    var.put('delegateResult', var.get('maybeInvokeDelegate')(var.get('delegate'), var.get('context')))
                                    if var.get('delegateResult'):
                                        if PyJsStrictEq(var.get('delegateResult'),var.get('ContinueSentinel')):
                                            continue
                                        return var.get('delegateResult')
                                if PyJsStrictEq(var.get('context').get('method'),Js('next')):
                                    var.get('context').put('sent', var.get('context').put('_sent', var.get('context').get('arg')))
                                else:
                                    if PyJsStrictEq(var.get('context').get('method'),Js('throw')):
                                        if PyJsStrictEq(var.get('state'),var.get('GenStateSuspendedStart')):
                                            var.put('state', var.get('GenStateCompleted'))
                                            PyJsTempException = JsToPyException(var.get('context').get('arg'))
                                            raise PyJsTempException
                                        var.get('context').callprop('dispatchException', var.get('context').get('arg'))
                                    else:
                                        if PyJsStrictEq(var.get('context').get('method'),Js('return')):
                                            var.get('context').callprop('abrupt', Js('return'), var.get('context').get('arg'))
                                var.put('state', var.get('GenStateExecuting'))
                                var.put('record', var.get('tryCatch')(var.get('innerFn'), var.get('self'), var.get('context')))
                                if PyJsStrictEq(var.get('record').get('type'),Js('normal')):
                                    var.put('state', (var.get('GenStateCompleted') if var.get('context').get('done') else var.get('GenStateSuspendedYield')))
                                    if PyJsStrictEq(var.get('record').get('arg'),var.get('ContinueSentinel')):
                                        continue
                                    return Js({'value':var.get('record').get('arg'),'done':var.get('context').get('done')})
                                else:
                                    if PyJsStrictEq(var.get('record').get('type'),Js('throw')):
                                        var.put('state', var.get('GenStateCompleted'))
                                        var.get('context').put('method', Js('throw'))
                                        var.get('context').put('arg', var.get('record').get('arg'))
                        PyJs_invoke_1219_._set_name('invoke')
                        return PyJs_invoke_1219_
                    PyJsHoisted_makeInvokeMethod_.func_name = 'makeInvokeMethod'
                    var.put('makeInvokeMethod', PyJsHoisted_makeInvokeMethod_)
                    @Js
                    def PyJsHoisted_maybeInvokeDelegate_(delegate, context, this, arguments, var=var):
                        var = Scope({'delegate':delegate, 'context':context, 'this':this, 'arguments':arguments}, var)
                        var.registers(['info', 'delegate', 'context', 'record', 'method'])
                        var.put('method', var.get('delegate').get('iterator').get(var.get('context').get('method')))
                        if PyJsStrictEq(var.get('method'),var.get('undefined')):
                            var.get('context').put('delegate', var.get(u"null"))
                            if PyJsStrictEq(var.get('context').get('method'),Js('throw')):
                                if var.get('delegate').get('iterator').get('return'):
                                    var.get('context').put('method', Js('return'))
                                    var.get('context').put('arg', var.get('undefined'))
                                    var.get('maybeInvokeDelegate')(var.get('delegate'), var.get('context'))
                                    if PyJsStrictEq(var.get('context').get('method'),Js('throw')):
                                        return var.get('ContinueSentinel')
                                var.get('context').put('method', Js('throw'))
                                var.get('context').put('arg', var.get('TypeError').create(Js("The iterator does not provide a 'throw' method")))
                            return var.get('ContinueSentinel')
                        var.put('record', var.get('tryCatch')(var.get('method'), var.get('delegate').get('iterator'), var.get('context').get('arg')))
                        if PyJsStrictEq(var.get('record').get('type'),Js('throw')):
                            var.get('context').put('method', Js('throw'))
                            var.get('context').put('arg', var.get('record').get('arg'))
                            var.get('context').put('delegate', var.get(u"null"))
                            return var.get('ContinueSentinel')
                        var.put('info', var.get('record').get('arg'))
                        if var.get('info').neg():
                            var.get('context').put('method', Js('throw'))
                            var.get('context').put('arg', var.get('TypeError').create(Js('iterator result is not an object')))
                            var.get('context').put('delegate', var.get(u"null"))
                            return var.get('ContinueSentinel')
                        if var.get('info').get('done'):
                            var.get('context').put(var.get('delegate').get('resultName'), var.get('info').get('value'))
                            var.get('context').put('next', var.get('delegate').get('nextLoc'))
                            if PyJsStrictNeq(var.get('context').get('method'),Js('return')):
                                var.get('context').put('method', Js('next'))
                                var.get('context').put('arg', var.get('undefined'))
                        else:
                            return var.get('info')
                        var.get('context').put('delegate', var.get(u"null"))
                        return var.get('ContinueSentinel')
                    PyJsHoisted_maybeInvokeDelegate_.func_name = 'maybeInvokeDelegate'
                    var.put('maybeInvokeDelegate', PyJsHoisted_maybeInvokeDelegate_)
                    @Js
                    def PyJsHoisted_pushTryEntry_(locs, this, arguments, var=var):
                        var = Scope({'locs':locs, 'this':this, 'arguments':arguments}, var)
                        var.registers(['entry', 'locs'])
                        var.put('entry', Js({'tryLoc':var.get('locs').get('0')}))
                        if var.get('locs').contains(Js(1.0)):
                            var.get('entry').put('catchLoc', var.get('locs').get('1'))
                        if var.get('locs').contains(Js(2.0)):
                            var.get('entry').put('finallyLoc', var.get('locs').get('2'))
                            var.get('entry').put('afterLoc', var.get('locs').get('3'))
                        var.get(u"this").get('tryEntries').callprop('push', var.get('entry'))
                    PyJsHoisted_pushTryEntry_.func_name = 'pushTryEntry'
                    var.put('pushTryEntry', PyJsHoisted_pushTryEntry_)
                    @Js
                    def PyJsHoisted_resetTryEntry_(entry, this, arguments, var=var):
                        var = Scope({'entry':entry, 'this':this, 'arguments':arguments}, var)
                        var.registers(['entry', 'record'])
                        var.put('record', (var.get('entry').get('completion') or Js({})))
                        var.get('record').put('type', Js('normal'))
                        var.get('record').delete('arg')
                        var.get('entry').put('completion', var.get('record'))
                    PyJsHoisted_resetTryEntry_.func_name = 'resetTryEntry'
                    var.put('resetTryEntry', PyJsHoisted_resetTryEntry_)
                    @Js
                    def PyJsHoisted_Context_(tryLocsList, this, arguments, var=var):
                        var = Scope({'tryLocsList':tryLocsList, 'this':this, 'arguments':arguments}, var)
                        var.registers(['tryLocsList'])
                        var.get(u"this").put('tryEntries', Js([Js({'tryLoc':Js('root')})]))
                        var.get('tryLocsList').callprop('forEach', var.get('pushTryEntry'), var.get(u"this"))
                        var.get(u"this").callprop('reset', Js(True))
                    PyJsHoisted_Context_.func_name = 'Context'
                    var.put('Context', PyJsHoisted_Context_)
                    @Js
                    def PyJsHoisted_values_(iterable, this, arguments, var=var):
                        var = Scope({'iterable':iterable, 'this':this, 'arguments':arguments}, var)
                        var.registers(['i', 'iterable', 'iteratorMethod', 'next'])
                        if var.get('iterable'):
                            var.put('iteratorMethod', var.get('iterable').get(var.get('iteratorSymbol')))
                            if var.get('iteratorMethod'):
                                return var.get('iteratorMethod').callprop('call', var.get('iterable'))
                            if PyJsStrictEq(var.get('iterable').get('next').typeof(),Js('function')):
                                return var.get('iterable')
                            if var.get('isNaN')(var.get('iterable').get('length')).neg():
                                var.put('i', (-Js(1.0)))
                                @Js
                                def PyJs_next_1224_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments, 'next':PyJs_next_1224_}, var)
                                    var.registers([])
                                    while (var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('iterable').get('length')):
                                        if var.get('hasOwn').callprop('call', var.get('iterable'), var.get('i')):
                                            var.get('next').put('value', var.get('iterable').get(var.get('i')))
                                            var.get('next').put('done', Js(False))
                                            return var.get('next')
                                    var.get('next').put('value', var.get('undefined'))
                                    var.get('next').put('done', Js(True))
                                    return var.get('next')
                                PyJs_next_1224_._set_name('next')
                                var.put('next', PyJs_next_1224_)
                                return var.get('next').put('next', var.get('next'))
                        return Js({'next':var.get('doneResult')})
                    PyJsHoisted_values_.func_name = 'values'
                    var.put('values', PyJsHoisted_values_)
                    @Js
                    def PyJsHoisted_doneResult_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return Js({'value':var.get('undefined'),'done':Js(True)})
                    PyJsHoisted_doneResult_.func_name = 'doneResult'
                    var.put('doneResult', PyJsHoisted_doneResult_)
                    Js('use strict')
                    var.put('Op', var.get('Object').get('prototype'))
                    var.put('hasOwn', var.get('Op').get('hasOwnProperty'))
                    pass
                    var.put('$Symbol', (var.get('Symbol') if PyJsStrictEq(var.get('Symbol',throw=False).typeof(),Js('function')) else Js({})))
                    var.put('iteratorSymbol', (var.get('$Symbol').get('iterator') or Js('@@iterator')))
                    var.put('asyncIteratorSymbol', (var.get('$Symbol').get('asyncIterator') or Js('@@asyncIterator')))
                    var.put('toStringTagSymbol', (var.get('$Symbol').get('toStringTag') or Js('@@toStringTag')))
                    var.put('inModule', PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('module',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('module'))),Js('object')))
                    var.put('runtime', var.get('global').get('regeneratorRuntime'))
                    if var.get('runtime'):
                        if var.get('inModule'):
                            var.get('module').put('exports', var.get('runtime'))
                        return var.get('undefined')
                    var.put('runtime', var.get('global').put('regeneratorRuntime', (var.get('module').get('exports') if var.get('inModule') else Js({}))))
                    pass
                    var.get('runtime').put('wrap', var.get('wrap'))
                    pass
                    var.put('GenStateSuspendedStart', Js('suspendedStart'))
                    var.put('GenStateSuspendedYield', Js('suspendedYield'))
                    var.put('GenStateExecuting', Js('executing'))
                    var.put('GenStateCompleted', Js('completed'))
                    var.put('ContinueSentinel', Js({}))
                    pass
                    pass
                    pass
                    var.put('IteratorPrototype', Js({}))
                    @Js
                    def PyJs_anonymous_1206_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get(u"this")
                    PyJs_anonymous_1206_._set_name('anonymous')
                    var.get('IteratorPrototype').put(var.get('iteratorSymbol'), PyJs_anonymous_1206_)
                    var.put('getProto', var.get('Object').get('getPrototypeOf'))
                    var.put('NativeIteratorPrototype', (var.get('getProto') and var.get('getProto')(var.get('getProto')(var.get('values')(Js([]))))))
                    if ((var.get('NativeIteratorPrototype') and PyJsStrictNeq(var.get('NativeIteratorPrototype'),var.get('Op'))) and var.get('hasOwn').callprop('call', var.get('NativeIteratorPrototype'), var.get('iteratorSymbol'))):
                        var.put('IteratorPrototype', var.get('NativeIteratorPrototype'))
                    var.put('Gp', var.get('GeneratorFunctionPrototype').put('prototype', var.get('Generator').put('prototype', var.get('Object').callprop('create', var.get('IteratorPrototype')))))
                    var.get('GeneratorFunction').put('prototype', var.get('Gp').put('constructor', var.get('GeneratorFunctionPrototype')))
                    var.get('GeneratorFunctionPrototype').put('constructor', var.get('GeneratorFunction'))
                    var.get('GeneratorFunctionPrototype').put(var.get('toStringTagSymbol'), var.get('GeneratorFunction').put('displayName', Js('GeneratorFunction')))
                    pass
                    @Js
                    def PyJs_anonymous_1209_(genFun, this, arguments, var=var):
                        var = Scope({'genFun':genFun, 'this':this, 'arguments':arguments}, var)
                        var.registers(['ctor', 'genFun'])
                        var.put('ctor', (PyJsStrictEq(var.get('genFun',throw=False).typeof(),Js('function')) and var.get('genFun').get('constructor')))
                        return ((PyJsStrictEq(var.get('ctor'),var.get('GeneratorFunction')) or PyJsStrictEq((var.get('ctor').get('displayName') or var.get('ctor').get('name')),Js('GeneratorFunction'))) if var.get('ctor') else Js(False))
                    PyJs_anonymous_1209_._set_name('anonymous')
                    var.get('runtime').put('isGeneratorFunction', PyJs_anonymous_1209_)
                    @Js
                    def PyJs_anonymous_1210_(genFun, this, arguments, var=var):
                        var = Scope({'genFun':genFun, 'this':this, 'arguments':arguments}, var)
                        var.registers(['genFun'])
                        if var.get('Object').get('setPrototypeOf'):
                            var.get('Object').callprop('setPrototypeOf', var.get('genFun'), var.get('GeneratorFunctionPrototype'))
                        else:
                            var.get('genFun').put('__proto__', var.get('GeneratorFunctionPrototype'))
                            if var.get('genFun').contains(var.get('toStringTagSymbol')).neg():
                                var.get('genFun').put(var.get('toStringTagSymbol'), Js('GeneratorFunction'))
                        var.get('genFun').put('prototype', var.get('Object').callprop('create', var.get('Gp')))
                        return var.get('genFun')
                    PyJs_anonymous_1210_._set_name('anonymous')
                    var.get('runtime').put('mark', PyJs_anonymous_1210_)
                    @Js
                    def PyJs_anonymous_1211_(arg, this, arguments, var=var):
                        var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
                        var.registers(['arg'])
                        return Js({'__await':var.get('arg')})
                    PyJs_anonymous_1211_._set_name('anonymous')
                    var.get('runtime').put('awrap', PyJs_anonymous_1211_)
                    pass
                    var.get('defineIteratorMethods')(var.get('AsyncIterator').get('prototype'))
                    @Js
                    def PyJs_anonymous_1216_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get(u"this")
                    PyJs_anonymous_1216_._set_name('anonymous')
                    var.get('AsyncIterator').get('prototype').put(var.get('asyncIteratorSymbol'), PyJs_anonymous_1216_)
                    var.get('runtime').put('AsyncIterator', var.get('AsyncIterator'))
                    @Js
                    def PyJs_anonymous_1217_(innerFn, outerFn, self, tryLocsList, this, arguments, var=var):
                        var = Scope({'innerFn':innerFn, 'outerFn':outerFn, 'self':self, 'tryLocsList':tryLocsList, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iter', 'tryLocsList', 'innerFn', 'self', 'outerFn'])
                        var.put('iter', var.get('AsyncIterator').create(var.get('wrap')(var.get('innerFn'), var.get('outerFn'), var.get('self'), var.get('tryLocsList'))))
                        @Js
                        def PyJs_anonymous_1218_(result, this, arguments, var=var):
                            var = Scope({'result':result, 'this':this, 'arguments':arguments}, var)
                            var.registers(['result'])
                            return (var.get('result').get('value') if var.get('result').get('done') else var.get('iter').callprop('next'))
                        PyJs_anonymous_1218_._set_name('anonymous')
                        return (var.get('iter') if var.get('runtime').callprop('isGeneratorFunction', var.get('outerFn')) else var.get('iter').callprop('next').callprop('then', PyJs_anonymous_1218_))
                    PyJs_anonymous_1217_._set_name('anonymous')
                    var.get('runtime').put('async', PyJs_anonymous_1217_)
                    pass
                    pass
                    var.get('defineIteratorMethods')(var.get('Gp'))
                    var.get('Gp').put(var.get('toStringTagSymbol'), Js('Generator'))
                    @Js
                    def PyJs_anonymous_1220_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get(u"this")
                    PyJs_anonymous_1220_._set_name('anonymous')
                    var.get('Gp').put(var.get('iteratorSymbol'), PyJs_anonymous_1220_)
                    @Js
                    def PyJs_anonymous_1221_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return Js('[object Generator]')
                    PyJs_anonymous_1221_._set_name('anonymous')
                    var.get('Gp').put('toString', PyJs_anonymous_1221_)
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_1222_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'key', 'keys'])
                        var.put('keys', Js([]))
                        for PyJsTemp in var.get('object'):
                            var.put('key', PyJsTemp)
                            var.get('keys').callprop('push', var.get('key'))
                        var.get('keys').callprop('reverse')
                        @Js
                        def PyJs_next_1223_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'next':PyJs_next_1223_}, var)
                            var.registers(['key'])
                            while var.get('keys').get('length'):
                                var.put('key', var.get('keys').callprop('pop'))
                                if var.get('object').contains(var.get('key')):
                                    var.get('next').put('value', var.get('key'))
                                    var.get('next').put('done', Js(False))
                                    return var.get('next')
                            var.get('next').put('done', Js(True))
                            return var.get('next')
                        PyJs_next_1223_._set_name('next')
                        return PyJs_next_1223_
                    PyJs_anonymous_1222_._set_name('anonymous')
                    var.get('runtime').put('keys', PyJs_anonymous_1222_)
                    pass
                    var.get('runtime').put('values', var.get('values'))
                    pass
                    @Js
                    def PyJs_reset_1225_(skipTempReset, this, arguments, var=var):
                        var = Scope({'skipTempReset':skipTempReset, 'this':this, 'arguments':arguments, 'reset':PyJs_reset_1225_}, var)
                        var.registers(['name', 'skipTempReset'])
                        var.get(u"this").put('prev', Js(0.0))
                        var.get(u"this").put('next', Js(0.0))
                        var.get(u"this").put('sent', var.get(u"this").put('_sent', var.get('undefined')))
                        var.get(u"this").put('done', Js(False))
                        var.get(u"this").put('delegate', var.get(u"null"))
                        var.get(u"this").put('method', Js('next'))
                        var.get(u"this").put('arg', var.get('undefined'))
                        var.get(u"this").get('tryEntries').callprop('forEach', var.get('resetTryEntry'))
                        if var.get('skipTempReset').neg():
                            for PyJsTemp in var.get(u"this"):
                                var.put('name', PyJsTemp)
                                if ((PyJsStrictEq(var.get('name').callprop('charAt', Js(0.0)),Js('t')) and var.get('hasOwn').callprop('call', var.get(u"this"), var.get('name'))) and var.get('isNaN')((+var.get('name').callprop('slice', Js(1.0)))).neg()):
                                    var.get(u"this").put(var.get('name'), var.get('undefined'))
                    PyJs_reset_1225_._set_name('reset')
                    @Js
                    def PyJs_stop_1226_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'stop':PyJs_stop_1226_}, var)
                        var.registers(['rootEntry', 'rootRecord'])
                        var.get(u"this").put('done', Js(True))
                        var.put('rootEntry', var.get(u"this").get('tryEntries').get('0'))
                        var.put('rootRecord', var.get('rootEntry').get('completion'))
                        if PyJsStrictEq(var.get('rootRecord').get('type'),Js('throw')):
                            PyJsTempException = JsToPyException(var.get('rootRecord').get('arg'))
                            raise PyJsTempException
                        return var.get(u"this").get('rval')
                    PyJs_stop_1226_._set_name('stop')
                    @Js
                    def PyJs_dispatchException_1227_(exception, this, arguments, var=var):
                        var = Scope({'exception':exception, 'this':this, 'arguments':arguments, 'dispatchException':PyJs_dispatchException_1227_}, var)
                        var.registers(['record', 'i', 'exception', 'hasCatch', 'hasFinally', 'context', 'entry', 'handle'])
                        @Js
                        def PyJsHoisted_handle_(loc, caught, this, arguments, var=var):
                            var = Scope({'loc':loc, 'caught':caught, 'this':this, 'arguments':arguments}, var)
                            var.registers(['loc', 'caught'])
                            var.get('record').put('type', Js('throw'))
                            var.get('record').put('arg', var.get('exception'))
                            var.get('context').put('next', var.get('loc'))
                            if var.get('caught'):
                                var.get('context').put('method', Js('next'))
                                var.get('context').put('arg', var.get('undefined'))
                            return var.get('caught').neg().neg()
                        PyJsHoisted_handle_.func_name = 'handle'
                        var.put('handle', PyJsHoisted_handle_)
                        if var.get(u"this").get('done'):
                            PyJsTempException = JsToPyException(var.get('exception'))
                            raise PyJsTempException
                        var.put('context', var.get(u"this"))
                        pass
                        #for JS loop
                        var.put('i', (var.get(u"this").get('tryEntries').get('length')-Js(1.0)))
                        while (var.get('i')>=Js(0.0)):
                            try:
                                var.put('entry', var.get(u"this").get('tryEntries').get(var.get('i')))
                                var.put('record', var.get('entry').get('completion'))
                                if PyJsStrictEq(var.get('entry').get('tryLoc'),Js('root')):
                                    return var.get('handle')(Js('end'))
                                if (var.get('entry').get('tryLoc')<=var.get(u"this").get('prev')):
                                    var.put('hasCatch', var.get('hasOwn').callprop('call', var.get('entry'), Js('catchLoc')))
                                    var.put('hasFinally', var.get('hasOwn').callprop('call', var.get('entry'), Js('finallyLoc')))
                                    if (var.get('hasCatch') and var.get('hasFinally')):
                                        if (var.get(u"this").get('prev')<var.get('entry').get('catchLoc')):
                                            return var.get('handle')(var.get('entry').get('catchLoc'), Js(True))
                                        else:
                                            if (var.get(u"this").get('prev')<var.get('entry').get('finallyLoc')):
                                                return var.get('handle')(var.get('entry').get('finallyLoc'))
                                    else:
                                        if var.get('hasCatch'):
                                            if (var.get(u"this").get('prev')<var.get('entry').get('catchLoc')):
                                                return var.get('handle')(var.get('entry').get('catchLoc'), Js(True))
                                        else:
                                            if var.get('hasFinally'):
                                                if (var.get(u"this").get('prev')<var.get('entry').get('finallyLoc')):
                                                    return var.get('handle')(var.get('entry').get('finallyLoc'))
                                            else:
                                                PyJsTempException = JsToPyException(var.get('Error').create(Js('try statement without catch or finally')))
                                                raise PyJsTempException
                            finally:
                                    var.put('i',Js(var.get('i').to_number())-Js(1))
                    PyJs_dispatchException_1227_._set_name('dispatchException')
                    @Js
                    def PyJs_abrupt_1228_(type, arg, this, arguments, var=var):
                        var = Scope({'type':type, 'arg':arg, 'this':this, 'arguments':arguments, 'abrupt':PyJs_abrupt_1228_}, var)
                        var.registers(['record', 'finallyEntry', 'i', 'type', 'arg', 'entry'])
                        #for JS loop
                        var.put('i', (var.get(u"this").get('tryEntries').get('length')-Js(1.0)))
                        while (var.get('i')>=Js(0.0)):
                            try:
                                var.put('entry', var.get(u"this").get('tryEntries').get(var.get('i')))
                                if (((var.get('entry').get('tryLoc')<=var.get(u"this").get('prev')) and var.get('hasOwn').callprop('call', var.get('entry'), Js('finallyLoc'))) and (var.get(u"this").get('prev')<var.get('entry').get('finallyLoc'))):
                                    var.put('finallyEntry', var.get('entry'))
                                    break
                            finally:
                                    var.put('i',Js(var.get('i').to_number())-Js(1))
                        if (((var.get('finallyEntry') and (PyJsStrictEq(var.get('type'),Js('break')) or PyJsStrictEq(var.get('type'),Js('continue')))) and (var.get('finallyEntry').get('tryLoc')<=var.get('arg'))) and (var.get('arg')<=var.get('finallyEntry').get('finallyLoc'))):
                            var.put('finallyEntry', var.get(u"null"))
                        var.put('record', (var.get('finallyEntry').get('completion') if var.get('finallyEntry') else Js({})))
                        var.get('record').put('type', var.get('type'))
                        var.get('record').put('arg', var.get('arg'))
                        if var.get('finallyEntry'):
                            var.get(u"this").put('method', Js('next'))
                            var.get(u"this").put('next', var.get('finallyEntry').get('finallyLoc'))
                            return var.get('ContinueSentinel')
                        return var.get(u"this").callprop('complete', var.get('record'))
                    PyJs_abrupt_1228_._set_name('abrupt')
                    @Js
                    def PyJs_complete_1229_(record, afterLoc, this, arguments, var=var):
                        var = Scope({'record':record, 'afterLoc':afterLoc, 'this':this, 'arguments':arguments, 'complete':PyJs_complete_1229_}, var)
                        var.registers(['record', 'afterLoc'])
                        if PyJsStrictEq(var.get('record').get('type'),Js('throw')):
                            PyJsTempException = JsToPyException(var.get('record').get('arg'))
                            raise PyJsTempException
                        if (PyJsStrictEq(var.get('record').get('type'),Js('break')) or PyJsStrictEq(var.get('record').get('type'),Js('continue'))):
                            var.get(u"this").put('next', var.get('record').get('arg'))
                        else:
                            if PyJsStrictEq(var.get('record').get('type'),Js('return')):
                                var.get(u"this").put('rval', var.get(u"this").put('arg', var.get('record').get('arg')))
                                var.get(u"this").put('method', Js('return'))
                                var.get(u"this").put('next', Js('end'))
                            else:
                                if (PyJsStrictEq(var.get('record').get('type'),Js('normal')) and var.get('afterLoc')):
                                    var.get(u"this").put('next', var.get('afterLoc'))
                        return var.get('ContinueSentinel')
                    PyJs_complete_1229_._set_name('complete')
                    @Js
                    def PyJs_finish_1230_(finallyLoc, this, arguments, var=var):
                        var = Scope({'finallyLoc':finallyLoc, 'this':this, 'arguments':arguments, 'finish':PyJs_finish_1230_}, var)
                        var.registers(['entry', 'i', 'finallyLoc'])
                        #for JS loop
                        var.put('i', (var.get(u"this").get('tryEntries').get('length')-Js(1.0)))
                        while (var.get('i')>=Js(0.0)):
                            try:
                                var.put('entry', var.get(u"this").get('tryEntries').get(var.get('i')))
                                if PyJsStrictEq(var.get('entry').get('finallyLoc'),var.get('finallyLoc')):
                                    var.get(u"this").callprop('complete', var.get('entry').get('completion'), var.get('entry').get('afterLoc'))
                                    var.get('resetTryEntry')(var.get('entry'))
                                    return var.get('ContinueSentinel')
                            finally:
                                    var.put('i',Js(var.get('i').to_number())-Js(1))
                    PyJs_finish_1230_._set_name('finish')
                    @Js
                    def PyJs__catch_1231_(tryLoc, this, arguments, var=var):
                        var = Scope({'tryLoc':tryLoc, 'this':this, 'arguments':arguments, '_catch':PyJs__catch_1231_}, var)
                        var.registers(['record', 'tryLoc', 'i', 'thrown', 'entry'])
                        #for JS loop
                        var.put('i', (var.get(u"this").get('tryEntries').get('length')-Js(1.0)))
                        while (var.get('i')>=Js(0.0)):
                            try:
                                var.put('entry', var.get(u"this").get('tryEntries').get(var.get('i')))
                                if PyJsStrictEq(var.get('entry').get('tryLoc'),var.get('tryLoc')):
                                    var.put('record', var.get('entry').get('completion'))
                                    if PyJsStrictEq(var.get('record').get('type'),Js('throw')):
                                        var.put('thrown', var.get('record').get('arg'))
                                        var.get('resetTryEntry')(var.get('entry'))
                                    return var.get('thrown')
                            finally:
                                    var.put('i',Js(var.get('i').to_number())-Js(1))
                        PyJsTempException = JsToPyException(var.get('Error').create(Js('illegal catch attempt')))
                        raise PyJsTempException
                    PyJs__catch_1231_._set_name('_catch')
                    @Js
                    def PyJs_delegateYield_1232_(iterable, resultName, nextLoc, this, arguments, var=var):
                        var = Scope({'iterable':iterable, 'resultName':resultName, 'nextLoc':nextLoc, 'this':this, 'arguments':arguments, 'delegateYield':PyJs_delegateYield_1232_}, var)
                        var.registers(['resultName', 'iterable', 'nextLoc'])
                        var.get(u"this").put('delegate', Js({'iterator':var.get('values')(var.get('iterable')),'resultName':var.get('resultName'),'nextLoc':var.get('nextLoc')}))
                        if PyJsStrictEq(var.get(u"this").get('method'),Js('next')):
                            var.get(u"this").put('arg', var.get('undefined'))
                        return var.get('ContinueSentinel')
                    PyJs_delegateYield_1232_._set_name('delegateYield')
                    var.get('Context').put('prototype', Js({'constructor':var.get('Context'),'reset':PyJs_reset_1225_,'stop':PyJs_stop_1226_,'dispatchException':PyJs_dispatchException_1227_,'abrupt':PyJs_abrupt_1228_,'complete':PyJs_complete_1229_,'finish':PyJs_finish_1230_,'catch':PyJs__catch_1231_,'delegateYield':PyJs_delegateYield_1232_}))
                PyJs_anonymous_1205_._set_name('anonymous')
                PyJs_anonymous_1205_(PyJs_LONG_1204_()).neg()
            PyJs_anonymous_1203_._set_name('anonymous')
            PyJs_anonymous_1203_.callprop('call', var.get(u"this"))
        PyJs_anonymous_1202_._set_name('anonymous')
        PyJs_anonymous_1202_.callprop('call', var.get(u"this"), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else Js({})))))
    PyJs_anonymous_1201_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1233_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['r'])
        @Js
        def PyJsHoisted_r_(e, n, t, this, arguments, var=var):
            var = Scope({'e':e, 'n':n, 't':t, 'this':this, 'arguments':arguments}, var)
            var.registers(['n', 'u', 'i', 't', 'o', 'e'])
            @Js
            def PyJsHoisted_o_(i, f, this, arguments, var=var):
                var = Scope({'i':i, 'f':f, 'this':this, 'arguments':arguments}, var)
                var.registers(['f', 'i', 'a', 'p', 'c'])
                if var.get('n').get(var.get('i')).neg():
                    if var.get('e').get(var.get('i')).neg():
                        var.put('c', ((Js('function')==var.get('require',throw=False).typeof()) and var.get('require')))
                        if (var.get('f').neg() and var.get('c')):
                            return var.get('c')(var.get('i'), Js(0.0).neg())
                        if var.get('u'):
                            return var.get('u')(var.get('i'), Js(0.0).neg())
                        var.put('a', var.get('Error').create(((Js("Cannot find module '")+var.get('i'))+Js("'"))))
                        PyJsTempException = JsToPyException(PyJsComma(var.get('a').put('code', Js('MODULE_NOT_FOUND')),var.get('a')))
                        raise PyJsTempException
                    var.put('p', var.get('n').put(var.get('i'), Js({'exports':Js({})})))
                    @Js
                    def PyJs_anonymous_1234_(r, this, arguments, var=var):
                        var = Scope({'r':r, 'this':this, 'arguments':arguments}, var)
                        var.registers(['n', 'r'])
                        var.put('n', var.get('e').get(var.get('i')).get('1').get(var.get('r')))
                        return var.get('o')((var.get('n') or var.get('r')))
                    PyJs_anonymous_1234_._set_name('anonymous')
                    var.get('e').get(var.get('i')).get('0').callprop('call', var.get('p').get('exports'), PyJs_anonymous_1234_, var.get('p'), var.get('p').get('exports'), var.get('r'), var.get('e'), var.get('n'), var.get('t'))
                return var.get('n').get(var.get('i')).get('exports')
            PyJsHoisted_o_.func_name = 'o'
            var.put('o', PyJsHoisted_o_)
            pass
            #for JS loop
            var.put('u', ((Js('function')==var.get('require',throw=False).typeof()) and var.get('require')))
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('t').get('length')):
                try:
                    var.get('o')(var.get('t').get(var.get('i')))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('o')
        PyJsHoisted_r_.func_name = 'r'
        var.put('r', PyJsHoisted_r_)
        pass
        return var.get('r')
    PyJs_anonymous_1233_._set_name('anonymous')
    return PyJs_anonymous_1233_()(Js({'1':Js([PyJs_anonymous_2_, Js({'babel-polyfill':Js(3.0),'escodegen':Js(333.0)})]),'2':Js([PyJs_anonymous_3_, Js({'_process':Js(350.0),'path':Js(349.0)})]),'3':Js([PyJs_anonymous_16_, Js({'core-js/fn/regexp/escape':Js(4.0),'core-js/shim':Js(332.0),'regenerator-runtime/runtime':Js(351.0)})]),'4':Js([PyJs_anonymous_20_, Js({'../../modules/_core':Js(26.0),'../../modules/core.regexp.escape':Js(134.0)})]),'5':Js([PyJs_anonymous_21_, Js({})]),'6':Js([PyJs_anonymous_23_, Js({'./_cof':Js(21.0)})]),'7':Js([PyJs_anonymous_25_, Js({'./_hide':Js(46.0),'./_wks':Js(132.0)})]),'8':Js([PyJs_anonymous_27_, Js({'./_string-at':Js(109.0)})]),'9':Js([PyJs_anonymous_29_, Js({})]),'10':Js([PyJs_anonymous_31_, Js({'./_is-object':Js(55.0)})]),'11':Js([PyJs_anonymous_33_, Js({'./_to-absolute-index':Js(117.0),'./_to-length':Js(121.0),'./_to-object':Js(122.0)})]),'12':Js([PyJs_anonymous_35_, Js({'./_to-absolute-index':Js(117.0),'./_to-length':Js(121.0),'./_to-object':Js(122.0)})]),'13':Js([PyJs_anonymous_37_, Js({'./_for-of':Js(42.0)})]),'14':Js([PyJs_anonymous_39_, Js({'./_to-absolute-index':Js(117.0),'./_to-iobject':Js(120.0),'./_to-length':Js(121.0)})]),'15':Js([PyJs_anonymous_42_, Js({'./_array-species-create':Js(18.0),'./_ctx':Js(28.0),'./_iobject':Js(51.0),'./_to-length':Js(121.0),'./_to-object':Js(122.0)})]),'16':Js([PyJs_anonymous_45_, Js({'./_a-function':Js(5.0),'./_iobject':Js(51.0),'./_to-length':Js(121.0),'./_to-object':Js(122.0)})]),'17':Js([PyJs_anonymous_47_, Js({'./_is-array':Js(53.0),'./_is-object':Js(55.0),'./_wks':Js(132.0)})]),'18':Js([PyJs_anonymous_49_, Js({'./_array-species-constructor':Js(17.0)})]),'19':Js([PyJs_anonymous_51_, Js({'./_a-function':Js(5.0),'./_invoke':Js(50.0),'./_is-object':Js(55.0)})]),'20':Js([PyJs_anonymous_55_, Js({'./_cof':Js(21.0),'./_wks':Js(132.0)})]),'21':Js([PyJs_anonymous_60_, Js({})]),'22':Js([PyJs_anonymous_62_, Js({'./_an-instance':Js(9.0),'./_ctx':Js(28.0),'./_descriptors':Js(32.0),'./_for-of':Js(42.0),'./_iter-define':Js(59.0),'./_iter-step':Js(61.0),'./_meta':Js(69.0),'./_object-create':Js(74.0),'./_object-dp':Js(75.0),'./_redefine-all':Js(94.0),'./_set-species':Js(103.0),'./_validate-collection':Js(129.0)})]),'23':Js([PyJs_anonymous_75_, Js({'./_array-from-iterable':Js(13.0),'./_classof':Js(20.0)})]),'24':Js([PyJs_anonymous_78_, Js({'./_an-instance':Js(9.0),'./_an-object':Js(10.0),'./_array-methods':Js(15.0),'./_for-of':Js(42.0),'./_has':Js(45.0),'./_is-object':Js(55.0),'./_meta':Js(69.0),'./_redefine-all':Js(94.0),'./_validate-collection':Js(129.0)})]),'25':Js([PyJs_anonymous_93_, Js({'./_an-instance':Js(9.0),'./_export':Js(36.0),'./_fails':Js(38.0),'./_for-of':Js(42.0),'./_global':Js(44.0),'./_inherit-if-required':Js(49.0),'./_is-object':Js(55.0),'./_iter-detect':Js(60.0),'./_meta':Js(69.0),'./_redefine':Js(95.0),'./_redefine-all':Js(94.0),'./_set-to-string-tag':Js(104.0)})]),'26':Js([PyJs_anonymous_106_, Js({})]),'27':Js([PyJs_anonymous_107_, Js({'./_object-dp':Js(75.0),'./_property-desc':Js(93.0)})]),'28':Js([PyJs_anonymous_109_, Js({'./_a-function':Js(5.0)})]),'29':Js([PyJs_anonymous_115_, Js({'./_fails':Js(38.0)})]),'30':Js([PyJs_anonymous_121_, Js({'./_an-object':Js(10.0),'./_to-primitive':Js(123.0)})]),'31':Js([PyJs_anonymous_123_, Js({})]),'32':Js([PyJs_anonymous_125_, Js({'./_fails':Js(38.0)})]),'33':Js([PyJs_anonymous_128_, Js({'./_global':Js(44.0),'./_is-object':Js(55.0)})]),'34':Js([PyJs_anonymous_130_, Js({})]),'35':Js([PyJs_anonymous_131_, Js({'./_object-gops':Js(81.0),'./_object-keys':Js(84.0),'./_object-pie':Js(85.0)})]),'36':Js([PyJs_anonymous_133_, Js({'./_core':Js(26.0),'./_ctx':Js(28.0),'./_global':Js(44.0),'./_hide':Js(46.0),'./_redefine':Js(95.0)})]),'37':Js([PyJs_anonymous_135_, Js({'./_wks':Js(132.0)})]),'38':Js([PyJs_anonymous_137_, Js({})]),'39':Js([PyJs_anonymous_139_, Js({'./_defined':Js(31.0),'./_fails':Js(38.0),'./_hide':Js(46.0),'./_redefine':Js(95.0),'./_regexp-exec':Js(97.0),'./_wks':Js(132.0),'./es6.regexp.exec':Js(229.0)})]),'40':Js([PyJs_anonymous_153_, Js({'./_an-object':Js(10.0)})]),'41':Js([PyJs_anonymous_155_, Js({'./_ctx':Js(28.0),'./_is-array':Js(53.0),'./_is-object':Js(55.0),'./_to-length':Js(121.0),'./_wks':Js(132.0)})]),'42':Js([PyJs_anonymous_156_, Js({'./_an-object':Js(10.0),'./_ctx':Js(28.0),'./_is-array-iter':Js(52.0),'./_iter-call':Js(57.0),'./_to-length':Js(121.0),'./core.get-iterator-method':Js(133.0)})]),'43':Js([PyJs_anonymous_159_, Js({'./_shared':Js(106.0)})]),'44':Js([PyJs_anonymous_160_, Js({})]),'45':Js([PyJs_anonymous_161_, Js({})]),'46':Js([PyJs_anonymous_163_, Js({'./_descriptors':Js(32.0),'./_object-dp':Js(75.0),'./_property-desc':Js(93.0)})]),'47':Js([PyJs_anonymous_166_, Js({'./_global':Js(44.0)})]),'48':Js([PyJs_anonymous_167_, Js({'./_descriptors':Js(32.0),'./_dom-create':Js(33.0),'./_fails':Js(38.0)})]),'49':Js([PyJs_anonymous_170_, Js({'./_is-object':Js(55.0),'./_set-proto':Js(102.0)})]),'50':Js([PyJs_anonymous_172_, Js({})]),'51':Js([PyJs_anonymous_174_, Js({'./_cof':Js(21.0)})]),'52':Js([PyJs_anonymous_176_, Js({'./_iterators':Js(62.0),'./_wks':Js(132.0)})]),'53':Js([PyJs_anonymous_178_, Js({'./_cof':Js(21.0)})]),'54':Js([PyJs_anonymous_180_, Js({'./_is-object':Js(55.0)})]),'55':Js([PyJs_anonymous_182_, Js({})]),'56':Js([PyJs_anonymous_184_, Js({'./_cof':Js(21.0),'./_is-object':Js(55.0),'./_wks':Js(132.0)})]),'57':Js([PyJs_anonymous_186_, Js({'./_an-object':Js(10.0)})]),'58':Js([PyJs_anonymous_188_, Js({'./_hide':Js(46.0),'./_object-create':Js(74.0),'./_property-desc':Js(93.0),'./_set-to-string-tag':Js(104.0),'./_wks':Js(132.0)})]),'59':Js([PyJs_anonymous_191_, Js({'./_export':Js(36.0),'./_hide':Js(46.0),'./_iter-create':Js(58.0),'./_iterators':Js(62.0),'./_library':Js(63.0),'./_object-gpo':Js(82.0),'./_redefine':Js(95.0),'./_set-to-string-tag':Js(104.0),'./_wks':Js(132.0)})]),'60':Js([PyJs_anonymous_199_, Js({'./_wks':Js(132.0)})]),'61':Js([PyJs_anonymous_205_, Js({})]),'62':Js([PyJs_anonymous_207_, Js({})]),'63':Js([PyJs_anonymous_208_, Js({})]),'64':Js([PyJs_anonymous_209_, Js({})]),'65':Js([PyJs_anonymous_211_, Js({'./_math-sign':Js(68.0)})]),'66':Js([PyJs_anonymous_214_, Js({})]),'67':Js([PyJs_anonymous_216_, Js({})]),'68':Js([PyJs_anonymous_218_, Js({})]),'69':Js([PyJs_anonymous_220_, Js({'./_fails':Js(38.0),'./_has':Js(45.0),'./_is-object':Js(55.0),'./_object-dp':Js(75.0),'./_uid':Js(127.0)})]),'70':Js([PyJs_anonymous_227_, Js({'./_export':Js(36.0),'./_shared':Js(106.0),'./es6.map':Js(164.0),'./es6.weak-map':Js(271.0)})]),'71':Js([PyJs_anonymous_236_, Js({'./_cof':Js(21.0),'./_global':Js(44.0),'./_task':Js(116.0)})]),'72':Js([PyJs_anonymous_244_, Js({'./_a-function':Js(5.0)})]),'73':Js([PyJs_anonymous_247_, Js({'./_descriptors':Js(32.0),'./_fails':Js(38.0),'./_iobject':Js(51.0),'./_object-gops':Js(81.0),'./_object-keys':Js(84.0),'./_object-pie':Js(85.0),'./_to-object':Js(122.0)})]),'74':Js([PyJs_anonymous_251_, Js({'./_an-object':Js(10.0),'./_dom-create':Js(33.0),'./_enum-bug-keys':Js(34.0),'./_html':Js(47.0),'./_object-dps':Js(76.0),'./_shared-key':Js(105.0)})]),'75':Js([PyJs_anonymous_255_, Js({'./_an-object':Js(10.0),'./_descriptors':Js(32.0),'./_ie8-dom-define':Js(48.0),'./_to-primitive':Js(123.0)})]),'76':Js([PyJs_anonymous_257_, Js({'./_an-object':Js(10.0),'./_descriptors':Js(32.0),'./_object-dp':Js(75.0),'./_object-keys':Js(84.0)})]),'77':Js([PyJs_anonymous_259_, Js({'./_fails':Js(38.0),'./_global':Js(44.0),'./_library':Js(63.0)})]),'78':Js([PyJs_anonymous_262_, Js({'./_descriptors':Js(32.0),'./_has':Js(45.0),'./_ie8-dom-define':Js(48.0),'./_object-pie':Js(85.0),'./_property-desc':Js(93.0),'./_to-iobject':Js(120.0),'./_to-primitive':Js(123.0)})]),'79':Js([PyJs_anonymous_264_, Js({'./_object-gopn':Js(80.0),'./_to-iobject':Js(120.0)})]),'80':Js([PyJs_anonymous_267_, Js({'./_enum-bug-keys':Js(34.0),'./_object-keys-internal':Js(83.0)})]),'81':Js([PyJs_anonymous_269_, Js({})]),'82':Js([PyJs_anonymous_270_, Js({'./_has':Js(45.0),'./_shared-key':Js(105.0),'./_to-object':Js(122.0)})]),'83':Js([PyJs_anonymous_272_, Js({'./_array-includes':Js(14.0),'./_has':Js(45.0),'./_shared-key':Js(105.0),'./_to-iobject':Js(120.0)})]),'84':Js([PyJs_anonymous_274_, Js({'./_enum-bug-keys':Js(34.0),'./_object-keys-internal':Js(83.0)})]),'85':Js([PyJs_anonymous_276_, Js({})]),'86':Js([PyJs_anonymous_277_, Js({'./_core':Js(26.0),'./_export':Js(36.0),'./_fails':Js(38.0)})]),'87':Js([PyJs_anonymous_280_, Js({'./_descriptors':Js(32.0),'./_object-keys':Js(84.0),'./_object-pie':Js(85.0),'./_to-iobject':Js(120.0)})]),'88':Js([PyJs_anonymous_283_, Js({'./_an-object':Js(10.0),'./_global':Js(44.0),'./_object-gopn':Js(80.0),'./_object-gops':Js(81.0)})]),'89':Js([PyJs_anonymous_285_, Js({'./_global':Js(44.0),'./_string-trim':Js(114.0),'./_string-ws':Js(115.0)})]),'90':Js([PyJs_anonymous_287_, Js({'./_global':Js(44.0),'./_string-trim':Js(114.0),'./_string-ws':Js(115.0)})]),'91':Js([PyJs_anonymous_289_, Js({})]),'92':Js([PyJs_anonymous_291_, Js({'./_an-object':Js(10.0),'./_is-object':Js(55.0),'./_new-promise-capability':Js(72.0)})]),'93':Js([PyJs_anonymous_293_, Js({})]),'94':Js([PyJs_anonymous_295_, Js({'./_redefine':Js(95.0)})]),'95':Js([PyJs_anonymous_297_, Js({'./_core':Js(26.0),'./_function-to-string':Js(43.0),'./_global':Js(44.0),'./_has':Js(45.0),'./_hide':Js(46.0),'./_uid':Js(127.0)})]),'96':Js([PyJs_anonymous_301_, Js({'./_classof':Js(20.0)})]),'97':Js([PyJs_anonymous_303_, Js({'./_flags':Js(40.0)})]),'98':Js([PyJs_anonymous_307_, Js({})]),'99':Js([PyJs_anonymous_311_, Js({})]),'100':Js([PyJs_anonymous_313_, Js({'./_a-function':Js(5.0),'./_ctx':Js(28.0),'./_export':Js(36.0),'./_for-of':Js(42.0)})]),'101':Js([PyJs_anonymous_317_, Js({'./_export':Js(36.0)})]),'102':Js([PyJs_anonymous_320_, Js({'./_an-object':Js(10.0),'./_ctx':Js(28.0),'./_is-object':Js(55.0),'./_object-gopd':Js(78.0)})]),'103':Js([PyJs_anonymous_324_, Js({'./_descriptors':Js(32.0),'./_global':Js(44.0),'./_object-dp':Js(75.0),'./_wks':Js(132.0)})]),'104':Js([PyJs_anonymous_327_, Js({'./_has':Js(45.0),'./_object-dp':Js(75.0),'./_wks':Js(132.0)})]),'105':Js([PyJs_anonymous_329_, Js({'./_shared':Js(106.0),'./_uid':Js(127.0)})]),'106':Js([PyJs_anonymous_331_, Js({'./_core':Js(26.0),'./_global':Js(44.0),'./_library':Js(63.0)})]),'107':Js([PyJs_anonymous_333_, Js({'./_a-function':Js(5.0),'./_an-object':Js(10.0),'./_wks':Js(132.0)})]),'108':Js([PyJs_anonymous_335_, Js({'./_fails':Js(38.0)})]),'109':Js([PyJs_anonymous_339_, Js({'./_defined':Js(31.0),'./_to-integer':Js(119.0)})]),'110':Js([PyJs_anonymous_343_, Js({'./_defined':Js(31.0),'./_is-regexp':Js(56.0)})]),'111':Js([PyJs_anonymous_345_, Js({'./_defined':Js(31.0),'./_export':Js(36.0),'./_fails':Js(38.0)})]),'112':Js([PyJs_anonymous_349_, Js({'./_defined':Js(31.0),'./_string-repeat':Js(113.0),'./_to-length':Js(121.0)})]),'113':Js([PyJs_anonymous_351_, Js({'./_defined':Js(31.0),'./_to-integer':Js(119.0)})]),'114':Js([PyJs_anonymous_353_, Js({'./_defined':Js(31.0),'./_export':Js(36.0),'./_fails':Js(38.0),'./_string-ws':Js(115.0)})]),'115':Js([PyJs_anonymous_357_, Js({})]),'116':Js([PyJs_anonymous_358_, Js({'./_cof':Js(21.0),'./_ctx':Js(28.0),'./_dom-create':Js(33.0),'./_global':Js(44.0),'./_html':Js(47.0),'./_invoke':Js(50.0)})]),'117':Js([PyJs_anonymous_370_, Js({'./_to-integer':Js(119.0)})]),'118':Js([PyJs_anonymous_372_, Js({'./_to-integer':Js(119.0),'./_to-length':Js(121.0)})]),'119':Js([PyJs_anonymous_374_, Js({})]),'120':Js([PyJs_anonymous_376_, Js({'./_defined':Js(31.0),'./_iobject':Js(51.0)})]),'121':Js([PyJs_anonymous_378_, Js({'./_to-integer':Js(119.0)})]),'122':Js([PyJs_anonymous_380_, Js({'./_defined':Js(31.0)})]),'123':Js([PyJs_anonymous_382_, Js({'./_is-object':Js(55.0)})]),'124':Js([PyJs_anonymous_384_, Js({'./_an-instance':Js(9.0),'./_array-copy-within':Js(11.0),'./_array-fill':Js(12.0),'./_array-includes':Js(14.0),'./_array-methods':Js(15.0),'./_classof':Js(20.0),'./_ctx':Js(28.0),'./_descriptors':Js(32.0),'./_export':Js(36.0),'./_fails':Js(38.0),'./_global':Js(44.0),'./_has':Js(45.0),'./_hide':Js(46.0),'./_is-array-iter':Js(52.0),'./_is-object':Js(55.0),'./_iter-detect':Js(60.0),'./_iterators':Js(62.0),'./_library':Js(63.0),'./_object-create':Js(74.0),'./_object-dp':Js(75.0),'./_object-gopd':Js(78.0),'./_object-gopn':Js(80.0),'./_object-gpo':Js(82.0),'./_property-desc':Js(93.0),'./_redefine-all':Js(94.0),'./_set-species':Js(103.0),'./_species-constructor':Js(107.0),'./_to-absolute-index':Js(117.0),'./_to-index':Js(118.0),'./_to-integer':Js(119.0),'./_to-length':Js(121.0),'./_to-object':Js(122.0),'./_to-primitive':Js(123.0),'./_typed':Js(126.0),'./_typed-buffer':Js(125.0),'./_uid':Js(127.0),'./_wks':Js(132.0),'./core.get-iterator-method':Js(133.0),'./es6.array.iterator':Js(145.0)})]),'125':Js([PyJs_anonymous_448_, Js({'./_an-instance':Js(9.0),'./_array-fill':Js(12.0),'./_descriptors':Js(32.0),'./_fails':Js(38.0),'./_global':Js(44.0),'./_hide':Js(46.0),'./_library':Js(63.0),'./_object-dp':Js(75.0),'./_object-gopn':Js(80.0),'./_redefine-all':Js(94.0),'./_set-to-string-tag':Js(104.0),'./_to-index':Js(118.0),'./_to-integer':Js(119.0),'./_to-length':Js(121.0),'./_typed':Js(126.0)})]),'126':Js([PyJs_anonymous_475_, Js({'./_global':Js(44.0),'./_hide':Js(46.0),'./_uid':Js(127.0)})]),'127':Js([PyJs_anonymous_476_, Js({})]),'128':Js([PyJs_anonymous_478_, Js({'./_global':Js(44.0)})]),'129':Js([PyJs_anonymous_479_, Js({'./_is-object':Js(55.0)})]),'130':Js([PyJs_anonymous_481_, Js({'./_core':Js(26.0),'./_global':Js(44.0),'./_library':Js(63.0),'./_object-dp':Js(75.0),'./_wks-ext':Js(131.0)})]),'131':Js([PyJs_anonymous_483_, Js({'./_wks':Js(132.0)})]),'132':Js([PyJs_anonymous_484_, Js({'./_global':Js(44.0),'./_shared':Js(106.0),'./_uid':Js(127.0)})]),'133':Js([PyJs_anonymous_486_, Js({'./_classof':Js(20.0),'./_core':Js(26.0),'./_iterators':Js(62.0),'./_wks':Js(132.0)})]),'134':Js([PyJs_anonymous_488_, Js({'./_export':Js(36.0),'./_replacer':Js(98.0)})]),'135':Js([PyJs_anonymous_490_, Js({'./_add-to-unscopables':Js(7.0),'./_array-copy-within':Js(11.0),'./_export':Js(36.0)})]),'136':Js([PyJs_anonymous_491_, Js({'./_array-methods':Js(15.0),'./_export':Js(36.0),'./_strict-method':Js(108.0)})]),'137':Js([PyJs_anonymous_493_, Js({'./_add-to-unscopables':Js(7.0),'./_array-fill':Js(12.0),'./_export':Js(36.0)})]),'138':Js([PyJs_anonymous_494_, Js({'./_array-methods':Js(15.0),'./_export':Js(36.0),'./_strict-method':Js(108.0)})]),'139':Js([PyJs_anonymous_496_, Js({'./_add-to-unscopables':Js(7.0),'./_array-methods':Js(15.0),'./_export':Js(36.0)})]),'140':Js([PyJs_anonymous_499_, Js({'./_add-to-unscopables':Js(7.0),'./_array-methods':Js(15.0),'./_export':Js(36.0)})]),'141':Js([PyJs_anonymous_502_, Js({'./_array-methods':Js(15.0),'./_export':Js(36.0),'./_strict-method':Js(108.0)})]),'142':Js([PyJs_anonymous_504_, Js({'./_create-property':Js(27.0),'./_ctx':Js(28.0),'./_export':Js(36.0),'./_is-array-iter':Js(52.0),'./_iter-call':Js(57.0),'./_iter-detect':Js(60.0),'./_to-length':Js(121.0),'./_to-object':Js(122.0),'./core.get-iterator-method':Js(133.0)})]),'143':Js([PyJs_anonymous_507_, Js({'./_array-includes':Js(14.0),'./_export':Js(36.0),'./_strict-method':Js(108.0)})]),'144':Js([PyJs_anonymous_509_, Js({'./_export':Js(36.0),'./_is-array':Js(53.0)})]),'145':Js([PyJs_anonymous_510_, Js({'./_add-to-unscopables':Js(7.0),'./_iter-define':Js(59.0),'./_iter-step':Js(61.0),'./_iterators':Js(62.0),'./_to-iobject':Js(120.0)})]),'146':Js([PyJs_anonymous_513_, Js({'./_export':Js(36.0),'./_iobject':Js(51.0),'./_strict-method':Js(108.0),'./_to-iobject':Js(120.0)})]),'147':Js([PyJs_anonymous_515_, Js({'./_export':Js(36.0),'./_strict-method':Js(108.0),'./_to-integer':Js(119.0),'./_to-iobject':Js(120.0),'./_to-length':Js(121.0)})]),'148':Js([PyJs_anonymous_517_, Js({'./_array-methods':Js(15.0),'./_export':Js(36.0),'./_strict-method':Js(108.0)})]),'149':Js([PyJs_anonymous_519_, Js({'./_create-property':Js(27.0),'./_export':Js(36.0),'./_fails':Js(38.0)})]),'150':Js([PyJs_anonymous_522_, Js({'./_array-reduce':Js(16.0),'./_export':Js(36.0),'./_strict-method':Js(108.0)})]),'151':Js([PyJs_anonymous_524_, Js({'./_array-reduce':Js(16.0),'./_export':Js(36.0),'./_strict-method':Js(108.0)})]),'152':Js([PyJs_anonymous_526_, Js({'./_cof':Js(21.0),'./_export':Js(36.0),'./_fails':Js(38.0),'./_html':Js(47.0),'./_to-absolute-index':Js(117.0),'./_to-length':Js(121.0)})]),'153':Js([PyJs_anonymous_529_, Js({'./_array-methods':Js(15.0),'./_export':Js(36.0),'./_strict-method':Js(108.0)})]),'154':Js([PyJs_anonymous_531_, Js({'./_a-function':Js(5.0),'./_export':Js(36.0),'./_fails':Js(38.0),'./_strict-method':Js(108.0),'./_to-object':Js(122.0)})]),'155':Js([PyJs_anonymous_535_, Js({'./_set-species':Js(103.0)})]),'156':Js([PyJs_anonymous_536_, Js({'./_export':Js(36.0)})]),'157':Js([PyJs_anonymous_538_, Js({'./_date-to-iso-string':Js(29.0),'./_export':Js(36.0)})]),'158':Js([PyJs_anonymous_539_, Js({'./_export':Js(36.0),'./_fails':Js(38.0),'./_to-object':Js(122.0),'./_to-primitive':Js(123.0)})]),'159':Js([PyJs_anonymous_543_, Js({'./_date-to-primitive':Js(30.0),'./_hide':Js(46.0),'./_wks':Js(132.0)})]),'160':Js([PyJs_anonymous_544_, Js({'./_redefine':Js(95.0)})]),'161':Js([PyJs_anonymous_546_, Js({'./_bind':Js(19.0),'./_export':Js(36.0)})]),'162':Js([PyJs_anonymous_547_, Js({'./_is-object':Js(55.0),'./_object-dp':Js(75.0),'./_object-gpo':Js(82.0),'./_wks':Js(132.0)})]),'163':Js([PyJs_anonymous_549_, Js({'./_descriptors':Js(32.0),'./_object-dp':Js(75.0)})]),'164':Js([PyJs_anonymous_551_, Js({'./_collection':Js(25.0),'./_collection-strong':Js(22.0),'./_validate-collection':Js(129.0)})]),'165':Js([PyJs_anonymous_556_, Js({'./_export':Js(36.0),'./_math-log1p':Js(66.0)})]),'166':Js([PyJs_anonymous_558_, Js({'./_export':Js(36.0)})]),'167':Js([PyJs_anonymous_559_, Js({'./_export':Js(36.0)})]),'168':Js([PyJs_anonymous_561_, Js({'./_export':Js(36.0),'./_math-sign':Js(68.0)})]),'169':Js([PyJs_anonymous_563_, Js({'./_export':Js(36.0)})]),'170':Js([PyJs_anonymous_565_, Js({'./_export':Js(36.0)})]),'171':Js([PyJs_anonymous_567_, Js({'./_export':Js(36.0),'./_math-expm1':Js(64.0)})]),'172':Js([PyJs_anonymous_568_, Js({'./_export':Js(36.0),'./_math-fround':Js(65.0)})]),'173':Js([PyJs_anonymous_569_, Js({'./_export':Js(36.0)})]),'174':Js([PyJs_anonymous_571_, Js({'./_export':Js(36.0),'./_fails':Js(38.0)})]),'175':Js([PyJs_anonymous_574_, Js({'./_export':Js(36.0)})]),'176':Js([PyJs_anonymous_576_, Js({'./_export':Js(36.0),'./_math-log1p':Js(66.0)})]),'177':Js([PyJs_anonymous_577_, Js({'./_export':Js(36.0)})]),'178':Js([PyJs_anonymous_579_, Js({'./_export':Js(36.0),'./_math-sign':Js(68.0)})]),'179':Js([PyJs_anonymous_580_, Js({'./_export':Js(36.0),'./_fails':Js(38.0),'./_math-expm1':Js(64.0)})]),'180':Js([PyJs_anonymous_583_, Js({'./_export':Js(36.0),'./_math-expm1':Js(64.0)})]),'181':Js([PyJs_anonymous_585_, Js({'./_export':Js(36.0)})]),'182':Js([PyJs_anonymous_587_, Js({'./_cof':Js(21.0),'./_descriptors':Js(32.0),'./_fails':Js(38.0),'./_global':Js(44.0),'./_has':Js(45.0),'./_inherit-if-required':Js(49.0),'./_object-create':Js(74.0),'./_object-dp':Js(75.0),'./_object-gopd':Js(78.0),'./_object-gopn':Js(80.0),'./_redefine':Js(95.0),'./_string-trim':Js(114.0),'./_to-primitive':Js(123.0)})]),'183':Js([PyJs_anonymous_591_, Js({'./_export':Js(36.0)})]),'184':Js([PyJs_anonymous_592_, Js({'./_export':Js(36.0),'./_global':Js(44.0)})]),'185':Js([PyJs_anonymous_594_, Js({'./_export':Js(36.0),'./_is-integer':Js(54.0)})]),'186':Js([PyJs_anonymous_595_, Js({'./_export':Js(36.0)})]),'187':Js([PyJs_anonymous_597_, Js({'./_export':Js(36.0),'./_is-integer':Js(54.0)})]),'188':Js([PyJs_anonymous_599_, Js({'./_export':Js(36.0)})]),'189':Js([PyJs_anonymous_600_, Js({'./_export':Js(36.0)})]),'190':Js([PyJs_anonymous_601_, Js({'./_export':Js(36.0),'./_parse-float':Js(89.0)})]),'191':Js([PyJs_anonymous_602_, Js({'./_export':Js(36.0),'./_parse-int':Js(90.0)})]),'192':Js([PyJs_anonymous_603_, Js({'./_a-number-value':Js(6.0),'./_export':Js(36.0),'./_fails':Js(38.0),'./_string-repeat':Js(113.0),'./_to-integer':Js(119.0)})]),'193':Js([PyJs_anonymous_612_, Js({'./_a-number-value':Js(6.0),'./_export':Js(36.0),'./_fails':Js(38.0)})]),'194':Js([PyJs_anonymous_616_, Js({'./_export':Js(36.0),'./_object-assign':Js(73.0)})]),'195':Js([PyJs_anonymous_617_, Js({'./_export':Js(36.0),'./_object-create':Js(74.0)})]),'196':Js([PyJs_anonymous_618_, Js({'./_descriptors':Js(32.0),'./_export':Js(36.0),'./_object-dps':Js(76.0)})]),'197':Js([PyJs_anonymous_619_, Js({'./_descriptors':Js(32.0),'./_export':Js(36.0),'./_object-dp':Js(75.0)})]),'198':Js([PyJs_anonymous_620_, Js({'./_is-object':Js(55.0),'./_meta':Js(69.0),'./_object-sap':Js(86.0)})]),'199':Js([PyJs_anonymous_623_, Js({'./_object-gopd':Js(78.0),'./_object-sap':Js(86.0),'./_to-iobject':Js(120.0)})]),'200':Js([PyJs_anonymous_626_, Js({'./_object-gopn-ext':Js(79.0),'./_object-sap':Js(86.0)})]),'201':Js([PyJs_anonymous_628_, Js({'./_object-gpo':Js(82.0),'./_object-sap':Js(86.0),'./_to-object':Js(122.0)})]),'202':Js([PyJs_anonymous_631_, Js({'./_is-object':Js(55.0),'./_object-sap':Js(86.0)})]),'203':Js([PyJs_anonymous_634_, Js({'./_is-object':Js(55.0),'./_object-sap':Js(86.0)})]),'204':Js([PyJs_anonymous_637_, Js({'./_is-object':Js(55.0),'./_object-sap':Js(86.0)})]),'205':Js([PyJs_anonymous_640_, Js({'./_export':Js(36.0),'./_same-value':Js(99.0)})]),'206':Js([PyJs_anonymous_641_, Js({'./_object-keys':Js(84.0),'./_object-sap':Js(86.0),'./_to-object':Js(122.0)})]),'207':Js([PyJs_anonymous_644_, Js({'./_is-object':Js(55.0),'./_meta':Js(69.0),'./_object-sap':Js(86.0)})]),'208':Js([PyJs_anonymous_647_, Js({'./_is-object':Js(55.0),'./_meta':Js(69.0),'./_object-sap':Js(86.0)})]),'209':Js([PyJs_anonymous_650_, Js({'./_export':Js(36.0),'./_set-proto':Js(102.0)})]),'210':Js([PyJs_anonymous_651_, Js({'./_classof':Js(20.0),'./_redefine':Js(95.0),'./_wks':Js(132.0)})]),'211':Js([PyJs_anonymous_653_, Js({'./_export':Js(36.0),'./_parse-float':Js(89.0)})]),'212':Js([PyJs_anonymous_654_, Js({'./_export':Js(36.0),'./_parse-int':Js(90.0)})]),'213':Js([PyJs_anonymous_655_, Js({'./_a-function':Js(5.0),'./_an-instance':Js(9.0),'./_classof':Js(20.0),'./_core':Js(26.0),'./_ctx':Js(28.0),'./_export':Js(36.0),'./_for-of':Js(42.0),'./_global':Js(44.0),'./_is-object':Js(55.0),'./_iter-detect':Js(60.0),'./_library':Js(63.0),'./_microtask':Js(71.0),'./_new-promise-capability':Js(72.0),'./_perform':Js(91.0),'./_promise-resolve':Js(92.0),'./_redefine-all':Js(94.0),'./_set-species':Js(103.0),'./_set-to-string-tag':Js(104.0),'./_species-constructor':Js(107.0),'./_task':Js(116.0),'./_user-agent':Js(128.0),'./_wks':Js(132.0)})]),'214':Js([PyJs_anonymous_688_, Js({'./_a-function':Js(5.0),'./_an-object':Js(10.0),'./_export':Js(36.0),'./_fails':Js(38.0),'./_global':Js(44.0)})]),'215':Js([PyJs_anonymous_692_, Js({'./_a-function':Js(5.0),'./_an-object':Js(10.0),'./_bind':Js(19.0),'./_export':Js(36.0),'./_fails':Js(38.0),'./_global':Js(44.0),'./_is-object':Js(55.0),'./_object-create':Js(74.0)})]),'216':Js([PyJs_anonymous_698_, Js({'./_an-object':Js(10.0),'./_export':Js(36.0),'./_fails':Js(38.0),'./_object-dp':Js(75.0),'./_to-primitive':Js(123.0)})]),'217':Js([PyJs_anonymous_701_, Js({'./_an-object':Js(10.0),'./_export':Js(36.0),'./_object-gopd':Js(78.0)})]),'218':Js([PyJs_anonymous_703_, Js({'./_an-object':Js(10.0),'./_export':Js(36.0),'./_iter-create':Js(58.0)})]),'219':Js([PyJs_anonymous_707_, Js({'./_an-object':Js(10.0),'./_export':Js(36.0),'./_object-gopd':Js(78.0)})]),'220':Js([PyJs_anonymous_709_, Js({'./_an-object':Js(10.0),'./_export':Js(36.0),'./_object-gpo':Js(82.0)})]),'221':Js([PyJs_anonymous_711_, Js({'./_an-object':Js(10.0),'./_export':Js(36.0),'./_has':Js(45.0),'./_is-object':Js(55.0),'./_object-gopd':Js(78.0),'./_object-gpo':Js(82.0)})]),'222':Js([PyJs_anonymous_712_, Js({'./_export':Js(36.0)})]),'223':Js([PyJs_anonymous_714_, Js({'./_an-object':Js(10.0),'./_export':Js(36.0)})]),'224':Js([PyJs_anonymous_716_, Js({'./_export':Js(36.0),'./_own-keys':Js(88.0)})]),'225':Js([PyJs_anonymous_717_, Js({'./_an-object':Js(10.0),'./_export':Js(36.0)})]),'226':Js([PyJs_anonymous_719_, Js({'./_export':Js(36.0),'./_set-proto':Js(102.0)})]),'227':Js([PyJs_anonymous_721_, Js({'./_an-object':Js(10.0),'./_export':Js(36.0),'./_has':Js(45.0),'./_is-object':Js(55.0),'./_object-dp':Js(75.0),'./_object-gopd':Js(78.0),'./_object-gpo':Js(82.0),'./_property-desc':Js(93.0)})]),'228':Js([PyJs_anonymous_722_, Js({'./_descriptors':Js(32.0),'./_fails':Js(38.0),'./_flags':Js(40.0),'./_global':Js(44.0),'./_inherit-if-required':Js(49.0),'./_is-regexp':Js(56.0),'./_object-dp':Js(75.0),'./_object-gopn':Js(80.0),'./_redefine':Js(95.0),'./_set-species':Js(103.0),'./_wks':Js(132.0)})]),'229':Js([PyJs_anonymous_729_, Js({'./_export':Js(36.0),'./_regexp-exec':Js(97.0)})]),'230':Js([PyJs_anonymous_730_, Js({'./_descriptors':Js(32.0),'./_flags':Js(40.0),'./_object-dp':Js(75.0)})]),'231':Js([PyJs_anonymous_731_, Js({'./_advance-string-index':Js(8.0),'./_an-object':Js(10.0),'./_fix-re-wks':Js(39.0),'./_regexp-exec-abstract':Js(96.0),'./_to-length':Js(121.0)})]),'232':Js([PyJs_anonymous_735_, Js({'./_advance-string-index':Js(8.0),'./_an-object':Js(10.0),'./_fix-re-wks':Js(39.0),'./_regexp-exec-abstract':Js(96.0),'./_to-integer':Js(119.0),'./_to-length':Js(121.0),'./_to-object':Js(122.0)})]),'233':Js([PyJs_anonymous_741_, Js({'./_an-object':Js(10.0),'./_fix-re-wks':Js(39.0),'./_regexp-exec-abstract':Js(96.0),'./_same-value':Js(99.0)})]),'234':Js([PyJs_anonymous_745_, Js({'./_advance-string-index':Js(8.0),'./_an-object':Js(10.0),'./_fails':Js(38.0),'./_fix-re-wks':Js(39.0),'./_is-regexp':Js(56.0),'./_regexp-exec':Js(97.0),'./_regexp-exec-abstract':Js(96.0),'./_species-constructor':Js(107.0),'./_to-length':Js(121.0)})]),'235':Js([PyJs_anonymous_753_, Js({'./_an-object':Js(10.0),'./_descriptors':Js(32.0),'./_fails':Js(38.0),'./_flags':Js(40.0),'./_redefine':Js(95.0),'./es6.regexp.flags':Js(230.0)})]),'236':Js([PyJs_anonymous_758_, Js({'./_collection':Js(25.0),'./_collection-strong':Js(22.0),'./_validate-collection':Js(129.0)})]),'237':Js([PyJs_anonymous_762_, Js({'./_string-html':Js(111.0)})]),'238':Js([PyJs_anonymous_765_, Js({'./_string-html':Js(111.0)})]),'239':Js([PyJs_anonymous_768_, Js({'./_string-html':Js(111.0)})]),'240':Js([PyJs_anonymous_771_, Js({'./_string-html':Js(111.0)})]),'241':Js([PyJs_anonymous_774_, Js({'./_export':Js(36.0),'./_string-at':Js(109.0)})]),'242':Js([PyJs_anonymous_776_, Js({'./_export':Js(36.0),'./_fails-is-regexp':Js(37.0),'./_string-context':Js(110.0),'./_to-length':Js(121.0)})]),'243':Js([PyJs_anonymous_778_, Js({'./_string-html':Js(111.0)})]),'244':Js([PyJs_anonymous_781_, Js({'./_string-html':Js(111.0)})]),'245':Js([PyJs_anonymous_784_, Js({'./_string-html':Js(111.0)})]),'246':Js([PyJs_anonymous_787_, Js({'./_export':Js(36.0),'./_to-absolute-index':Js(117.0)})]),'247':Js([PyJs_anonymous_789_, Js({'./_export':Js(36.0),'./_fails-is-regexp':Js(37.0),'./_string-context':Js(110.0)})]),'248':Js([PyJs_anonymous_791_, Js({'./_string-html':Js(111.0)})]),'249':Js([PyJs_anonymous_794_, Js({'./_iter-define':Js(59.0),'./_string-at':Js(109.0)})]),'250':Js([PyJs_anonymous_797_, Js({'./_string-html':Js(111.0)})]),'251':Js([PyJs_anonymous_800_, Js({'./_export':Js(36.0),'./_to-iobject':Js(120.0),'./_to-length':Js(121.0)})]),'252':Js([PyJs_anonymous_802_, Js({'./_export':Js(36.0),'./_string-repeat':Js(113.0)})]),'253':Js([PyJs_anonymous_803_, Js({'./_string-html':Js(111.0)})]),'254':Js([PyJs_anonymous_806_, Js({'./_export':Js(36.0),'./_fails-is-regexp':Js(37.0),'./_string-context':Js(110.0),'./_to-length':Js(121.0)})]),'255':Js([PyJs_anonymous_808_, Js({'./_string-html':Js(111.0)})]),'256':Js([PyJs_anonymous_811_, Js({'./_string-html':Js(111.0)})]),'257':Js([PyJs_anonymous_814_, Js({'./_string-html':Js(111.0)})]),'258':Js([PyJs_anonymous_817_, Js({'./_string-trim':Js(114.0)})]),'259':Js([PyJs_anonymous_820_, Js({'./_an-object':Js(10.0),'./_descriptors':Js(32.0),'./_enum-keys':Js(35.0),'./_export':Js(36.0),'./_fails':Js(38.0),'./_global':Js(44.0),'./_has':Js(45.0),'./_hide':Js(46.0),'./_is-array':Js(53.0),'./_is-object':Js(55.0),'./_library':Js(63.0),'./_meta':Js(69.0),'./_object-create':Js(74.0),'./_object-dp':Js(75.0),'./_object-gopd':Js(78.0),'./_object-gopn':Js(80.0),'./_object-gopn-ext':Js(79.0),'./_object-gops':Js(81.0),'./_object-keys':Js(84.0),'./_object-pie':Js(85.0),'./_property-desc':Js(93.0),'./_redefine':Js(95.0),'./_set-to-string-tag':Js(104.0),'./_shared':Js(106.0),'./_to-iobject':Js(120.0),'./_to-object':Js(122.0),'./_to-primitive':Js(123.0),'./_uid':Js(127.0),'./_wks':Js(132.0),'./_wks-define':Js(130.0),'./_wks-ext':Js(131.0)})]),'260':Js([PyJs_anonymous_848_, Js({'./_an-object':Js(10.0),'./_export':Js(36.0),'./_fails':Js(38.0),'./_global':Js(44.0),'./_is-object':Js(55.0),'./_set-species':Js(103.0),'./_species-constructor':Js(107.0),'./_to-absolute-index':Js(117.0),'./_to-length':Js(121.0),'./_typed':Js(126.0),'./_typed-buffer':Js(125.0)})]),'261':Js([PyJs_anonymous_852_, Js({'./_export':Js(36.0),'./_typed':Js(126.0),'./_typed-buffer':Js(125.0)})]),'262':Js([PyJs_anonymous_853_, Js({'./_typed-array':Js(124.0)})]),'263':Js([PyJs_anonymous_856_, Js({'./_typed-array':Js(124.0)})]),'264':Js([PyJs_anonymous_859_, Js({'./_typed-array':Js(124.0)})]),'265':Js([PyJs_anonymous_862_, Js({'./_typed-array':Js(124.0)})]),'266':Js([PyJs_anonymous_865_, Js({'./_typed-array':Js(124.0)})]),'267':Js([PyJs_anonymous_868_, Js({'./_typed-array':Js(124.0)})]),'268':Js([PyJs_anonymous_871_, Js({'./_typed-array':Js(124.0)})]),'269':Js([PyJs_anonymous_874_, Js({'./_typed-array':Js(124.0)})]),'270':Js([PyJs_anonymous_877_, Js({'./_typed-array':Js(124.0)})]),'271':Js([PyJs_anonymous_880_, Js({'./_array-methods':Js(15.0),'./_collection':Js(25.0),'./_collection-weak':Js(24.0),'./_global':Js(44.0),'./_is-object':Js(55.0),'./_meta':Js(69.0),'./_object-assign':Js(73.0),'./_redefine':Js(95.0),'./_validate-collection':Js(129.0)})]),'272':Js([PyJs_anonymous_887_, Js({'./_collection':Js(25.0),'./_collection-weak':Js(24.0),'./_validate-collection':Js(129.0)})]),'273':Js([PyJs_anonymous_891_, Js({'./_a-function':Js(5.0),'./_add-to-unscopables':Js(7.0),'./_array-species-create':Js(18.0),'./_export':Js(36.0),'./_flatten-into-array':Js(41.0),'./_to-length':Js(121.0),'./_to-object':Js(122.0)})]),'274':Js([PyJs_anonymous_893_, Js({'./_add-to-unscopables':Js(7.0),'./_array-species-create':Js(18.0),'./_export':Js(36.0),'./_flatten-into-array':Js(41.0),'./_to-integer':Js(119.0),'./_to-length':Js(121.0),'./_to-object':Js(122.0)})]),'275':Js([PyJs_anonymous_895_, Js({'./_add-to-unscopables':Js(7.0),'./_array-includes':Js(14.0),'./_export':Js(36.0)})]),'276':Js([PyJs_anonymous_897_, Js({'./_cof':Js(21.0),'./_export':Js(36.0),'./_global':Js(44.0),'./_microtask':Js(71.0)})]),'277':Js([PyJs_anonymous_899_, Js({'./_cof':Js(21.0),'./_export':Js(36.0)})]),'278':Js([PyJs_anonymous_901_, Js({'./_export':Js(36.0),'./_global':Js(44.0)})]),'279':Js([PyJs_anonymous_902_, Js({'./_set-collection-from':Js(100.0)})]),'280':Js([PyJs_anonymous_903_, Js({'./_set-collection-of':Js(101.0)})]),'281':Js([PyJs_anonymous_904_, Js({'./_collection-to-json':Js(23.0),'./_export':Js(36.0)})]),'282':Js([PyJs_anonymous_905_, Js({'./_export':Js(36.0)})]),'283':Js([PyJs_anonymous_907_, Js({'./_export':Js(36.0)})]),'284':Js([PyJs_anonymous_908_, Js({'./_export':Js(36.0)})]),'285':Js([PyJs_anonymous_910_, Js({'./_export':Js(36.0),'./_math-fround':Js(65.0),'./_math-scale':Js(67.0)})]),'286':Js([PyJs_anonymous_912_, Js({'./_export':Js(36.0)})]),'287':Js([PyJs_anonymous_914_, Js({'./_export':Js(36.0)})]),'288':Js([PyJs_anonymous_916_, Js({'./_export':Js(36.0)})]),'289':Js([PyJs_anonymous_918_, Js({'./_export':Js(36.0)})]),'290':Js([PyJs_anonymous_919_, Js({'./_export':Js(36.0)})]),'291':Js([PyJs_anonymous_921_, Js({'./_export':Js(36.0),'./_math-scale':Js(67.0)})]),'292':Js([PyJs_anonymous_922_, Js({'./_export':Js(36.0)})]),'293':Js([PyJs_anonymous_924_, Js({'./_export':Js(36.0)})]),'294':Js([PyJs_anonymous_926_, Js({'./_a-function':Js(5.0),'./_descriptors':Js(32.0),'./_export':Js(36.0),'./_object-dp':Js(75.0),'./_object-forced-pam':Js(77.0),'./_to-object':Js(122.0)})]),'295':Js([PyJs_anonymous_928_, Js({'./_a-function':Js(5.0),'./_descriptors':Js(32.0),'./_export':Js(36.0),'./_object-dp':Js(75.0),'./_object-forced-pam':Js(77.0),'./_to-object':Js(122.0)})]),'296':Js([PyJs_anonymous_930_, Js({'./_export':Js(36.0),'./_object-to-array':Js(87.0)})]),'297':Js([PyJs_anonymous_932_, Js({'./_create-property':Js(27.0),'./_export':Js(36.0),'./_object-gopd':Js(78.0),'./_own-keys':Js(88.0),'./_to-iobject':Js(120.0)})]),'298':Js([PyJs_anonymous_934_, Js({'./_descriptors':Js(32.0),'./_export':Js(36.0),'./_object-forced-pam':Js(77.0),'./_object-gopd':Js(78.0),'./_object-gpo':Js(82.0),'./_to-object':Js(122.0),'./_to-primitive':Js(123.0)})]),'299':Js([PyJs_anonymous_936_, Js({'./_descriptors':Js(32.0),'./_export':Js(36.0),'./_object-forced-pam':Js(77.0),'./_object-gopd':Js(78.0),'./_object-gpo':Js(82.0),'./_to-object':Js(122.0),'./_to-primitive':Js(123.0)})]),'300':Js([PyJs_anonymous_938_, Js({'./_export':Js(36.0),'./_object-to-array':Js(87.0)})]),'301':Js([PyJs_anonymous_940_, Js({'./_a-function':Js(5.0),'./_an-instance':Js(9.0),'./_an-object':Js(10.0),'./_core':Js(26.0),'./_export':Js(36.0),'./_for-of':Js(42.0),'./_global':Js(44.0),'./_hide':Js(46.0),'./_microtask':Js(71.0),'./_redefine-all':Js(94.0),'./_set-species':Js(103.0),'./_wks':Js(132.0)})]),'302':Js([PyJs_anonymous_968_, Js({'./_core':Js(26.0),'./_export':Js(36.0),'./_global':Js(44.0),'./_promise-resolve':Js(92.0),'./_species-constructor':Js(107.0)})]),'303':Js([PyJs_anonymous_974_, Js({'./_export':Js(36.0),'./_new-promise-capability':Js(72.0),'./_perform':Js(91.0)})]),'304':Js([PyJs_anonymous_976_, Js({'./_an-object':Js(10.0),'./_metadata':Js(70.0)})]),'305':Js([PyJs_anonymous_978_, Js({'./_an-object':Js(10.0),'./_metadata':Js(70.0)})]),'306':Js([PyJs_anonymous_980_, Js({'./_an-object':Js(10.0),'./_array-from-iterable':Js(13.0),'./_metadata':Js(70.0),'./_object-gpo':Js(82.0),'./es6.set':Js(236.0)})]),'307':Js([PyJs_anonymous_983_, Js({'./_an-object':Js(10.0),'./_metadata':Js(70.0),'./_object-gpo':Js(82.0)})]),'308':Js([PyJs_anonymous_986_, Js({'./_an-object':Js(10.0),'./_metadata':Js(70.0)})]),'309':Js([PyJs_anonymous_988_, Js({'./_an-object':Js(10.0),'./_metadata':Js(70.0)})]),'310':Js([PyJs_anonymous_990_, Js({'./_an-object':Js(10.0),'./_metadata':Js(70.0),'./_object-gpo':Js(82.0)})]),'311':Js([PyJs_anonymous_993_, Js({'./_an-object':Js(10.0),'./_metadata':Js(70.0)})]),'312':Js([PyJs_anonymous_995_, Js({'./_a-function':Js(5.0),'./_an-object':Js(10.0),'./_metadata':Js(70.0)})]),'313':Js([PyJs_anonymous_998_, Js({'./_set-collection-from':Js(100.0)})]),'314':Js([PyJs_anonymous_999_, Js({'./_set-collection-of':Js(101.0)})]),'315':Js([PyJs_anonymous_1000_, Js({'./_collection-to-json':Js(23.0),'./_export':Js(36.0)})]),'316':Js([PyJs_anonymous_1001_, Js({'./_export':Js(36.0),'./_fails':Js(38.0),'./_string-at':Js(109.0)})]),'317':Js([PyJs_anonymous_1004_, Js({'./_defined':Js(31.0),'./_export':Js(36.0),'./_flags':Js(40.0),'./_is-regexp':Js(56.0),'./_iter-create':Js(58.0),'./_to-length':Js(121.0)})]),'318':Js([PyJs_anonymous_1008_, Js({'./_export':Js(36.0),'./_string-pad':Js(112.0),'./_user-agent':Js(128.0)})]),'319':Js([PyJs_anonymous_1010_, Js({'./_export':Js(36.0),'./_string-pad':Js(112.0),'./_user-agent':Js(128.0)})]),'320':Js([PyJs_anonymous_1012_, Js({'./_string-trim':Js(114.0)})]),'321':Js([PyJs_anonymous_1015_, Js({'./_string-trim':Js(114.0)})]),'322':Js([PyJs_anonymous_1018_, Js({'./_wks-define':Js(130.0)})]),'323':Js([PyJs_anonymous_1019_, Js({'./_wks-define':Js(130.0)})]),'324':Js([PyJs_anonymous_1020_, Js({'./_export':Js(36.0),'./_global':Js(44.0)})]),'325':Js([PyJs_anonymous_1021_, Js({'./_set-collection-from':Js(100.0)})]),'326':Js([PyJs_anonymous_1022_, Js({'./_set-collection-of':Js(101.0)})]),'327':Js([PyJs_anonymous_1023_, Js({'./_set-collection-from':Js(100.0)})]),'328':Js([PyJs_anonymous_1024_, Js({'./_set-collection-of':Js(101.0)})]),'329':Js([PyJs_anonymous_1025_, Js({'./_global':Js(44.0),'./_hide':Js(46.0),'./_iterators':Js(62.0),'./_object-keys':Js(84.0),'./_redefine':Js(95.0),'./_wks':Js(132.0),'./es6.array.iterator':Js(145.0)})]),'330':Js([PyJs_anonymous_1026_, Js({'./_export':Js(36.0),'./_task':Js(116.0)})]),'331':Js([PyJs_anonymous_1027_, Js({'./_export':Js(36.0),'./_global':Js(44.0),'./_user-agent':Js(128.0)})]),'332':Js([PyJs_anonymous_1031_, Js({'./modules/_core':Js(26.0),'./modules/es6.array.copy-within':Js(135.0),'./modules/es6.array.every':Js(136.0),'./modules/es6.array.fill':Js(137.0),'./modules/es6.array.filter':Js(138.0),'./modules/es6.array.find':Js(140.0),'./modules/es6.array.find-index':Js(139.0),'./modules/es6.array.for-each':Js(141.0),'./modules/es6.array.from':Js(142.0),'./modules/es6.array.index-of':Js(143.0),'./modules/es6.array.is-array':Js(144.0),'./modules/es6.array.iterator':Js(145.0),'./modules/es6.array.join':Js(146.0),'./modules/es6.array.last-index-of':Js(147.0),'./modules/es6.array.map':Js(148.0),'./modules/es6.array.of':Js(149.0),'./modules/es6.array.reduce':Js(151.0),'./modules/es6.array.reduce-right':Js(150.0),'./modules/es6.array.slice':Js(152.0),'./modules/es6.array.some':Js(153.0),'./modules/es6.array.sort':Js(154.0),'./modules/es6.array.species':Js(155.0),'./modules/es6.date.now':Js(156.0),'./modules/es6.date.to-iso-string':Js(157.0),'./modules/es6.date.to-json':Js(158.0),'./modules/es6.date.to-primitive':Js(159.0),'./modules/es6.date.to-string':Js(160.0),'./modules/es6.function.bind':Js(161.0),'./modules/es6.function.has-instance':Js(162.0),'./modules/es6.function.name':Js(163.0),'./modules/es6.map':Js(164.0),'./modules/es6.math.acosh':Js(165.0),'./modules/es6.math.asinh':Js(166.0),'./modules/es6.math.atanh':Js(167.0),'./modules/es6.math.cbrt':Js(168.0),'./modules/es6.math.clz32':Js(169.0),'./modules/es6.math.cosh':Js(170.0),'./modules/es6.math.expm1':Js(171.0),'./modules/es6.math.fround':Js(172.0),'./modules/es6.math.hypot':Js(173.0),'./modules/es6.math.imul':Js(174.0),'./modules/es6.math.log10':Js(175.0),'./modules/es6.math.log1p':Js(176.0),'./modules/es6.math.log2':Js(177.0),'./modules/es6.math.sign':Js(178.0),'./modules/es6.math.sinh':Js(179.0),'./modules/es6.math.tanh':Js(180.0),'./modules/es6.math.trunc':Js(181.0),'./modules/es6.number.constructor':Js(182.0),'./modules/es6.number.epsilon':Js(183.0),'./modules/es6.number.is-finite':Js(184.0),'./modules/es6.number.is-integer':Js(185.0),'./modules/es6.number.is-nan':Js(186.0),'./modules/es6.number.is-safe-integer':Js(187.0),'./modules/es6.number.max-safe-integer':Js(188.0),'./modules/es6.number.min-safe-integer':Js(189.0),'./modules/es6.number.parse-float':Js(190.0),'./modules/es6.number.parse-int':Js(191.0),'./modules/es6.number.to-fixed':Js(192.0),'./modules/es6.number.to-precision':Js(193.0),'./modules/es6.object.assign':Js(194.0),'./modules/es6.object.create':Js(195.0),'./modules/es6.object.define-properties':Js(196.0),'./modules/es6.object.define-property':Js(197.0),'./modules/es6.object.freeze':Js(198.0),'./modules/es6.object.get-own-property-descriptor':Js(199.0),'./modules/es6.object.get-own-property-names':Js(200.0),'./modules/es6.object.get-prototype-of':Js(201.0),'./modules/es6.object.is':Js(205.0),'./modules/es6.object.is-extensible':Js(202.0),'./modules/es6.object.is-frozen':Js(203.0),'./modules/es6.object.is-sealed':Js(204.0),'./modules/es6.object.keys':Js(206.0),'./modules/es6.object.prevent-extensions':Js(207.0),'./modules/es6.object.seal':Js(208.0),'./modules/es6.object.set-prototype-of':Js(209.0),'./modules/es6.object.to-string':Js(210.0),'./modules/es6.parse-float':Js(211.0),'./modules/es6.parse-int':Js(212.0),'./modules/es6.promise':Js(213.0),'./modules/es6.reflect.apply':Js(214.0),'./modules/es6.reflect.construct':Js(215.0),'./modules/es6.reflect.define-property':Js(216.0),'./modules/es6.reflect.delete-property':Js(217.0),'./modules/es6.reflect.enumerate':Js(218.0),'./modules/es6.reflect.get':Js(221.0),'./modules/es6.reflect.get-own-property-descriptor':Js(219.0),'./modules/es6.reflect.get-prototype-of':Js(220.0),'./modules/es6.reflect.has':Js(222.0),'./modules/es6.reflect.is-extensible':Js(223.0),'./modules/es6.reflect.own-keys':Js(224.0),'./modules/es6.reflect.prevent-extensions':Js(225.0),'./modules/es6.reflect.set':Js(227.0),'./modules/es6.reflect.set-prototype-of':Js(226.0),'./modules/es6.regexp.constructor':Js(228.0),'./modules/es6.regexp.exec':Js(229.0),'./modules/es6.regexp.flags':Js(230.0),'./modules/es6.regexp.match':Js(231.0),'./modules/es6.regexp.replace':Js(232.0),'./modules/es6.regexp.search':Js(233.0),'./modules/es6.regexp.split':Js(234.0),'./modules/es6.regexp.to-string':Js(235.0),'./modules/es6.set':Js(236.0),'./modules/es6.string.anchor':Js(237.0),'./modules/es6.string.big':Js(238.0),'./modules/es6.string.blink':Js(239.0),'./modules/es6.string.bold':Js(240.0),'./modules/es6.string.code-point-at':Js(241.0),'./modules/es6.string.ends-with':Js(242.0),'./modules/es6.string.fixed':Js(243.0),'./modules/es6.string.fontcolor':Js(244.0),'./modules/es6.string.fontsize':Js(245.0),'./modules/es6.string.from-code-point':Js(246.0),'./modules/es6.string.includes':Js(247.0),'./modules/es6.string.italics':Js(248.0),'./modules/es6.string.iterator':Js(249.0),'./modules/es6.string.link':Js(250.0),'./modules/es6.string.raw':Js(251.0),'./modules/es6.string.repeat':Js(252.0),'./modules/es6.string.small':Js(253.0),'./modules/es6.string.starts-with':Js(254.0),'./modules/es6.string.strike':Js(255.0),'./modules/es6.string.sub':Js(256.0),'./modules/es6.string.sup':Js(257.0),'./modules/es6.string.trim':Js(258.0),'./modules/es6.symbol':Js(259.0),'./modules/es6.typed.array-buffer':Js(260.0),'./modules/es6.typed.data-view':Js(261.0),'./modules/es6.typed.float32-array':Js(262.0),'./modules/es6.typed.float64-array':Js(263.0),'./modules/es6.typed.int16-array':Js(264.0),'./modules/es6.typed.int32-array':Js(265.0),'./modules/es6.typed.int8-array':Js(266.0),'./modules/es6.typed.uint16-array':Js(267.0),'./modules/es6.typed.uint32-array':Js(268.0),'./modules/es6.typed.uint8-array':Js(269.0),'./modules/es6.typed.uint8-clamped-array':Js(270.0),'./modules/es6.weak-map':Js(271.0),'./modules/es6.weak-set':Js(272.0),'./modules/es7.array.flat-map':Js(273.0),'./modules/es7.array.flatten':Js(274.0),'./modules/es7.array.includes':Js(275.0),'./modules/es7.asap':Js(276.0),'./modules/es7.error.is-error':Js(277.0),'./modules/es7.global':Js(278.0),'./modules/es7.map.from':Js(279.0),'./modules/es7.map.of':Js(280.0),'./modules/es7.map.to-json':Js(281.0),'./modules/es7.math.clamp':Js(282.0),'./modules/es7.math.deg-per-rad':Js(283.0),'./modules/es7.math.degrees':Js(284.0),'./modules/es7.math.fscale':Js(285.0),'./modules/es7.math.iaddh':Js(286.0),'./modules/es7.math.imulh':Js(287.0),'./modules/es7.math.isubh':Js(288.0),'./modules/es7.math.rad-per-deg':Js(289.0),'./modules/es7.math.radians':Js(290.0),'./modules/es7.math.scale':Js(291.0),'./modules/es7.math.signbit':Js(292.0),'./modules/es7.math.umulh':Js(293.0),'./modules/es7.object.define-getter':Js(294.0),'./modules/es7.object.define-setter':Js(295.0),'./modules/es7.object.entries':Js(296.0),'./modules/es7.object.get-own-property-descriptors':Js(297.0),'./modules/es7.object.lookup-getter':Js(298.0),'./modules/es7.object.lookup-setter':Js(299.0),'./modules/es7.object.values':Js(300.0),'./modules/es7.observable':Js(301.0),'./modules/es7.promise.finally':Js(302.0),'./modules/es7.promise.try':Js(303.0),'./modules/es7.reflect.define-metadata':Js(304.0),'./modules/es7.reflect.delete-metadata':Js(305.0),'./modules/es7.reflect.get-metadata':Js(307.0),'./modules/es7.reflect.get-metadata-keys':Js(306.0),'./modules/es7.reflect.get-own-metadata':Js(309.0),'./modules/es7.reflect.get-own-metadata-keys':Js(308.0),'./modules/es7.reflect.has-metadata':Js(310.0),'./modules/es7.reflect.has-own-metadata':Js(311.0),'./modules/es7.reflect.metadata':Js(312.0),'./modules/es7.set.from':Js(313.0),'./modules/es7.set.of':Js(314.0),'./modules/es7.set.to-json':Js(315.0),'./modules/es7.string.at':Js(316.0),'./modules/es7.string.match-all':Js(317.0),'./modules/es7.string.pad-end':Js(318.0),'./modules/es7.string.pad-start':Js(319.0),'./modules/es7.string.trim-left':Js(320.0),'./modules/es7.string.trim-right':Js(321.0),'./modules/es7.symbol.async-iterator':Js(322.0),'./modules/es7.symbol.observable':Js(323.0),'./modules/es7.system.global':Js(324.0),'./modules/es7.weak-map.from':Js(325.0),'./modules/es7.weak-map.of':Js(326.0),'./modules/es7.weak-set.from':Js(327.0),'./modules/es7.weak-set.of':Js(328.0),'./modules/web.dom.iterable':Js(329.0),'./modules/web.immediate':Js(330.0),'./modules/web.timers':Js(331.0)})]),'333':Js([PyJs_anonymous_1032_, Js({'./package.json':Js(347.0),'estraverse':Js(348.0),'esutils':Js(336.0),'source-map':Js(337.0)})]),'334':Js([PyJs_anonymous_1064_, Js({})]),'335':Js([PyJs_anonymous_1071_, Js({'./code':Js(334.0)})]),'336':Js([PyJs_anonymous_1073_, Js({'./code':Js(334.0),'./keyword':Js(335.0)})]),'337':Js([PyJs_anonymous_1075_, Js({'./source-map/source-map-consumer':Js(343.0),'./source-map/source-map-generator':Js(344.0),'./source-map/source-node':Js(345.0)})]),'338':Js([PyJs_anonymous_1076_, Js({'./util':Js(346.0),'amdefine':Js(2.0)})]),'339':Js([PyJs_anonymous_1084_, Js({'./base64':Js(340.0),'amdefine':Js(2.0)})]),'340':Js([PyJs_anonymous_1088_, Js({'amdefine':Js(2.0)})]),'341':Js([PyJs_anonymous_1093_, Js({'amdefine':Js(2.0)})]),'342':Js([PyJs_anonymous_1096_, Js({'./util':Js(346.0),'amdefine':Js(2.0)})]),'343':Js([PyJs_anonymous_1101_, Js({'./array-set':Js(338.0),'./base64-vlq':Js(339.0),'./binary-search':Js(341.0),'./util':Js(346.0),'amdefine':Js(2.0)})]),'344':Js([PyJs_anonymous_1118_, Js({'./array-set':Js(338.0),'./base64-vlq':Js(339.0),'./mapping-list':Js(342.0),'./util':Js(346.0),'amdefine':Js(2.0)})]),'345':Js([PyJs_anonymous_1135_, Js({'./source-map-generator':Js(344.0),'./util':Js(346.0),'amdefine':Js(2.0)})]),'346':Js([PyJs_anonymous_1154_, Js({'amdefine':Js(2.0)})]),'347':Js([PyJs_anonymous_1156_, Js({})]),'348':Js([PyJs_anonymous_1158_, Js({})]),'349':Js([PyJs_anonymous_1178_, Js({'_process':Js(350.0)})]),'350':Js([PyJs_anonymous_1192_, Js({})]),'351':Js([PyJs_anonymous_1201_, Js({})])}), Js({}), Js([Js(1.0)]))
PyJs_LONG_1235_()
pass
pass
pass
pass
var.put('escodegen', var.get('getFromGlobals')(Js('escodegen')))
var.get('escodegen')
