# coding: utf-8

"""
    TheTVDB API v2

    API v2 targets v1 functionality with a few minor additions.
    The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.

    OpenAPI spec version: 2.1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SeriesSearchData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, aliases=None, banner=None, first_aired=None, id=None, network=None, overview=None, series_name=None, status=None):
        """
        SeriesSearchData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'aliases': 'list[str]',
            'banner': 'str',
            'first_aired': 'str',
            'id': 'int',
            'network': 'str',
            'overview': 'str',
            'series_name': 'str',
            'status': 'str'
        }

        self.attribute_map = {
            'aliases': 'aliases',
            'banner': 'banner',
            'first_aired': 'firstAired',
            'id': 'id',
            'network': 'network',
            'overview': 'overview',
            'series_name': 'seriesName',
            'status': 'status'
        }

        self._aliases = aliases
        self._banner = banner
        self._first_aired = first_aired
        self._id = id
        self._network = network
        self._overview = overview
        self._series_name = series_name
        self._status = status

    @property
    def aliases(self):
        """
        Gets the aliases of this SeriesSearchData.


        :return: The aliases of this SeriesSearchData.
        :rtype: list[str]
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """
        Sets the aliases of this SeriesSearchData.


        :param aliases: The aliases of this SeriesSearchData.
        :type: list[str]
        """

        self._aliases = aliases

    @property
    def banner(self):
        """
        Gets the banner of this SeriesSearchData.


        :return: The banner of this SeriesSearchData.
        :rtype: str
        """
        return self._banner

    @banner.setter
    def banner(self, banner):
        """
        Sets the banner of this SeriesSearchData.


        :param banner: The banner of this SeriesSearchData.
        :type: str
        """

        self._banner = banner

    @property
    def first_aired(self):
        """
        Gets the first_aired of this SeriesSearchData.


        :return: The first_aired of this SeriesSearchData.
        :rtype: str
        """
        return self._first_aired

    @first_aired.setter
    def first_aired(self, first_aired):
        """
        Sets the first_aired of this SeriesSearchData.


        :param first_aired: The first_aired of this SeriesSearchData.
        :type: str
        """

        self._first_aired = first_aired

    @property
    def id(self):
        """
        Gets the id of this SeriesSearchData.


        :return: The id of this SeriesSearchData.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SeriesSearchData.


        :param id: The id of this SeriesSearchData.
        :type: int
        """

        self._id = id

    @property
    def network(self):
        """
        Gets the network of this SeriesSearchData.


        :return: The network of this SeriesSearchData.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """
        Sets the network of this SeriesSearchData.


        :param network: The network of this SeriesSearchData.
        :type: str
        """

        self._network = network

    @property
    def overview(self):
        """
        Gets the overview of this SeriesSearchData.


        :return: The overview of this SeriesSearchData.
        :rtype: str
        """
        return self._overview

    @overview.setter
    def overview(self, overview):
        """
        Sets the overview of this SeriesSearchData.


        :param overview: The overview of this SeriesSearchData.
        :type: str
        """

        self._overview = overview

    @property
    def series_name(self):
        """
        Gets the series_name of this SeriesSearchData.


        :return: The series_name of this SeriesSearchData.
        :rtype: str
        """
        return self._series_name

    @series_name.setter
    def series_name(self, series_name):
        """
        Sets the series_name of this SeriesSearchData.


        :param series_name: The series_name of this SeriesSearchData.
        :type: str
        """

        self._series_name = series_name

    @property
    def status(self):
        """
        Gets the status of this SeriesSearchData.


        :return: The status of this SeriesSearchData.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this SeriesSearchData.


        :param status: The status of this SeriesSearchData.
        :type: str
        """

        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
