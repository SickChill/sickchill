{
  "version":"2.0",
  "metadata":{
    "uid":"elasticloadbalancingv2-2015-12-01",
    "apiVersion":"2015-12-01",
    "endpointPrefix":"elasticloadbalancing",
    "protocol":"query",
    "serviceAbbreviation":"Elastic Load Balancing v2",
    "serviceFullName":"Elastic Load Balancing",
    "signatureVersion":"v4",
    "xmlNamespace":"http://elasticloadbalancing.amazonaws.com/doc/2015-12-01/"
  },
  "operations":{
    "AddTags":{
      "name":"AddTags",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AddTagsInput"},
      "output":{
        "shape":"AddTagsOutput",
        "resultWrapper":"AddTagsResult"
      },
      "errors":[
        {"shape":"DuplicateTagKeysException"},
        {"shape":"TooManyTagsException"},
        {"shape":"LoadBalancerNotFoundException"},
        {"shape":"TargetGroupNotFoundException"}
      ],
      "documentation":"<p>Adds the specified tags to the specified resource. You can tag your Application Load Balancers and your target groups.</p> <p>Each tag consists of a key and an optional value. If a resource already has a tag with the same key, <code>AddTags</code> updates its value.</p> <p>To list the current tags for your resources, use <a>DescribeTags</a>. To remove tags from your resources, use <a>RemoveTags</a>.</p>"
    },
    "CreateListener":{
      "name":"CreateListener",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateListenerInput"},
      "output":{
        "shape":"CreateListenerOutput",
        "resultWrapper":"CreateListenerResult"
      },
      "errors":[
        {"shape":"DuplicateListenerException"},
        {"shape":"TooManyListenersException"},
        {"shape":"TooManyCertificatesException"},
        {"shape":"LoadBalancerNotFoundException"},
        {"shape":"TargetGroupNotFoundException"},
        {"shape":"TargetGroupAssociationLimitException"},
        {"shape":"InvalidConfigurationRequestException"},
        {"shape":"IncompatibleProtocolsException"},
        {"shape":"SSLPolicyNotFoundException"},
        {"shape":"CertificateNotFoundException"},
        {"shape":"UnsupportedProtocolException"},
        {"shape":"TooManyRegistrationsForTargetIdException"}
      ],
      "documentation":"<p>Creates a listener for the specified Application Load Balancer.</p> <p>You can create up to 10 listeners per load balancer.</p> <p>To update a listener, use <a>ModifyListener</a>. When you are finished with a listener, you can delete it using <a>DeleteListener</a>. If you are finished with both the listener and the load balancer, you can delete them both using <a>DeleteLoadBalancer</a>.</p> <p>For more information, see <a href=\"http://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html\">Listeners for Your Application Load Balancers</a> in the <i>Application Load Balancers Guide</i>.</p>"
    },
    "CreateLoadBalancer":{
      "name":"CreateLoadBalancer",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateLoadBalancerInput"},
      "output":{
        "shape":"CreateLoadBalancerOutput",
        "resultWrapper":"CreateLoadBalancerResult"
      },
      "errors":[
        {"shape":"DuplicateLoadBalancerNameException"},
        {"shape":"TooManyLoadBalancersException"},
        {"shape":"InvalidConfigurationRequestException"},
        {"shape":"SubnetNotFoundException"},
        {"shape":"InvalidSubnetException"},
        {"shape":"InvalidSecurityGroupException"},
        {"shape":"InvalidSchemeException"},
        {"shape":"TooManyTagsException"},
        {"shape":"DuplicateTagKeysException"}
      ],
      "documentation":"<p>Creates an Application Load Balancer.</p> <p>To create listeners for your load balancer, use <a>CreateListener</a>. You can add security groups, subnets, and tags when you create your load balancer, or you can add them later using <a>SetSecurityGroups</a>, <a>SetSubnets</a>, and <a>AddTags</a>.</p> <p>To describe your current load balancers, see <a>DescribeLoadBalancers</a>. When you are finished with a load balancer, you can delete it using <a>DeleteLoadBalancer</a>.</p> <p>You can create up to 20 load balancers per region per account. You can request an increase for the number of load balancers for your account. For more information, see <a href=\"http://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-limits.html\">Limits for Your Application Load Balancer</a> in the <i>Application Load Balancers Guide</i>.</p> <p>For more information, see <a href=\"http://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html\">Application Load Balancers</a> in the <i>Application Load Balancers Guide</i>.</p>"
    },
    "CreateRule":{
      "name":"CreateRule",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateRuleInput"},
      "output":{
        "shape":"CreateRuleOutput",
        "resultWrapper":"CreateRuleResult"
      },
      "errors":[
        {"shape":"PriorityInUseException"},
        {"shape":"TooManyTargetGroupsException"},
        {"shape":"TooManyRulesException"},
        {"shape":"TargetGroupAssociationLimitException"},
        {"shape":"ListenerNotFoundException"},
        {"shape":"TargetGroupNotFoundException"},
        {"shape":"InvalidConfigurationRequestException"},
        {"shape":"TooManyRegistrationsForTargetIdException"}
      ],
      "documentation":"<p>Creates a rule for the specified listener.</p> <p>Each rule can have one action and one condition. Rules are evaluated in priority order, from the lowest value to the highest value. When the condition for a rule is met, the specified action is taken. If no conditions are met, the default action for the default rule is taken. For more information, see <a href=\"http://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#listener-rules\">Listener Rules</a> in the <i>Application Load Balancers Guide</i>.</p> <p>To view your current rules, use <a>DescribeRules</a>. To update a rule, use <a>ModifyRule</a>. To set the priorities of your rules, use <a>SetRulePriorities</a>. To delete a rule, use <a>DeleteRule</a>.</p>"
    },
    "CreateTargetGroup":{
      "name":"CreateTargetGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateTargetGroupInput"},
      "output":{
        "shape":"CreateTargetGroupOutput",
        "resultWrapper":"CreateTargetGroupResult"
      },
      "errors":[
        {"shape":"DuplicateTargetGroupNameException"},
        {"shape":"TooManyTargetGroupsException"}
      ],
      "documentation":"<p>Creates a target group.</p> <p>To register targets with the target group, use <a>RegisterTargets</a>. To update the health check settings for the target group, use <a>ModifyTargetGroup</a>. To monitor the health of targets in the target group, use <a>DescribeTargetHealth</a>.</p> <p>To route traffic to the targets in a target group, specify the target group in an action using <a>CreateListener</a> or <a>CreateRule</a>.</p> <p>To delete a target group, use <a>DeleteTargetGroup</a>.</p> <p>For more information, see <a href=\"http://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html\">Target Groups for Your Application Load Balancers</a> in the <i>Application Load Balancers Guide</i>.</p>"
    },
    "DeleteListener":{
      "name":"DeleteListener",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteListenerInput"},
      "output":{
        "shape":"DeleteListenerOutput",
        "resultWrapper":"DeleteListenerResult"
      },
      "errors":[
        {"shape":"ListenerNotFoundException"}
      ],
      "documentation":"<p>Deletes the specified listener.</p> <p>Alternatively, your listener is deleted when you delete the load balancer it is attached to using <a>DeleteLoadBalancer</a>.</p>"
    },
    "DeleteLoadBalancer":{
      "name":"DeleteLoadBalancer",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteLoadBalancerInput"},
      "output":{
        "shape":"DeleteLoadBalancerOutput",
        "resultWrapper":"DeleteLoadBalancerResult"
      },
      "errors":[
        {"shape":"LoadBalancerNotFoundException"},
        {"shape":"OperationNotPermittedException"}
      ],
      "documentation":"<p>Deletes the specified Application Load Balancer and its attached listeners.</p> <p>You can't delete a load balancer if deletion protection is enabled. If the load balancer does not exist or has already been deleted, the call succeeds.</p> <p>Deleting a load balancer does not affect its registered targets. For example, your EC2 instances continue to run and are still registered to their target groups. If you no longer need these EC2 instances, you can stop or terminate them.</p>"
    },
    "DeleteRule":{
      "name":"DeleteRule",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteRuleInput"},
      "output":{
        "shape":"DeleteRuleOutput",
        "resultWrapper":"DeleteRuleResult"
      },
      "errors":[
        {"shape":"RuleNotFoundException"},
        {"shape":"OperationNotPermittedException"}
      ],
      "documentation":"<p>Deletes the specified rule.</p>"
    },
    "DeleteTargetGroup":{
      "name":"DeleteTargetGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteTargetGroupInput"},
      "output":{
        "shape":"DeleteTargetGroupOutput",
        "resultWrapper":"DeleteTargetGroupResult"
      },
      "errors":[
        {"shape":"ResourceInUseException"}
      ],
      "documentation":"<p>Deletes the specified target group.</p> <p>You can delete a target group if it is not referenced by any actions. Deleting a target group also deletes any associated health checks.</p>"
    },
    "DeregisterTargets":{
      "name":"DeregisterTargets",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeregisterTargetsInput"},
      "output":{
        "shape":"DeregisterTargetsOutput",
        "resultWrapper":"DeregisterTargetsResult"
      },
      "errors":[
        {"shape":"TargetGroupNotFoundException"},
        {"shape":"InvalidTargetException"}
      ],
      "documentation":"<p>Deregisters the specified targets from the specified target group. After the targets are deregistered, they no longer receive traffic from the load balancer.</p>"
    },
    "DescribeListeners":{
      "name":"DescribeListeners",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeListenersInput"},
      "output":{
        "shape":"DescribeListenersOutput",
        "resultWrapper":"DescribeListenersResult"
      },
      "errors":[
        {"shape":"ListenerNotFoundException"},
        {"shape":"LoadBalancerNotFoundException"}
      ],
      "documentation":"<p>Describes the specified listeners or the listeners for the specified Application Load Balancer. You must specify either a load balancer or one or more listeners.</p>"
    },
    "DescribeLoadBalancerAttributes":{
      "name":"DescribeLoadBalancerAttributes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeLoadBalancerAttributesInput"},
      "output":{
        "shape":"DescribeLoadBalancerAttributesOutput",
        "resultWrapper":"DescribeLoadBalancerAttributesResult"
      },
      "errors":[
        {"shape":"LoadBalancerNotFoundException"}
      ],
      "documentation":"<p>Describes the attributes for the specified Application Load Balancer.</p>"
    },
    "DescribeLoadBalancers":{
      "name":"DescribeLoadBalancers",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeLoadBalancersInput"},
      "output":{
        "shape":"DescribeLoadBalancersOutput",
        "resultWrapper":"DescribeLoadBalancersResult"
      },
      "errors":[
        {"shape":"LoadBalancerNotFoundException"}
      ],
      "documentation":"<p>Describes the specified Application Load Balancers or all of your Application Load Balancers.</p> <p>To describe the listeners for a load balancer, use <a>DescribeListeners</a>. To describe the attributes for a load balancer, use <a>DescribeLoadBalancerAttributes</a>.</p>"
    },
    "DescribeRules":{
      "name":"DescribeRules",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeRulesInput"},
      "output":{
        "shape":"DescribeRulesOutput",
        "resultWrapper":"DescribeRulesResult"
      },
      "errors":[
        {"shape":"ListenerNotFoundException"},
        {"shape":"RuleNotFoundException"}
      ],
      "documentation":"<p>Describes the specified rules or the rules for the specified listener. You must specify either a listener or one or more rules.</p>"
    },
    "DescribeSSLPolicies":{
      "name":"DescribeSSLPolicies",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeSSLPoliciesInput"},
      "output":{
        "shape":"DescribeSSLPoliciesOutput",
        "resultWrapper":"DescribeSSLPoliciesResult"
      },
      "errors":[
        {"shape":"SSLPolicyNotFoundException"}
      ],
      "documentation":"<p>Describes the specified policies or all policies used for SSL negotiation.</p> <p>Note that the only supported policy at this time is ELBSecurityPolicy-2015-05.</p>"
    },
    "DescribeTags":{
      "name":"DescribeTags",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeTagsInput"},
      "output":{
        "shape":"DescribeTagsOutput",
        "resultWrapper":"DescribeTagsResult"
      },
      "errors":[
        {"shape":"LoadBalancerNotFoundException"},
        {"shape":"TargetGroupNotFoundException"},
        {"shape":"ListenerNotFoundException"},
        {"shape":"RuleNotFoundException"}
      ],
      "documentation":"<p>Describes the tags for the specified resources.</p>"
    },
    "DescribeTargetGroupAttributes":{
      "name":"DescribeTargetGroupAttributes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeTargetGroupAttributesInput"},
      "output":{
        "shape":"DescribeTargetGroupAttributesOutput",
        "resultWrapper":"DescribeTargetGroupAttributesResult"
      },
      "errors":[
        {"shape":"TargetGroupNotFoundException"}
      ],
      "documentation":"<p>Describes the attributes for the specified target group.</p>"
    },
    "DescribeTargetGroups":{
      "name":"DescribeTargetGroups",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeTargetGroupsInput"},
      "output":{
        "shape":"DescribeTargetGroupsOutput",
        "resultWrapper":"DescribeTargetGroupsResult"
      },
      "errors":[
        {"shape":"LoadBalancerNotFoundException"},
        {"shape":"TargetGroupNotFoundException"}
      ],
      "documentation":"<p>Describes the specified target groups or all of your target groups. By default, all target groups are described. Alternatively, you can specify one of the following to filter the results: the ARN of the load balancer, the names of one or more target groups, or the ARNs of one or more target groups.</p> <p>To describe the targets for a target group, use <a>DescribeTargetHealth</a>. To describe the attributes of a target group, use <a>DescribeTargetGroupAttributes</a>.</p>"
    },
    "DescribeTargetHealth":{
      "name":"DescribeTargetHealth",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeTargetHealthInput"},
      "output":{
        "shape":"DescribeTargetHealthOutput",
        "resultWrapper":"DescribeTargetHealthResult"
      },
      "errors":[
        {"shape":"InvalidTargetException"},
        {"shape":"TargetGroupNotFoundException"},
        {"shape":"HealthUnavailableException"}
      ],
      "documentation":"<p>Describes the health of the specified targets or all of your targets.</p>"
    },
    "ModifyListener":{
      "name":"ModifyListener",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ModifyListenerInput"},
      "output":{
        "shape":"ModifyListenerOutput",
        "resultWrapper":"ModifyListenerResult"
      },
      "errors":[
        {"shape":"DuplicateListenerException"},
        {"shape":"TooManyListenersException"},
        {"shape":"TooManyCertificatesException"},
        {"shape":"ListenerNotFoundException"},
        {"shape":"TargetGroupNotFoundException"},
        {"shape":"TargetGroupAssociationLimitException"},
        {"shape":"IncompatibleProtocolsException"},
        {"shape":"SSLPolicyNotFoundException"},
        {"shape":"CertificateNotFoundException"},
        {"shape":"InvalidConfigurationRequestException"},
        {"shape":"UnsupportedProtocolException"},
        {"shape":"TooManyRegistrationsForTargetIdException"}
      ],
      "documentation":"<p>Modifies the specified properties of the specified listener.</p> <p>Any properties that you do not specify retain their current values. However, changing the protocol from HTTPS to HTTP removes the security policy and SSL certificate properties. If you change the protocol from HTTP to HTTPS, you must add the security policy.</p>"
    },
    "ModifyLoadBalancerAttributes":{
      "name":"ModifyLoadBalancerAttributes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ModifyLoadBalancerAttributesInput"},
      "output":{
        "shape":"ModifyLoadBalancerAttributesOutput",
        "resultWrapper":"ModifyLoadBalancerAttributesResult"
      },
      "errors":[
        {"shape":"LoadBalancerNotFoundException"},
        {"shape":"InvalidConfigurationRequestException"}
      ],
      "documentation":"<p>Modifies the specified attributes of the specified Application Load Balancer.</p> <p>If any of the specified attributes can't be modified as requested, the call fails. Any existing attributes that you do not modify retain their current values.</p>"
    },
    "ModifyRule":{
      "name":"ModifyRule",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ModifyRuleInput"},
      "output":{
        "shape":"ModifyRuleOutput",
        "resultWrapper":"ModifyRuleResult"
      },
      "errors":[
        {"shape":"TargetGroupAssociationLimitException"},
        {"shape":"RuleNotFoundException"},
        {"shape":"OperationNotPermittedException"},
        {"shape":"TooManyRegistrationsForTargetIdException"}
      ],
      "documentation":"<p>Modifies the specified rule.</p> <p>Any existing properties that you do not modify retain their current values.</p> <p>To modify the default action, use <a>ModifyListener</a>.</p>"
    },
    "ModifyTargetGroup":{
      "name":"ModifyTargetGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ModifyTargetGroupInput"},
      "output":{
        "shape":"ModifyTargetGroupOutput",
        "resultWrapper":"ModifyTargetGroupResult"
      },
      "errors":[
        {"shape":"TargetGroupNotFoundException"}
      ],
      "documentation":"<p>Modifies the health checks used when evaluating the health state of the targets in the specified target group.</p> <p>To monitor the health of the targets, use <a>DescribeTargetHealth</a>.</p>"
    },
    "ModifyTargetGroupAttributes":{
      "name":"ModifyTargetGroupAttributes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ModifyTargetGroupAttributesInput"},
      "output":{
        "shape":"ModifyTargetGroupAttributesOutput",
        "resultWrapper":"ModifyTargetGroupAttributesResult"
      },
      "errors":[
        {"shape":"TargetGroupNotFoundException"}
      ],
      "documentation":"<p>Modifies the specified attributes of the specified target group.</p>"
    },
    "RegisterTargets":{
      "name":"RegisterTargets",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RegisterTargetsInput"},
      "output":{
        "shape":"RegisterTargetsOutput",
        "resultWrapper":"RegisterTargetsResult"
      },
      "errors":[
        {"shape":"TargetGroupNotFoundException"},
        {"shape":"TooManyTargetsException"},
        {"shape":"InvalidTargetException"},
        {"shape":"TooManyRegistrationsForTargetIdException"}
      ],
      "documentation":"<p>Registers the specified targets with the specified target group.</p> <p>By default, the load balancer routes requests to registered targets using the protocol and port number for the target group. Alternatively, you can override the port for a target when you register it.</p> <p>The target must be in the virtual private cloud (VPC) that you specified for the target group. If the target is an EC2 instance, it can't be in the <code>stopped</code> or <code>running</code> state when you register it.</p> <p>To remove a target from a target group, use <a>DeregisterTargets</a>.</p>"
    },
    "RemoveTags":{
      "name":"RemoveTags",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RemoveTagsInput"},
      "output":{
        "shape":"RemoveTagsOutput",
        "resultWrapper":"RemoveTagsResult"
      },
      "errors":[
        {"shape":"LoadBalancerNotFoundException"},
        {"shape":"TargetGroupNotFoundException"},
        {"shape":"ListenerNotFoundException"},
        {"shape":"RuleNotFoundException"},
        {"shape":"TooManyTagsException"}
      ],
      "documentation":"<p>Removes the specified tags from the specified resource.</p> <p>To list the current tags for your resources, use <a>DescribeTags</a>.</p>"
    },
    "SetRulePriorities":{
      "name":"SetRulePriorities",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SetRulePrioritiesInput"},
      "output":{
        "shape":"SetRulePrioritiesOutput",
        "resultWrapper":"SetRulePrioritiesResult"
      },
      "errors":[
        {"shape":"RuleNotFoundException"},
        {"shape":"PriorityInUseException"},
        {"shape":"OperationNotPermittedException"}
      ],
      "documentation":"<p>Sets the priorities of the specified rules.</p> <p>You can reorder the rules as long as there are no priority conflicts in the new order. Any existing rules that you do not specify retain their current priority.</p>"
    },
    "SetSecurityGroups":{
      "name":"SetSecurityGroups",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SetSecurityGroupsInput"},
      "output":{
        "shape":"SetSecurityGroupsOutput",
        "resultWrapper":"SetSecurityGroupsResult"
      },
      "errors":[
        {"shape":"LoadBalancerNotFoundException"},
        {"shape":"InvalidConfigurationRequestException"},
        {"shape":"InvalidSecurityGroupException"}
      ],
      "documentation":"<p>Associates the specified security groups with the specified load balancer. The specified security groups override the previously associated security groups.</p>"
    },
    "SetSubnets":{
      "name":"SetSubnets",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SetSubnetsInput"},
      "output":{
        "shape":"SetSubnetsOutput",
        "resultWrapper":"SetSubnetsResult"
      },
      "errors":[
        {"shape":"LoadBalancerNotFoundException"},
        {"shape":"InvalidConfigurationRequestException"},
        {"shape":"SubnetNotFoundException"},
        {"shape":"InvalidSubnetException"}
      ],
      "documentation":"<p>Enables the Availability Zone for the specified subnets for the specified load balancer. The specified subnets replace the previously enabled subnets.</p>"
    }
  },
  "shapes":{
    "Action":{
      "type":"structure",
      "required":[
        "Type",
        "TargetGroupArn"
      ],
      "members":{
        "Type":{
          "shape":"ActionTypeEnum",
          "documentation":"<p>The type of action.</p>"
        },
        "TargetGroupArn":{
          "shape":"TargetGroupArn",
          "documentation":"<p>The Amazon Resource Name (ARN) of the target group.</p>"
        }
      },
      "documentation":"<p>Information about an action.</p>"
    },
    "ActionTypeEnum":{
      "type":"string",
      "enum":["forward"]
    },
    "Actions":{
      "type":"list",
      "member":{"shape":"Action"}
    },
    "AddTagsInput":{
      "type":"structure",
      "required":[
        "ResourceArns",
        "Tags"
      ],
      "members":{
        "ResourceArns":{
          "shape":"ResourceArns",
          "documentation":"<p>The Amazon Resource Name (ARN) of the resource.</p>"
        },
        "Tags":{
          "shape":"TagList",
          "documentation":"<p>The tags. Each resource can have a maximum of 10 tags.</p>"
        }
      },
      "documentation":"<p>Contains the parameters for AddTags.</p>"
    },
    "AddTagsOutput":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>Contains the output of AddTags.</p>"
    },
    "AvailabilityZone":{
      "type":"structure",
      "members":{
        "ZoneName":{
          "shape":"ZoneName",
          "documentation":"<p>The name of the Availability Zone.</p>"
        },
        "SubnetId":{
          "shape":"SubnetId",
          "documentation":"<p>The ID of the subnet.</p>"
        }
      },
      "documentation":"<p>Information about an Availability Zone.</p>"
    },
    "AvailabilityZones":{
      "type":"list",
      "member":{"shape":"AvailabilityZone"}
    },
    "CanonicalHostedZoneId":{"type":"string"},
    "Certificate":{
      "type":"structure",
      "members":{
        "CertificateArn":{
          "shape":"CertificateArn",
          "documentation":"<p>The Amazon Resource Name (ARN) of the certificate.</p>"
        }
      },
      "documentation":"<p>Information about an SSL server certificate deployed on a load balancer.</p>"
    },
    "CertificateArn":{"type":"string"},
    "CertificateList":{
      "type":"list",
      "member":{"shape":"Certificate"}
    },
    "CertificateNotFoundException":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>The specified certificate does not exist.</p>",
      "error":{
        "code":"CertificateNotFound",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "Cipher":{
      "type":"structure",
      "members":{
        "Name":{
          "shape":"CipherName",
          "documentation":"<p>The name of the cipher.</p>"
        },
        "Priority":{
          "shape":"CipherPriority",
          "documentation":"<p>The priority of the cipher.</p>"
        }
      },
      "documentation":"<p>Information about a cipher used in a policy.</p>"
    },
    "CipherName":{"type":"string"},
    "CipherPriority":{"type":"integer"},
    "Ciphers":{
      "type":"list",
      "member":{"shape":"Cipher"}
    },
    "ConditionFieldName":{
      "type":"string",
      "max":64
    },
    "CreateListenerInput":{
      "type":"structure",
      "required":[
        "LoadBalancerArn",
        "Protocol",
        "Port",
        "DefaultActions"
      ],
      "members":{
        "LoadBalancerArn":{
          "shape":"LoadBalancerArn",
          "documentation":"<p>The Amazon Resource Name (ARN) of the load balancer.</p>"
        },
        "Protocol":{
          "shape":"ProtocolEnum",
          "documentation":"<p>The protocol for connections from clients to the load balancer.</p>"
        },
        "Port":{
          "shape":"Port",
          "documentation":"<p>The port on which the load balancer is listening.</p>"
        },
        "SslPolicy":{
          "shape":"SslPolicyName",
          "documentation":"<p>The security policy that defines which ciphers and protocols are supported. The default is the current predefined security policy.</p>"
        },
        "Certificates":{
          "shape":"CertificateList",
          "documentation":"<p>The SSL server certificate. You must provide exactly one certificate if the protocol is HTTPS.</p>"
        },
        "DefaultActions":{
          "shape":"Actions",
          "documentation":"<p>The default action for the listener.</p>"
        }
      },
      "documentation":"<p>Contains the parameters for CreateListener.</p>"
    },
    "CreateListenerOutput":{
      "type":"structure",
      "members":{
        "Listeners":{
          "shape":"Listeners",
          "documentation":"<p>Information about the listener.</p>"
        }
      },
      "documentation":"<p>Contains the output of CreateListener.</p>"
    },
    "CreateLoadBalancerInput":{
      "type":"structure",
      "required":[
        "Name",
        "Subnets"
      ],
      "members":{
        "Name":{
          "shape":"LoadBalancerName",
          "documentation":"<p>The name of the load balancer.</p> <p>This name must be unique within your AWS account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.</p>"
        },
        "Subnets":{
          "shape":"Subnets",
          "documentation":"<p>The IDs of the subnets to attach to the load balancer. You can specify only one subnet per Availability Zone. You must specify subnets from at least two Availability Zones.</p>"
        },
        "SecurityGroups":{
          "shape":"SecurityGroups",
          "documentation":"<p>The IDs of the security groups to assign to the load balancer.</p>"
        },
        "Scheme":{
          "shape":"LoadBalancerSchemeEnum",
          "documentation":"<p>The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of an Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes. Therefore, Internet-facing load balancers can route requests from clients over the Internet.</p> <p>The nodes of an internal load balancer have only private IP addresses. The DNS name of an internal load balancer is publicly resolvable to the private IP addresses of the nodes. Therefore, internal load balancers can only route requests from clients with access to the VPC for the load balancer.</p> <p>The default is an Internet-facing load balancer.</p>"
        },
        "Tags":{
          "shape":"TagList",
          "documentation":"<p>One or more tags to assign to the load balancer.</p>"
        }
      },
      "documentation":"<p>Contains the parameters for CreateLoadBalancer.</p>"
    },
    "CreateLoadBalancerOutput":{
      "type":"structure",
      "members":{
        "LoadBalancers":{
          "shape":"LoadBalancers",
          "documentation":"<p>Information about the load balancer.</p>"
        }
      },
      "documentation":"<p>Contains the output of CreateLoadBalancer.</p>"
    },
    "CreateRuleInput":{
      "type":"structure",
      "required":[
        "ListenerArn",
        "Conditions",
        "Priority",
        "Actions"
      ],
      "members":{
        "ListenerArn":{
          "shape":"ListenerArn",
          "documentation":"<p>The Amazon Resource Name (ARN) of the listener.</p>"
        },
        "Conditions":{
          "shape":"RuleConditionList",
          "documentation":"<p>A condition. Each condition has the field <code>path-pattern</code> and specifies one path pattern. A path pattern is case sensitive, can be up to 255 characters in length, and can contain any of the following characters:</p> <ul> <li> <p>A-Z, a-z, 0-9</p> </li> <li> <p>_ - . $ / ~ \" ' @ : +</p> </li> <li> <p>&amp; (using &amp;amp;)</p> </li> <li> <p>* (matches 0 or more characters)</p> </li> <li> <p>? (matches exactly 1 character)</p> </li> </ul>"
        },
        "Priority":{
          "shape":"RulePriority",
          "documentation":"<p>The priority for the rule. A listener can't have multiple rules with the same priority.</p>"
        },
        "Actions":{
          "shape":"Actions",
          "documentation":"<p>An action. Each action has the type <code>forward</code> and specifies a target group.</p>"
        }
      },
      "documentation":"<p>Contains the parameters for CreateRule.</p>"
    },
    "CreateRuleOutput":{
      "type":"structure",
      "members":{
        "Rules":{
          "shape":"Rules",
          "documentation":"<p>Information about the rule.</p>"
        }
      },
      "documentation":"<p>Contains the output of CreateRule.</p>"
    },
    "CreateTargetGroupInput":{
      "type":"structure",
      "required":[
        "Name",
        "Protocol",
        "Port",
        "VpcId"
      ],
      "members":{
        "Name":{
          "shape":"TargetGroupName",
          "documentation":"<p>The name of the target group.</p>"
        },
        "Protocol":{
          "shape":"ProtocolEnum",
          "documentation":"<p>The protocol to use for routing traffic to the targets.</p>"
        },
        "Port":{
          "shape":"Port",
          "documentation":"<p>The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target.</p>"
        },
        "VpcId":{
          "shape":"VpcId",
          "documentation":"<p>The identifier of the virtual private cloud (VPC).</p>"
        },
        "HealthCheckProtocol":{
          "shape":"ProtocolEnum",
          "documentation":"<p>The protocol the load balancer uses when performing health checks on targets. The default is the HTTP protocol.</p>"
        },
        "HealthCheckPort":{
          "shape":"HealthCheckPort",
          "documentation":"<p>The port the load balancer uses when performing health checks on targets. The default is <code>traffic-port</code>, which indicates the port on which each target receives traffic from the load balancer.</p>"
        },
        "HealthCheckPath":{
          "shape":"Path",
          "documentation":"<p>The ping path that is the destination on the targets for health checks. The default is /.</p>"
        },
        "HealthCheckIntervalSeconds":{
          "shape":"HealthCheckIntervalSeconds",
          "documentation":"<p>The approximate amount of time, in seconds, between health checks of an individual target. The default is 30 seconds.</p>"
        },
        "HealthCheckTimeoutSeconds":{
          "shape":"HealthCheckTimeoutSeconds",
          "documentation":"<p>The amount of time, in seconds, during which no response from a target means a failed health check. The default is 5 seconds.</p>"
        },
        "HealthyThresholdCount":{
          "shape":"HealthCheckThresholdCount",
          "documentation":"<p>The number of consecutive health checks successes required before considering an unhealthy target healthy. The default is 5.</p>"
        },
        "UnhealthyThresholdCount":{
          "shape":"HealthCheckThresholdCount",
          "documentation":"<p>The number of consecutive health check failures required before considering a target unhealthy. The default is 2.</p>"
        },
        "Matcher":{
          "shape":"Matcher",
          "documentation":"<p>The HTTP codes to use when checking for a successful response from a target. The default is 200.</p>"
        }
      },
      "documentation":"<p>Contains the parameters for CreateTargetGroup.</p>"
    },
    "CreateTargetGroupOutput":{
      "type":"structure",
      "members":{
        "TargetGroups":{
          "shape":"TargetGroups",
          "documentation":"<p>Information about the target group.</p>"
        }
      },
      "documentation":"<p>Contains the output of CreateTargetGroup.</p>"
    },
    "CreatedTime":{"type":"timestamp"},
    "DNSName":{"type":"string"},
    "DeleteListenerInput":{
      "type":"structure",
      "required":["ListenerArn"],
      "members":{
        "ListenerArn":{
          "shape":"ListenerArn",
          "documentation":"<p>The Amazon Resource Name (ARN) of the listener.</p>"
        }
      },
      "documentation":"<p>Contains the parameters for DeleteListener.</p>"
    },
    "DeleteListenerOutput":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>Contains the output of DeleteListener.</p>"
    },
    "DeleteLoadBalancerInput":{
      "type":"structure",
      "required":["LoadBalancerArn"],
      "members":{
        "LoadBalancerArn":{
          "shape":"LoadBalancerArn",
          "documentation":"<p>The Amazon Resource Name (ARN) of the load balancer.</p>"
        }
      },
      "documentation":"<p>Contains the parameters for DeleteLoadBalancer.</p>"
    },
    "DeleteLoadBalancerOutput":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>Contains the output of DeleteLoadBalancer.</p>"
    },
    "DeleteRuleInput":{
      "type":"structure",
      "required":["RuleArn"],
      "members":{
        "RuleArn":{
          "shape":"RuleArn",
          "documentation":"<p>The Amazon Resource Name (ARN) of the rule.</p>"
        }
      },
      "documentation":"<p>Contains the parameters for DeleteRule.</p>"
    },
    "DeleteRuleOutput":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>Contains the output of DeleteRule.</p>"
    },
    "DeleteTargetGroupInput":{
      "type":"structure",
      "required":["TargetGroupArn"],
      "members":{
        "TargetGroupArn":{
          "shape":"TargetGroupArn",
          "documentation":"<p>The Amazon Resource Name (ARN) of the target group.</p>"
        }
      },
      "documentation":"<p>Contains the parameters for DeleteTargetGroup.</p>"
    },
    "DeleteTargetGroupOutput":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>Contains the output of DeleteTargetGroup.</p>"
    },
    "DeregisterTargetsInput":{
      "type":"structure",
      "required":[
        "TargetGroupArn",
        "Targets"
      ],
      "members":{
        "TargetGroupArn":{
          "shape":"TargetGroupArn",
          "documentation":"<p>The Amazon Resource Name (ARN) of the target group.</p>"
        },
        "Targets":{
          "shape":"TargetDescriptions",
          "documentation":"<p>The targets. If you specified a port override when you registered a target, you must specify both the target ID and the port when you deregister it.</p>"
        }
      },
      "documentation":"<p>Contains the parameters for DeregisterTargets.</p>"
    },
    "DeregisterTargetsOutput":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>Contains the output of DeregisterTargets.</p>"
    },
    "DescribeListenersInput":{
      "type":"structure",
      "members":{
        "LoadBalancerArn":{
          "shape":"LoadBalancerArn",
          "documentation":"<p>The Amazon Resource Name (ARN) of the load balancer.</p>"
        },
        "ListenerArns":{
          "shape":"ListenerArns",
          "documentation":"<p>The Amazon Resource Names (ARN) of the listeners.</p>"
        },
        "Marker":{
          "shape":"Marker",
          "documentation":"<p>The marker for the next set of results. (You received this marker from a previous call.)</p>"
        },
        "PageSize":{
          "shape":"PageSize",
          "documentation":"<p>The maximum number of results to return with this call.</p>"
        }
      },
      "documentation":"<p>Contains the parameters for DescribeListeners.</p>"
    },
    "DescribeListenersOutput":{
      "type":"structure",
      "members":{
        "Listeners":{
          "shape":"Listeners",
          "documentation":"<p>Information about the listeners.</p>"
        },
        "NextMarker":{
          "shape":"Marker",
          "documentation":"<p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>"
        }
      },
      "documentation":"<p>Contains the output of DescribeListeners.</p>"
    },
    "DescribeLoadBalancerAttributesInput":{
      "type":"structure",
      "required":["LoadBalancerArn"],
      "members":{
        "LoadBalancerArn":{
          "shape":"LoadBalancerArn",
          "documentation":"<p>The Amazon Resource Name (ARN) of the load balancer.</p>"
        }
      },
      "documentation":"<p>Contains the parameters for DescribeLoadBalancerAttributes.</p>"
    },
    "DescribeLoadBalancerAttributesOutput":{
      "type":"structure",
      "members":{
        "Attributes":{
          "shape":"LoadBalancerAttributes",
          "documentation":"<p>Information about the load balancer attributes.</p>"
        }
      },
      "documentation":"<p>Contains the output of DescribeLoadBalancerAttributes.</p>"
    },
    "DescribeLoadBalancersInput":{
      "type":"structure",
      "members":{
        "LoadBalancerArns":{
          "shape":"LoadBalancerArns",
          "documentation":"<p>The Amazon Resource Names (ARN) of the load balancers.</p>"
        },
        "Names":{
          "shape":"LoadBalancerNames",
          "documentation":"<p>The names of the load balancers.</p>"
        },
        "Marker":{
          "shape":"Marker",
          "documentation":"<p>The marker for the next set of results. (You received this marker from a previous call.)</p>"
        },
        "PageSize":{
          "shape":"PageSize",
          "documentation":"<p>The maximum number of results to return with this call.</p>"
        }
      },
      "documentation":"<p>Contains the parameters for DescribeLoadBalancers.</p>"
    },
    "DescribeLoadBalancersOutput":{
      "type":"structure",
      "members":{
        "LoadBalancers":{
          "shape":"LoadBalancers",
          "documentation":"<p>Information about the load balancers.</p>"
        },
        "NextMarker":{
          "shape":"Marker",
          "documentation":"<p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>"
        }
      },
      "documentation":"<p>Contains the output of DescribeLoadBalancers.</p>"
    },
    "DescribeRulesInput":{
      "type":"structure",
      "members":{
        "ListenerArn":{
          "shape":"ListenerArn",
          "documentation":"<p>The Amazon Resource Name (ARN) of the listener.</p>"
        },
        "RuleArns":{
          "shape":"RuleArns",
          "documentation":"<p>The Amazon Resource Names (ARN) of the rules.</p>"
        }
      },
      "documentation":"<p>Contains the parameters for DescribeRules.</p>"
    },
    "DescribeRulesOutput":{
      "type":"structure",
      "members":{
        "Rules":{
          "shape":"Rules",
          "documentation":"<p>Information about the rules.</p>"
        }
      },
      "documentation":"<p>Contains the output of DescribeRules.</p>"
    },
    "DescribeSSLPoliciesInput":{
      "type":"structure",
      "members":{
        "Names":{
          "shape":"SslPolicyNames",
          "documentation":"<p>The names of the policies.</p>"
        },
        "Marker":{
          "shape":"Marker",
          "documentation":"<p>The marker for the next set of results. (You received this marker from a previous call.)</p>"
        },
        "PageSize":{
          "shape":"PageSize",
          "documentation":"<p>The maximum number of results to return with this call.</p>"
        }
      },
      "documentation":"<p>Contains the parameters for DescribeSSLPolicies.</p>"
    },
    "DescribeSSLPoliciesOutput":{
      "type":"structure",
      "members":{
        "SslPolicies":{
          "shape":"SslPolicies",
          "documentation":"<p>Information about the policies.</p>"
        },
        "NextMarker":{
          "shape":"Marker",
          "documentation":"<p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>"
        }
      },
      "documentation":"<p>Contains the output of DescribeSSLPolicies.</p>"
    },
    "DescribeTagsInput":{
      "type":"structure",
      "required":["ResourceArns"],
      "members":{
        "ResourceArns":{
          "shape":"ResourceArns",
          "documentation":"<p>The Amazon Resource Names (ARN) of the resources.</p>"
        }
      },
      "documentation":"<p>Contains the parameters for DescribeTags.</p>"
    },
    "DescribeTagsOutput":{
      "type":"structure",
      "members":{
        "TagDescriptions":{
          "shape":"TagDescriptions",
          "documentation":"<p>Information about the tags.</p>"
        }
      },
      "documentation":"<p>Contains the output of DescribeTags.</p>"
    },
    "DescribeTargetGroupAttributesInput":{
      "type":"structure",
      "required":["TargetGroupArn"],
      "members":{
        "TargetGroupArn":{
          "shape":"TargetGroupArn",
          "documentation":"<p>The Amazon Resource Name (ARN) of the target group.</p>"
        }
      },
      "documentation":"<p>Contains the parameters for DescribeTargetGroupAttributes.</p>"
    },
    "DescribeTargetGroupAttributesOutput":{
      "type":"structure",
      "members":{
        "Attributes":{
          "shape":"TargetGroupAttributes",
          "documentation":"<p>Information about the target group attributes</p>"
        }
      },
      "documentation":"<p>Contains the output of DescribeTargetGroupAttributes.</p>"
    },
    "DescribeTargetGroupsInput":{
      "type":"structure",
      "members":{
        "LoadBalancerArn":{
          "shape":"LoadBalancerArn",
          "documentation":"<p>The Amazon Resource Name (ARN) of the load balancer.</p>"
        },
        "TargetGroupArns":{
          "shape":"TargetGroupArns",
          "documentation":"<p>The Amazon Resource Names (ARN) of the target groups.</p>"
        },
        "Names":{
          "shape":"TargetGroupNames",
          "documentation":"<p>The names of the target groups.</p>"
        },
        "Marker":{
          "shape":"Marker",
          "documentation":"<p>The marker for the next set of results. (You received this marker from a previous call.)</p>"
        },
        "PageSize":{
          "shape":"PageSize",
          "documentation":"<p>The maximum number of results to return with this call.</p>"
        }
      },
      "documentation":"<p>Contains the parameters for DescribeTargetGroups.</p>"
    },
    "DescribeTargetGroupsOutput":{
      "type":"structure",
      "members":{
        "TargetGroups":{
          "shape":"TargetGroups",
          "documentation":"<p>Information about the target groups.</p>"
        },
        "NextMarker":{
          "shape":"Marker",
          "documentation":"<p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>"
        }
      },
      "documentation":"<p>Contains the output of DescribeTargetGroups.</p>"
    },
    "DescribeTargetHealthInput":{
      "type":"structure",
      "required":["TargetGroupArn"],
      "members":{
        "TargetGroupArn":{
          "shape":"TargetGroupArn",
          "documentation":"<p>The Amazon Resource Name (ARN) of the target group.</p>"
        },
        "Targets":{
          "shape":"TargetDescriptions",
          "documentation":"<p>The targets.</p>"
        }
      },
      "documentation":"<p>Contains the parameters for DescribeTargetHealth.</p>"
    },
    "DescribeTargetHealthOutput":{
      "type":"structure",
      "members":{
        "TargetHealthDescriptions":{
          "shape":"TargetHealthDescriptions",
          "documentation":"<p>Information about the health of the targets.</p>"
        }
      },
      "documentation":"<p>Contains the output of DescribeTargetHealth.</p>"
    },
    "Description":{"type":"string"},
    "DuplicateListenerException":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>A listener with the specified port already exists.</p>",
      "error":{
        "code":"DuplicateListener",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "DuplicateLoadBalancerNameException":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>A load balancer with the specified name already exists for this account.</p>",
      "error":{
        "code":"DuplicateLoadBalancerName",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "DuplicateTagKeysException":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>A tag key was specified more than once.</p>",
      "error":{
        "code":"DuplicateTagKeys",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "DuplicateTargetGroupNameException":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>A target group with the specified name already exists.</p>",
      "error":{
        "code":"DuplicateTargetGroupName",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "HealthCheckIntervalSeconds":{
      "type":"integer",
      "max":300,
      "min":5
    },
    "HealthCheckPort":{"type":"string"},
    "HealthCheckThresholdCount":{
      "type":"integer",
      "max":10,
      "min":2
    },
    "HealthCheckTimeoutSeconds":{
      "type":"integer",
      "max":60,
      "min":2
    },
    "HealthUnavailableException":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>The health of the specified targets could not be retrieved due to an internal error.</p>",
      "error":{
        "code":"HealthUnavailable",
        "httpStatusCode":500
      },
      "exception":true
    },
    "HttpCode":{"type":"string"},
    "IncompatibleProtocolsException":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>The specified configuration is not valid with this protocol.</p>",
      "error":{
        "code":"IncompatibleProtocols",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidConfigurationRequestException":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>The requested configuration is not valid.</p>",
      "error":{
        "code":"InvalidConfigurationRequest",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidSchemeException":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>The requested scheme is not valid.</p>",
      "error":{
        "code":"InvalidScheme",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidSecurityGroupException":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>The specified security group does not exist.</p>",
      "error":{
        "code":"InvalidSecurityGroup",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidSubnetException":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>The specified subnet is out of available addresses.</p>",
      "error":{
        "code":"InvalidSubnet",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidTargetException":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>The specified target does not exist or is not in the same VPC as the target group.</p>",
      "error":{
        "code":"InvalidTarget",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "IsDefault":{"type":"boolean"},
    "ListOfString":{
      "type":"list",
      "member":{"shape":"StringValue"}
    },
    "Listener":{
      "type":"structure",
      "members":{
        "ListenerArn":{
          "shape":"ListenerArn",
          "documentation":"<p>The Amazon Resource Name (ARN) of the listener.</p>"
        },
        "LoadBalancerArn":{
          "shape":"LoadBalancerArn",
          "documentation":"<p>The Amazon Resource Name (ARN) of the load balancer.</p>"
        },
        "Port":{
          "shape":"Port",
          "documentation":"<p>The port on which the load balancer is listening.</p>"
        },
        "Protocol":{
          "shape":"ProtocolEnum",
          "documentation":"<p>The protocol for connections from clients to the load balancer.</p>"
        },
        "Certificates":{
          "shape":"CertificateList",
          "documentation":"<p>The SSL server certificate. You must provide a certificate if the protocol is HTTPS.</p>"
        },
        "SslPolicy":{
          "shape":"SslPolicyName",
          "documentation":"<p>The security policy that defines which ciphers and protocols are supported. The default is the current predefined security policy.</p>"
        },
        "DefaultActions":{
          "shape":"Actions",
          "documentation":"<p>The default actions for the listener.</p>"
        }
      },
      "documentation":"<p>Information about a listener.</p>"
    },
    "ListenerArn":{"type":"string"},
    "ListenerArns":{
      "type":"list",
      "member":{"shape":"ListenerArn"}
    },
    "ListenerNotFoundException":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>The specified listener does not exist.</p>",
      "error":{
        "code":"ListenerNotFound",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "Listeners":{
      "type":"list",
      "member":{"shape":"Listener"}
    },
    "LoadBalancer":{
      "type":"structure",
      "members":{
        "LoadBalancerArn":{
          "shape":"LoadBalancerArn",
          "documentation":"<p>The Amazon Resource Name (ARN) of the load balancer.</p>"
        },
        "DNSName":{
          "shape":"DNSName",
          "documentation":"<p>The public DNS name of the load balancer.</p>"
        },
        "CanonicalHostedZoneId":{
          "shape":"CanonicalHostedZoneId",
          "documentation":"<p>The ID of the Amazon Route 53 hosted zone associated with the load balancer.</p>"
        },
        "CreatedTime":{
          "shape":"CreatedTime",
          "documentation":"<p>The date and time the load balancer was created.</p>"
        },
        "LoadBalancerName":{
          "shape":"LoadBalancerName",
          "documentation":"<p>The name of the load balancer.</p>"
        },
        "Scheme":{
          "shape":"LoadBalancerSchemeEnum",
          "documentation":"<p>The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of an Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes. Therefore, Internet-facing load balancers can route requests from clients over the Internet.</p> <p>The nodes of an internal load balancer have only private IP addresses. The DNS name of an internal load balancer is publicly resolvable to the private IP addresses of the nodes. Therefore, internal load balancers can only route requests from clients with access to the VPC for the load balancer.</p>"
        },
        "VpcId":{
          "shape":"VpcId",
          "documentation":"<p>The ID of the VPC for the load balancer.</p>"
        },
        "State":{
          "shape":"LoadBalancerState",
          "documentation":"<p>The state of the load balancer.</p>"
        },
        "Type":{
          "shape":"LoadBalancerTypeEnum",
          "documentation":"<p>The type of load balancer.</p>"
        },
        "AvailabilityZones":{
          "shape":"AvailabilityZones",
          "documentation":"<p>The Availability Zones for the load balancer.</p>"
        },
        "SecurityGroups":{
          "shape":"SecurityGroups",
          "documentation":"<p>The IDs of the security groups for the load balancer.</p>"
        }
      },
      "documentation":"<p>Information about a load balancer.</p>"
    },
    "LoadBalancerArn":{"type":"string"},
    "LoadBalancerArns":{
      "type":"list",
      "member":{"shape":"LoadBalancerArn"}
    },
    "LoadBalancerAttribute":{
      "type":"structure",
      "members":{
        "Key":{
          "shape":"LoadBalancerAttributeKey",
          "documentation":"<p>The name of the attribute.</p> <ul> <li> <p> <code>access_logs.s3.enabled</code> - Indicates whether access logs stored in Amazon S3 are enabled. The value is <code>true</code> or <code>false</code>.</p> </li> <li> <p> <code>access_logs.s3.bucket</code> - The name of the S3 bucket for the access logs. This attribute is required if access logs in Amazon S3 are enabled. The bucket must exist in the same region as the load balancer and have a bucket policy that grants Elastic Load Balancing permission to write to the bucket.</p> </li> <li> <p> <code>access_logs.s3.prefix</code> - The prefix for the location in the S3 bucket. If you don't specify a prefix, the access logs are stored in the root of the bucket.</p> </li> <li> <p> <code>deletion_protection.enabled</code> - Indicates whether deletion protection is enabled. The value is <code>true</code> or <code>false</code>.</p> </li> <li> <p> <code>idle_timeout.timeout_seconds</code> - The idle timeout value, in seconds. The valid range is 1-3600. The default is 60 seconds.</p> </li> </ul>"
        },
        "Value":{
          "shape":"LoadBalancerAttributeValue",
          "documentation":"<p>The value of the attribute.</p>"
        }
      },
      "documentation":"<p>Information about a load balancer attribute.</p>"
    },
    "LoadBalancerAttributeKey":{
      "type":"string",
      "max":256,
      "pattern":"^[a-zA-Z0-9._]+$"
    },
    "LoadBalancerAttributeValue":{
      "type":"string",
      "max":1024
    },
    "LoadBalancerAttributes":{
      "type":"list",
      "member":{"shape":"LoadBalancerAttribute"},
      "max":20
    },
    "LoadBalancerName":{"type":"string"},
    "LoadBalancerNames":{
      "type":"list",
      "member":{"shape":"LoadBalancerName"}
    },
    "LoadBalancerNotFoundException":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>The specified load balancer does not exist.</p>",
      "error":{
        "code":"LoadBalancerNotFound",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "LoadBalancerSchemeEnum":{
      "type":"string",
      "enum":[
        "internet-facing",
        "internal"
      ]
    },
    "LoadBalancerState":{
      "type":"structure",
      "members":{
        "Code":{
          "shape":"LoadBalancerStateEnum",
          "documentation":"<p>The state code. The initial state of the load balancer is <code>provisioning</code>. After the load balancer is fully set up and ready to route traffic, its state is <code>active</code>. If the load balancer could not be set up, its state is <code>failed</code>.</p>"
        },
        "Reason":{
          "shape":"StateReason",
          "documentation":"<p>A description of the state.</p>"
        }
      },
      "documentation":"<p>Information about the state of the load balancer.</p>"
    },
    "LoadBalancerStateEnum":{
      "type":"string",
      "enum":[
        "active",
        "provisioning",
        "failed"
      ]
    },
    "LoadBalancerTypeEnum":{
      "type":"string",
      "enum":["application"]
    },
    "LoadBalancers":{
      "type":"list",
      "member":{"shape":"LoadBalancer"}
    },
    "Marker":{"type":"string"},
    "Matcher":{
      "type":"structure",
      "required":["HttpCode"],
      "members":{
        "HttpCode":{
          "shape":"HttpCode",
          "documentation":"<p>The HTTP codes. The default value is 200. You can specify multiple values (for example, \"200,202\") or a range of values (for example, \"200-299\").</p>"
        }
      },
      "documentation":"<p>Information to use when checking for a successful response from a target.</p>"
    },
    "ModifyListenerInput":{
      "type":"structure",
      "required":["ListenerArn"],
      "members":{
        "ListenerArn":{
          "shape":"ListenerArn",
          "documentation":"<p>The Amazon Resource Name (ARN) of the listener.</p>"
        },
        "Port":{
          "shape":"Port",
          "documentation":"<p>The port for connections from clients to the load balancer.</p>"
        },
        "Protocol":{
          "shape":"ProtocolEnum",
          "documentation":"<p>The protocol for connections from clients to the load balancer.</p>"
        },
        "SslPolicy":{
          "shape":"SslPolicyName",
          "documentation":"<p>The security policy that defines which ciphers and protocols are supported.</p>"
        },
        "Certificates":{
          "shape":"CertificateList",
          "documentation":"<p>The SSL server certificate.</p>"
        },
        "DefaultActions":{
          "shape":"Actions",
          "documentation":"<p>The default actions.</p>"
        }
      },
      "documentation":"<p>Contains the parameters for ModifyListener.</p>"
    },
    "ModifyListenerOutput":{
      "type":"structure",
      "members":{
        "Listeners":{
          "shape":"Listeners",
          "documentation":"<p>Information about the modified listeners.</p>"
        }
      },
      "documentation":"<p>Contains the output of ModifyListener.</p>"
    },
    "ModifyLoadBalancerAttributesInput":{
      "type":"structure",
      "required":[
        "LoadBalancerArn",
        "Attributes"
      ],
      "members":{
        "LoadBalancerArn":{
          "shape":"LoadBalancerArn",
          "documentation":"<p>The Amazon Resource Name (ARN) of the load balancer.</p>"
        },
        "Attributes":{
          "shape":"LoadBalancerAttributes",
          "documentation":"<p>The load balancer attributes.</p>"
        }
      },
      "documentation":"<p>Contains the parameters for ModifyLoadBalancerAttributes.</p>"
    },
    "ModifyLoadBalancerAttributesOutput":{
      "type":"structure",
      "members":{
        "Attributes":{
          "shape":"LoadBalancerAttributes",
          "documentation":"<p>Information about the load balancer attributes.</p>"
        }
      },
      "documentation":"<p>Contains the output of ModifyLoadBalancerAttributes.</p>"
    },
    "ModifyRuleInput":{
      "type":"structure",
      "required":["RuleArn"],
      "members":{
        "RuleArn":{
          "shape":"RuleArn",
          "documentation":"<p>The Amazon Resource Name (ARN) of the rule.</p>"
        },
        "Conditions":{
          "shape":"RuleConditionList",
          "documentation":"<p>The conditions.</p>"
        },
        "Actions":{
          "shape":"Actions",
          "documentation":"<p>The actions.</p>"
        }
      },
      "documentation":"<p>Contains the parameters for ModifyRules.</p>"
    },
    "ModifyRuleOutput":{
      "type":"structure",
      "members":{
        "Rules":{
          "shape":"Rules",
          "documentation":"<p>Information about the rule.</p>"
        }
      },
      "documentation":"<p>Contains the output of ModifyRules.</p>"
    },
    "ModifyTargetGroupAttributesInput":{
      "type":"structure",
      "required":[
        "TargetGroupArn",
        "Attributes"
      ],
      "members":{
        "TargetGroupArn":{
          "shape":"TargetGroupArn",
          "documentation":"<p>The Amazon Resource Name (ARN) of the target group.</p>"
        },
        "Attributes":{
          "shape":"TargetGroupAttributes",
          "documentation":"<p>The attributes.</p>"
        }
      },
      "documentation":"<p>Contains the parameters for ModifyTargetGroupAttributes.</p>"
    },
    "ModifyTargetGroupAttributesOutput":{
      "type":"structure",
      "members":{
        "Attributes":{
          "shape":"TargetGroupAttributes",
          "documentation":"<p>Information about the attributes.</p>"
        }
      },
      "documentation":"<p>Contains the output of ModifyTargetGroupAttributes.</p>"
    },
    "ModifyTargetGroupInput":{
      "type":"structure",
      "required":["TargetGroupArn"],
      "members":{
        "TargetGroupArn":{
          "shape":"TargetGroupArn",
          "documentation":"<p>The Amazon Resource Name (ARN) of the target group.</p>"
        },
        "HealthCheckProtocol":{
          "shape":"ProtocolEnum",
          "documentation":"<p>The protocol to use to connect with the target.</p>"
        },
        "HealthCheckPort":{
          "shape":"HealthCheckPort",
          "documentation":"<p>The port to use to connect with the target.</p>"
        },
        "HealthCheckPath":{
          "shape":"Path",
          "documentation":"<p>The ping path that is the destination for the health check request.</p>"
        },
        "HealthCheckIntervalSeconds":{
          "shape":"HealthCheckIntervalSeconds",
          "documentation":"<p>The approximate amount of time, in seconds, between health checks of an individual target.</p>"
        },
        "HealthCheckTimeoutSeconds":{
          "shape":"HealthCheckTimeoutSeconds",
          "documentation":"<p>The amount of time, in seconds, during which no response means a failed health check.</p>"
        },
        "HealthyThresholdCount":{
          "shape":"HealthCheckThresholdCount",
          "documentation":"<p>The number of consecutive health checks successes required before considering an unhealthy target healthy.</p>"
        },
        "UnhealthyThresholdCount":{
          "shape":"HealthCheckThresholdCount",
          "documentation":"<p>The number of consecutive health check failures required before considering the target unhealthy.</p>"
        },
        "Matcher":{
          "shape":"Matcher",
          "documentation":"<p>The HTTP codes to use when checking for a successful response from a target.</p>"
        }
      },
      "documentation":"<p>Contains the parameters for ModifyTargetGroup.</p>"
    },
    "ModifyTargetGroupOutput":{
      "type":"structure",
      "members":{
        "TargetGroups":{
          "shape":"TargetGroups",
          "documentation":"<p>Information about the target group.</p>"
        }
      },
      "documentation":"<p>Contains the output of ModifyTargetGroup.</p>"
    },
    "OperationNotPermittedException":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>This operation is not allowed.</p>",
      "error":{
        "code":"OperationNotPermitted",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "PageSize":{
      "type":"integer",
      "max":400,
      "min":1
    },
    "Path":{
      "type":"string",
      "max":1024,
      "min":1
    },
    "Port":{
      "type":"integer",
      "max":65535,
      "min":1
    },
    "PriorityInUseException":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>The specified priority is in use.</p>",
      "error":{
        "code":"PriorityInUse",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "ProtocolEnum":{
      "type":"string",
      "enum":[
        "HTTP",
        "HTTPS"
      ]
    },
    "RegisterTargetsInput":{
      "type":"structure",
      "required":[
        "TargetGroupArn",
        "Targets"
      ],
      "members":{
        "TargetGroupArn":{
          "shape":"TargetGroupArn",
          "documentation":"<p>The Amazon Resource Name (ARN) of the target group.</p>"
        },
        "Targets":{
          "shape":"TargetDescriptions",
          "documentation":"<p>The targets. The default port for a target is the port for the target group. You can specify a port override. If a target is already registered, you can register it again using a different port.</p>"
        }
      },
      "documentation":"<p>Contains the parameters for RegisterTargets.</p>"
    },
    "RegisterTargetsOutput":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>Contains the output of RegisterTargets.</p>"
    },
    "RemoveTagsInput":{
      "type":"structure",
      "required":[
        "ResourceArns",
        "TagKeys"
      ],
      "members":{
        "ResourceArns":{
          "shape":"ResourceArns",
          "documentation":"<p>The Amazon Resource Name (ARN) of the resource.</p>"
        },
        "TagKeys":{
          "shape":"TagKeys",
          "documentation":"<p>The tag keys for the tags to remove.</p>"
        }
      },
      "documentation":"<p>Contains the parameters for RemoveTags.</p>"
    },
    "RemoveTagsOutput":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>Contains the output of RemoveTags.</p>"
    },
    "ResourceArn":{"type":"string"},
    "ResourceArns":{
      "type":"list",
      "member":{"shape":"ResourceArn"}
    },
    "ResourceInUseException":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>A specified resource is in use.</p>",
      "error":{
        "code":"ResourceInUse",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "Rule":{
      "type":"structure",
      "members":{
        "RuleArn":{
          "shape":"RuleArn",
          "documentation":"<p>The Amazon Resource Name (ARN) of the rule.</p>"
        },
        "Priority":{
          "shape":"String",
          "documentation":"<p>The priority.</p>"
        },
        "Conditions":{
          "shape":"RuleConditionList",
          "documentation":"<p>The conditions.</p>"
        },
        "Actions":{
          "shape":"Actions",
          "documentation":"<p>The actions.</p>"
        },
        "IsDefault":{
          "shape":"IsDefault",
          "documentation":"<p>Indicates whether this is the default rule.</p>"
        }
      },
      "documentation":"<p>Information about a rule.</p>"
    },
    "RuleArn":{"type":"string"},
    "RuleArns":{
      "type":"list",
      "member":{"shape":"RuleArn"}
    },
    "RuleCondition":{
      "type":"structure",
      "members":{
        "Field":{
          "shape":"ConditionFieldName",
          "documentation":"<p>The only possible value is <code>path-pattern</code>.</p>"
        },
        "Values":{
          "shape":"ListOfString",
          "documentation":"<p>The path pattern. You can specify a single path pattern.</p> <p>A path pattern is case sensitive, can be up to 255 characters in length, and can contain any of the following characters:</p> <ul> <li> <p>A-Z, a-z, 0-9</p> </li> <li> <p>_ - . $ / ~ \" ' @ : +</p> </li> <li> <p>&amp; (using &amp;amp;)</p> </li> <li> <p>* (matches 0 or more characters)</p> </li> <li> <p>? (matches exactly 1 character)</p> </li> </ul>"
        }
      },
      "documentation":"<p>Information about a condition for a rule.</p>"
    },
    "RuleConditionList":{
      "type":"list",
      "member":{"shape":"RuleCondition"}
    },
    "RuleNotFoundException":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>The specified rule does not exist.</p>",
      "error":{
        "code":"RuleNotFound",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "RulePriority":{
      "type":"integer",
      "max":99999,
      "min":1
    },
    "RulePriorityList":{
      "type":"list",
      "member":{"shape":"RulePriorityPair"}
    },
    "RulePriorityPair":{
      "type":"structure",
      "members":{
        "RuleArn":{
          "shape":"RuleArn",
          "documentation":"<p>The Amazon Resource Name (ARN) of the rule.</p>"
        },
        "Priority":{
          "shape":"RulePriority",
          "documentation":"<p>The rule priority.</p>"
        }
      },
      "documentation":"<p>Information about the priorities for the rules for a listener.</p>"
    },
    "Rules":{
      "type":"list",
      "member":{"shape":"Rule"}
    },
    "SSLPolicyNotFoundException":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>The specified SSL policy does not exist.</p>",
      "error":{
        "code":"SSLPolicyNotFound",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "SecurityGroupId":{"type":"string"},
    "SecurityGroups":{
      "type":"list",
      "member":{"shape":"SecurityGroupId"}
    },
    "SetRulePrioritiesInput":{
      "type":"structure",
      "required":["RulePriorities"],
      "members":{
        "RulePriorities":{
          "shape":"RulePriorityList",
          "documentation":"<p>The rule priorities.</p>"
        }
      },
      "documentation":"<p>Contains the parameters for SetRulePriorities.</p>"
    },
    "SetRulePrioritiesOutput":{
      "type":"structure",
      "members":{
        "Rules":{
          "shape":"Rules",
          "documentation":"<p>Information about the rules.</p>"
        }
      },
      "documentation":"<p>Contains the output of SetRulePriorities.</p>"
    },
    "SetSecurityGroupsInput":{
      "type":"structure",
      "required":[
        "LoadBalancerArn",
        "SecurityGroups"
      ],
      "members":{
        "LoadBalancerArn":{
          "shape":"LoadBalancerArn",
          "documentation":"<p>The Amazon Resource Name (ARN) of the load balancer.</p>"
        },
        "SecurityGroups":{
          "shape":"SecurityGroups",
          "documentation":"<p>The IDs of the security groups.</p>"
        }
      },
      "documentation":"<p>Contains the parameters for SetSecurityGroups.</p>"
    },
    "SetSecurityGroupsOutput":{
      "type":"structure",
      "members":{
        "SecurityGroupIds":{
          "shape":"SecurityGroups",
          "documentation":"<p>The IDs of the security groups associated with the load balancer.</p>"
        }
      },
      "documentation":"<p>Contains the output of SetSecurityGroups.</p>"
    },
    "SetSubnetsInput":{
      "type":"structure",
      "required":[
        "LoadBalancerArn",
        "Subnets"
      ],
      "members":{
        "LoadBalancerArn":{
          "shape":"LoadBalancerArn",
          "documentation":"<p>The Amazon Resource Name (ARN) of the load balancer.</p>"
        },
        "Subnets":{
          "shape":"Subnets",
          "documentation":"<p>The IDs of the subnets. You must specify at least two subnets. You can add only one subnet per Availability Zone.</p>"
        }
      },
      "documentation":"<p>Contains the parameters for SetSubnets.</p>"
    },
    "SetSubnetsOutput":{
      "type":"structure",
      "members":{
        "AvailabilityZones":{
          "shape":"AvailabilityZones",
          "documentation":"<p>Information about the subnet and Availability Zone.</p>"
        }
      },
      "documentation":"<p>Contains the output of SetSubnets.</p>"
    },
    "SslPolicies":{
      "type":"list",
      "member":{"shape":"SslPolicy"}
    },
    "SslPolicy":{
      "type":"structure",
      "members":{
        "SslProtocols":{
          "shape":"SslProtocols",
          "documentation":"<p>The protocols.</p>"
        },
        "Ciphers":{
          "shape":"Ciphers",
          "documentation":"<p>The ciphers.</p>"
        },
        "Name":{
          "shape":"SslPolicyName",
          "documentation":"<p>The name of the policy.</p>"
        }
      },
      "documentation":"<p>Information about a policy used for SSL negotiation.</p>"
    },
    "SslPolicyName":{"type":"string"},
    "SslPolicyNames":{
      "type":"list",
      "member":{"shape":"SslPolicyName"}
    },
    "SslProtocol":{"type":"string"},
    "SslProtocols":{
      "type":"list",
      "member":{"shape":"SslProtocol"}
    },
    "StateReason":{"type":"string"},
    "String":{"type":"string"},
    "StringValue":{"type":"string"},
    "SubnetId":{"type":"string"},
    "SubnetNotFoundException":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>The specified subnet does not exist.</p>",
      "error":{
        "code":"SubnetNotFound",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "Subnets":{
      "type":"list",
      "member":{"shape":"SubnetId"}
    },
    "Tag":{
      "type":"structure",
      "required":["Key"],
      "members":{
        "Key":{
          "shape":"TagKey",
          "documentation":"<p>The key of the tag.</p>"
        },
        "Value":{
          "shape":"TagValue",
          "documentation":"<p>The value of the tag.</p>"
        }
      },
      "documentation":"<p>Information about a tag.</p>"
    },
    "TagDescription":{
      "type":"structure",
      "members":{
        "ResourceArn":{
          "shape":"ResourceArn",
          "documentation":"<p>The Amazon Resource Name (ARN) of the resource.</p>"
        },
        "Tags":{
          "shape":"TagList",
          "documentation":"<p>Information about the tags.</p>"
        }
      },
      "documentation":"<p>The tags associated with a resource.</p>"
    },
    "TagDescriptions":{
      "type":"list",
      "member":{"shape":"TagDescription"}
    },
    "TagKey":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$"
    },
    "TagKeys":{
      "type":"list",
      "member":{"shape":"TagKey"}
    },
    "TagList":{
      "type":"list",
      "member":{"shape":"Tag"},
      "min":1
    },
    "TagValue":{
      "type":"string",
      "max":256,
      "min":0,
      "pattern":"^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$"
    },
    "TargetDescription":{
      "type":"structure",
      "required":["Id"],
      "members":{
        "Id":{
          "shape":"TargetId",
          "documentation":"<p>The ID of the target.</p>"
        },
        "Port":{
          "shape":"Port",
          "documentation":"<p>The port on which the target is listening.</p>"
        }
      },
      "documentation":"<p>Information about a target.</p>"
    },
    "TargetDescriptions":{
      "type":"list",
      "member":{"shape":"TargetDescription"}
    },
    "TargetGroup":{
      "type":"structure",
      "members":{
        "TargetGroupArn":{
          "shape":"TargetGroupArn",
          "documentation":"<p>The Amazon Resource Name (ARN) of the target group.</p>"
        },
        "TargetGroupName":{
          "shape":"TargetGroupName",
          "documentation":"<p>The name of the target group.</p>"
        },
        "Protocol":{
          "shape":"ProtocolEnum",
          "documentation":"<p>The protocol to use for routing traffic to the targets.</p>"
        },
        "Port":{
          "shape":"Port",
          "documentation":"<p>The port on which the targets are listening.</p>"
        },
        "VpcId":{
          "shape":"VpcId",
          "documentation":"<p>The ID of the VPC for the targets.</p>"
        },
        "HealthCheckProtocol":{
          "shape":"ProtocolEnum",
          "documentation":"<p>The protocol to use to connect with the target.</p>"
        },
        "HealthCheckPort":{
          "shape":"HealthCheckPort",
          "documentation":"<p>The port to use to connect with the target.</p>"
        },
        "HealthCheckIntervalSeconds":{
          "shape":"HealthCheckIntervalSeconds",
          "documentation":"<p>The approximate amount of time, in seconds, between health checks of an individual target.</p>"
        },
        "HealthCheckTimeoutSeconds":{
          "shape":"HealthCheckTimeoutSeconds",
          "documentation":"<p>The amount of time, in seconds, during which no response means a failed health check.</p>"
        },
        "HealthyThresholdCount":{
          "shape":"HealthCheckThresholdCount",
          "documentation":"<p>The number of consecutive health checks successes required before considering an unhealthy target healthy.</p>"
        },
        "UnhealthyThresholdCount":{
          "shape":"HealthCheckThresholdCount",
          "documentation":"<p>The number of consecutive health check failures required before considering the target unhealthy.</p>"
        },
        "HealthCheckPath":{
          "shape":"Path",
          "documentation":"<p>The destination for the health check request.</p>"
        },
        "Matcher":{
          "shape":"Matcher",
          "documentation":"<p>The HTTP codes to use when checking for a successful response from a target.</p>"
        },
        "LoadBalancerArns":{
          "shape":"LoadBalancerArns",
          "documentation":"<p>The Amazon Resource Names (ARN) of the load balancers that route traffic to this target group.</p>"
        }
      },
      "documentation":"<p>Information about a target group.</p>"
    },
    "TargetGroupArn":{"type":"string"},
    "TargetGroupArns":{
      "type":"list",
      "member":{"shape":"TargetGroupArn"}
    },
    "TargetGroupAssociationLimitException":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>You've reached the limit on the number of load balancers per target group.</p>",
      "error":{
        "code":"TargetGroupAssociationLimit",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "TargetGroupAttribute":{
      "type":"structure",
      "members":{
        "Key":{
          "shape":"TargetGroupAttributeKey",
          "documentation":"<p>The name of the attribute.</p> <ul> <li> <p> <code>deregistration_delay.timeout_seconds</code> - The amount time for Elastic Load Balancing to wait before changing the state of a deregistering target from <code>draining</code> to <code>unused</code>. The range is 0-3600 seconds. The default value is 300 seconds.</p> </li> <li> <p> <code>stickiness.enabled</code> - Indicates whether sticky sessions are enabled. The value is <code>true</code> or <code>false</code>.</p> </li> <li> <p> <code>stickiness.type</code> - The type of sticky sessions. The possible value is <code>lb_cookie</code>.</p> </li> <li> <p> <code>stickiness.lb_cookie.duration_seconds</code> - The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the load balancer-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds).</p> </li> </ul>"
        },
        "Value":{
          "shape":"TargetGroupAttributeValue",
          "documentation":"<p>The value of the attribute.</p>"
        }
      },
      "documentation":"<p>Information about a target group attribute.</p>"
    },
    "TargetGroupAttributeKey":{
      "type":"string",
      "max":256,
      "pattern":"^[a-zA-Z0-9._]+$"
    },
    "TargetGroupAttributeValue":{"type":"string"},
    "TargetGroupAttributes":{
      "type":"list",
      "member":{"shape":"TargetGroupAttribute"}
    },
    "TargetGroupName":{"type":"string"},
    "TargetGroupNames":{
      "type":"list",
      "member":{"shape":"TargetGroupName"}
    },
    "TargetGroupNotFoundException":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>The specified target group does not exist.</p>",
      "error":{
        "code":"TargetGroupNotFound",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "TargetGroups":{
      "type":"list",
      "member":{"shape":"TargetGroup"}
    },
    "TargetHealth":{
      "type":"structure",
      "members":{
        "State":{
          "shape":"TargetHealthStateEnum",
          "documentation":"<p>The state of the target.</p>"
        },
        "Reason":{
          "shape":"TargetHealthReasonEnum",
          "documentation":"<p>The reason code. If the target state is <code>healthy</code>, a reason code is not provided.</p> <p>If the target state is <code>initial</code>, the reason code can be one of the following values:</p> <ul> <li> <p> <code>Elb.RegistrationInProgress</code> - The target is in the process of being registered with the load balancer.</p> </li> <li> <p> <code>Elb.InitialHealthChecking</code> - The load balancer is still sending the target the minimum number of health checks required to determine its health status.</p> </li> </ul> <p>If the target state is <code>unhealthy</code>, the reason code can be one of the following values:</p> <ul> <li> <p> <code>Target.ResponseCodeMismatch</code> - The health checks did not return an expected HTTP code.</p> </li> <li> <p> <code>Target.Timeout</code> - The health check requests timed out.</p> </li> <li> <p> <code>Target.FailedHealthChecks</code> - The health checks failed because the connection to the target timed out, the target response was malformed, or the target failed the health check for an unknown reason.</p> </li> <li> <p> <code>Elb.InternalError</code> - The health checks failed due to an internal error.</p> </li> </ul> <p>If the target state is <code>unused</code>, the reason code can be one of the following values:</p> <ul> <li> <p> <code>Target.NotRegistered</code> - The target is not registered with the target group.</p> </li> <li> <p> <code>Target.NotInUse</code> - The target group is not used by any load balancer or the target is in an Availability Zone that is not enabled for its load balancer.</p> </li> <li> <p> <code>Target.InvalidState</code> - The target is in the stopped or terminated state.</p> </li> </ul> <p>If the target state is <code>draining</code>, the reason code can be the following value:</p> <ul> <li> <p> <code>Target.DeregistrationInProgress</code> - The target is in the process of being deregistered and the deregistration delay period has not expired.</p> </li> </ul>"
        },
        "Description":{
          "shape":"Description",
          "documentation":"<p>A description of the target health that provides additional details. If the state is <code>healthy</code>, a description is not provided.</p>"
        }
      },
      "documentation":"<p>Information about the current health of a target.</p>"
    },
    "TargetHealthDescription":{
      "type":"structure",
      "members":{
        "Target":{
          "shape":"TargetDescription",
          "documentation":"<p>The description of the target.</p>"
        },
        "HealthCheckPort":{
          "shape":"HealthCheckPort",
          "documentation":"<p>The port to use to connect with the target.</p>"
        },
        "TargetHealth":{
          "shape":"TargetHealth",
          "documentation":"<p>The health information for the target.</p>"
        }
      },
      "documentation":"<p>Information about the health of a target.</p>"
    },
    "TargetHealthDescriptions":{
      "type":"list",
      "member":{"shape":"TargetHealthDescription"}
    },
    "TargetHealthReasonEnum":{
      "type":"string",
      "enum":[
        "Elb.RegistrationInProgress",
        "Elb.InitialHealthChecking",
        "Target.ResponseCodeMismatch",
        "Target.Timeout",
        "Target.FailedHealthChecks",
        "Target.NotRegistered",
        "Target.NotInUse",
        "Target.DeregistrationInProgress",
        "Target.InvalidState",
        "Elb.InternalError"
      ]
    },
    "TargetHealthStateEnum":{
      "type":"string",
      "enum":[
        "initial",
        "healthy",
        "unhealthy",
        "unused",
        "draining"
      ]
    },
    "TargetId":{"type":"string"},
    "TooManyCertificatesException":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>You've reached the limit on the number of certificates per listener.</p>",
      "error":{
        "code":"TooManyCertificates",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "TooManyListenersException":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>You've reached the limit on the number of listeners per load balancer.</p>",
      "error":{
        "code":"TooManyListeners",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "TooManyLoadBalancersException":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>You've reached the limit on the number of load balancers for your AWS account.</p>",
      "error":{
        "code":"TooManyLoadBalancers",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "TooManyRegistrationsForTargetIdException":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>You've reached the limit on the number of times a target can be registered with a load balancer.</p>",
      "error":{
        "code":"TooManyRegistrationsForTargetId",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "TooManyRulesException":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>You've reached the limit on the number of rules per load balancer.</p>",
      "error":{
        "code":"TooManyRules",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "TooManyTagsException":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>You've reached the limit on the number of tags per load balancer.</p>",
      "error":{
        "code":"TooManyTags",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "TooManyTargetGroupsException":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>You've reached the limit on the number of target groups for your AWS account.</p>",
      "error":{
        "code":"TooManyTargetGroups",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "TooManyTargetsException":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>You've reached the limit on the number of targets.</p>",
      "error":{
        "code":"TooManyTargets",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "UnsupportedProtocolException":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>The specified protocol is not supported.</p>",
      "error":{
        "code":"UnsupportedProtocol",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "VpcId":{"type":"string"},
    "ZoneName":{"type":"string"}
  },
  "documentation":"<fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports two types of load balancers: Classic Load Balancers and Application Load Balancers. A Classic Load Balancer makes routing and load balancing decisions either at the transport layer (TCP/SSL) or the application layer (HTTP/HTTPS), and supports either EC2-Classic or a VPC. An Application Load Balancer makes routing and load balancing decisions at the application layer (HTTP/HTTPS), supports path-based routing, and can route requests to one or more ports on each EC2 instance or container instance in your virtual private cloud (VPC). For more information, see the <a href=\"http://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>This reference covers the 2015-12-01 API, which supports Application Load Balancers. The 2012-06-01 API supports Classic Load Balancers.</p> <p>To get started, complete the following tasks:</p> <ol> <li> <p>Create an Application Load Balancer using <a>CreateLoadBalancer</a>.</p> </li> <li> <p>Create a target group using <a>CreateTargetGroup</a>.</p> </li> <li> <p>Register targets for the target group using <a>RegisterTargets</a>.</p> </li> <li> <p>Create one or more listeners for your load balancer using <a>CreateListener</a>.</p> </li> <li> <p>(Optional) Create one or more rules for content routing based on URL using <a>CreateRule</a>.</p> </li> </ol> <p>To delete an Application Load Balancer and its related resources, complete the following tasks:</p> <ol> <li> <p>Delete the load balancer using <a>DeleteLoadBalancer</a>.</p> </li> <li> <p>Delete the target group using <a>DeleteTargetGroup</a>.</p> </li> </ol> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>"
}
